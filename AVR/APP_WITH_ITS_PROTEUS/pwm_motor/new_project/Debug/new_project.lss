
new_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003846  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00003846  000038da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080008a  0080008a  00003904  2**0
                  ALLOC
  3 .stab         00004098  00000000  00000000  00003904  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000297f  00000000  00000000  0000799c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a31b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a45b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c214  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000deac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e299  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ea67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__vector_10>
      2c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9c 1b 	call	0x3738	; 0x3738 <main>
      8a:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 16 1c 	jmp	0x382c	; 0x382c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <uart_init>:
#include "../../Comman/STD_types.h"
#include "../../Comman/Bit_Math.h"
#include "../../Comman/definition.h"

void uart_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	u8 ucsrc_value=0;
     b50:	19 82       	std	Y+1, r1	; 0x01
	Set_Bit(ucsrc_value, 1);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	82 60       	ori	r24, 0x02	; 2
     b56:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(ucsrc_value, 7);
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	80 68       	ori	r24, 0x80	; 128
     b5c:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(ucsrc_value, 2);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	84 60       	ori	r24, 0x04	; 4
     b62:	89 83       	std	Y+1, r24	; 0x01
	ucsrc_value=UCSRC;
     b64:	e0 e4       	ldi	r30, 0x40	; 64
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=51;
     b6c:	e9 e2       	ldi	r30, 0x29	; 41
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	83 e3       	ldi	r24, 0x33	; 51
     b72:	80 83       	st	Z, r24
	Set_Bit(UCSRB, 4);
     b74:	aa e2       	ldi	r26, 0x2A	; 42
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	ea e2       	ldi	r30, 0x2A	; 42
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 61       	ori	r24, 0x10	; 16
     b80:	8c 93       	st	X, r24
	Set_Bit(UCSRB, 3);
     b82:	aa e2       	ldi	r26, 0x2A	; 42
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	ea e2       	ldi	r30, 0x2A	; 42
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	88 60       	ori	r24, 0x08	; 8
     b8e:	8c 93       	st	X, r24

}
     b90:	0f 90       	pop	r0
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <uart_receive>:
	while(Get_Bit(UCSRA,5)==0){
		UDR =data;

	}
}*/
u8 uart_receive(){
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	0f 92       	push	r0
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
	while(Get_Bit(UCSRA,7)==0){
     ba2:	eb e2       	ldi	r30, 0x2B	; 43
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	88 23       	and	r24, r24
     baa:	34 f0       	brlt	.+12     	; 0xbb8 <uart_receive+0x20>
		return UDR;
     bac:	ec e2       	ldi	r30, 0x2C	; 44
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	89 83       	std	Y+1, r24	; 0x01

	}
}
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <uart_receive+0x20>
     bb8:	0f 90       	pop	r0
     bba:	cf 91       	pop	r28
     bbc:	df 91       	pop	r29
     bbe:	08 95       	ret

00000bc0 <set_timer>:
#include "TIMER_Reg.h"
#include<stdio.h>

void (*ptr_f)(void) = NULL;
void set_timer(timer_info *t)
{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <set_timer+0x6>
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <set_timer+0x8>
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	9a 83       	std	Y+2, r25	; 0x02
     bce:	89 83       	std	Y+1, r24	; 0x01
	if (t->t_type== normal)
     bd0:	e9 81       	ldd	r30, Y+1	; 0x01
     bd2:	fa 81       	ldd	r31, Y+2	; 0x02
     bd4:	80 81       	ld	r24, Z
     bd6:	88 23       	and	r24, r24
     bd8:	21 f5       	brne	.+72     	; 0xc22 <set_timer+0x62>
	{
		Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin3);
     bda:	a3 e5       	ldi	r26, 0x53	; 83
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e3 e5       	ldi	r30, 0x53	; 83
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	87 7f       	andi	r24, 0xF7	; 247
     be6:	8c 93       	st	X, r24
		Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin6);
     be8:	a3 e5       	ldi	r26, 0x53	; 83
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e3 e5       	ldi	r30, 0x53	; 83
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8f 7b       	andi	r24, 0xBF	; 191
     bf4:	8c 93       	st	X, r24
		Set_Bit(TIMSK,Pin0);
     bf6:	a9 e5       	ldi	r26, 0x59	; 89
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e9 e5       	ldi	r30, 0x59	; 89
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	81 60       	ori	r24, 0x01	; 1
     c02:	8c 93       	st	X, r24
		Set_Bit(EXTI_SREG,Pin7);
     c04:	af e5       	ldi	r26, 0x5F	; 95
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ef e5       	ldi	r30, 0x5F	; 95
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 68       	ori	r24, 0x80	; 128
     c10:	8c 93       	st	X, r24
		Set_Bit(Timer_Counter_Interrupt_Flag_Register_TIFR,Pin0);
     c12:	a8 e5       	ldi	r26, 0x58	; 88
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e8 e5       	ldi	r30, 0x58	; 88
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	81 60       	ori	r24, 0x01	; 1
     c1e:	8c 93       	st	X, r24
     c20:	33 c0       	rjmp	.+102    	; 0xc88 <set_timer+0xc8>
	}
	else if(t->t_type== ctc)
     c22:	e9 81       	ldd	r30, Y+1	; 0x01
     c24:	fa 81       	ldd	r31, Y+2	; 0x02
     c26:	80 81       	ld	r24, Z
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	71 f5       	brne	.+92     	; 0xc88 <set_timer+0xc8>
	{
		Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin3);
     c2c:	a3 e5       	ldi	r26, 0x53	; 83
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e3 e5       	ldi	r30, 0x53	; 83
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	88 60       	ori	r24, 0x08	; 8
     c38:	8c 93       	st	X, r24
		Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin6);
     c3a:	a3 e5       	ldi	r26, 0x53	; 83
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e3 e5       	ldi	r30, 0x53	; 83
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	8f 7b       	andi	r24, 0xBF	; 191
     c46:	8c 93       	st	X, r24
		Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin5);
     c48:	a3 e5       	ldi	r26, 0x53	; 83
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e3 e5       	ldi	r30, 0x53	; 83
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 62       	ori	r24, 0x20	; 32
     c54:	8c 93       	st	X, r24
		Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin4);
     c56:	a3 e5       	ldi	r26, 0x53	; 83
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e3 e5       	ldi	r30, 0x53	; 83
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	80 61       	ori	r24, 0x10	; 16
     c62:	8c 93       	st	X, r24
		Set_Bit(TIMSK,Pin1);
     c64:	a9 e5       	ldi	r26, 0x59	; 89
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e9 e5       	ldi	r30, 0x59	; 89
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	82 60       	ori	r24, 0x02	; 2
     c70:	8c 93       	st	X, r24
		Set_Bit(EXTI_SREG,Pin7);
     c72:	af e5       	ldi	r26, 0x5F	; 95
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	ef e5       	ldi	r30, 0x5F	; 95
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	80 68       	ori	r24, 0x80	; 128
     c7e:	8c 93       	st	X, r24
		Output_Compare_Register_OCR0 = 249;
     c80:	ec e5       	ldi	r30, 0x5C	; 92
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	89 ef       	ldi	r24, 0xF9	; 249
     c86:	80 83       	st	Z, r24

	}
	switch(t->pre_type){
     c88:	e9 81       	ldd	r30, Y+1	; 0x01
     c8a:	fa 81       	ldd	r31, Y+2	; 0x02
     c8c:	81 81       	ldd	r24, Z+1	; 0x01
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	3c 83       	std	Y+4, r19	; 0x04
     c94:	2b 83       	std	Y+3, r18	; 0x03
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	9c 81       	ldd	r25, Y+4	; 0x04
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	91 05       	cpc	r25, r1
     c9e:	61 f1       	breq	.+88     	; 0xcf8 <set_timer+0x138>
     ca0:	2b 81       	ldd	r18, Y+3	; 0x03
     ca2:	3c 81       	ldd	r19, Y+4	; 0x04
     ca4:	22 30       	cpi	r18, 0x02	; 2
     ca6:	31 05       	cpc	r19, r1
     ca8:	2c f4       	brge	.+10     	; 0xcb4 <set_timer+0xf4>
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	9c 81       	ldd	r25, Y+4	; 0x04
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	69 f0       	breq	.+26     	; 0xccc <set_timer+0x10c>
     cb2:	63 c0       	rjmp	.+198    	; 0xd7a <set_timer+0x1ba>
     cb4:	2b 81       	ldd	r18, Y+3	; 0x03
     cb6:	3c 81       	ldd	r19, Y+4	; 0x04
     cb8:	22 30       	cpi	r18, 0x02	; 2
     cba:	31 05       	cpc	r19, r1
     cbc:	99 f1       	breq	.+102    	; 0xd24 <set_timer+0x164>
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	91 05       	cpc	r25, r1
     cc6:	09 f4       	brne	.+2      	; 0xcca <set_timer+0x10a>
     cc8:	43 c0       	rjmp	.+134    	; 0xd50 <set_timer+0x190>
     cca:	57 c0       	rjmp	.+174    	; 0xd7a <set_timer+0x1ba>
	case pre_8:    Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin0);
     ccc:	a3 e5       	ldi	r26, 0x53	; 83
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e3 e5       	ldi	r30, 0x53	; 83
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8e 7f       	andi	r24, 0xFE	; 254
     cd8:	8c 93       	st	X, r24
                   Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin1);
     cda:	a3 e5       	ldi	r26, 0x53	; 83
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e3 e5       	ldi	r30, 0x53	; 83
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	82 60       	ori	r24, 0x02	; 2
     ce6:	8c 93       	st	X, r24
                   Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin2);
     ce8:	a3 e5       	ldi	r26, 0x53	; 83
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e3 e5       	ldi	r30, 0x53	; 83
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	8b 7f       	andi	r24, 0xFB	; 251
     cf4:	8c 93       	st	X, r24
     cf6:	41 c0       	rjmp	.+130    	; 0xd7a <set_timer+0x1ba>
                   break;
	case pre_64:   Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin0);
     cf8:	a3 e5       	ldi	r26, 0x53	; 83
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e3 e5       	ldi	r30, 0x53	; 83
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	81 60       	ori	r24, 0x01	; 1
     d04:	8c 93       	st	X, r24
	               Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin1);
     d06:	a3 e5       	ldi	r26, 0x53	; 83
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e3 e5       	ldi	r30, 0x53	; 83
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	82 60       	ori	r24, 0x02	; 2
     d12:	8c 93       	st	X, r24
	               Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin2);
     d14:	a3 e5       	ldi	r26, 0x53	; 83
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e3 e5       	ldi	r30, 0x53	; 83
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8b 7f       	andi	r24, 0xFB	; 251
     d20:	8c 93       	st	X, r24
     d22:	2b c0       	rjmp	.+86     	; 0xd7a <set_timer+0x1ba>
	               break;
	case pre_256:  Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin0);
     d24:	a3 e5       	ldi	r26, 0x53	; 83
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e3 e5       	ldi	r30, 0x53	; 83
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8e 7f       	andi	r24, 0xFE	; 254
     d30:	8c 93       	st	X, r24
	               Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin1);
     d32:	a3 e5       	ldi	r26, 0x53	; 83
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e3 e5       	ldi	r30, 0x53	; 83
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8d 7f       	andi	r24, 0xFD	; 253
     d3e:	8c 93       	st	X, r24
	               Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin2);
     d40:	a3 e5       	ldi	r26, 0x53	; 83
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e3 e5       	ldi	r30, 0x53	; 83
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	84 60       	ori	r24, 0x04	; 4
     d4c:	8c 93       	st	X, r24
     d4e:	15 c0       	rjmp	.+42     	; 0xd7a <set_timer+0x1ba>
		           break;
	case pre_1024: Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin0);
     d50:	a3 e5       	ldi	r26, 0x53	; 83
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e3 e5       	ldi	r30, 0x53	; 83
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	81 60       	ori	r24, 0x01	; 1
     d5c:	8c 93       	st	X, r24
		           Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin1);
     d5e:	a3 e5       	ldi	r26, 0x53	; 83
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e3 e5       	ldi	r30, 0x53	; 83
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8d 7f       	andi	r24, 0xFD	; 253
     d6a:	8c 93       	st	X, r24
		           Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin2);
     d6c:	a3 e5       	ldi	r26, 0x53	; 83
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e3 e5       	ldi	r30, 0x53	; 83
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	84 60       	ori	r24, 0x04	; 4
     d78:	8c 93       	st	X, r24
		           break;
	}
}
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <Set_PWM>:
{


}*/
void Set_PWM(PWM_info *P)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <Set_PWM+0x6>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <Set_PWM+0x8>
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
	 if(P->PWM_type== PWM_PHASE_CORRECT)
     d98:	e9 81       	ldd	r30, Y+1	; 0x01
     d9a:	fa 81       	ldd	r31, Y+2	; 0x02
     d9c:	80 81       	ld	r24, Z
     d9e:	88 23       	and	r24, r24
     da0:	09 f0       	breq	.+2      	; 0xda4 <Set_PWM+0x1c>
     da2:	64 c0       	rjmp	.+200    	; 0xe6c <Set_PWM+0xe4>
			{

				Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin3);
     da4:	a3 e5       	ldi	r26, 0x53	; 83
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e3 e5       	ldi	r30, 0x53	; 83
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	87 7f       	andi	r24, 0xF7	; 247
     db0:	8c 93       	st	X, r24
				Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin6);
     db2:	a3 e5       	ldi	r26, 0x53	; 83
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e3 e5       	ldi	r30, 0x53	; 83
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	80 64       	ori	r24, 0x40	; 64
     dbe:	8c 93       	st	X, r24
				Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin5);
     dc0:	a3 e5       	ldi	r26, 0x53	; 83
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e3 e5       	ldi	r30, 0x53	; 83
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	80 62       	ori	r24, 0x20	; 32
     dcc:	8c 93       	st	X, r24
				Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin4);
     dce:	a3 e5       	ldi	r26, 0x53	; 83
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e3 e5       	ldi	r30, 0x53	; 83
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	80 61       	ori	r24, 0x10	; 16
     dda:	8c 93       	st	X, r24
				Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin0);
     ddc:	a3 e5       	ldi	r26, 0x53	; 83
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e3 e5       	ldi	r30, 0x53	; 83
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8e 7f       	andi	r24, 0xFE	; 254
     de8:	8c 93       	st	X, r24
				Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin1);
     dea:	a3 e5       	ldi	r26, 0x53	; 83
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e3 e5       	ldi	r30, 0x53	; 83
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	82 60       	ori	r24, 0x02	; 2
     df6:	8c 93       	st	X, r24
				Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin2);
     df8:	a3 e5       	ldi	r26, 0x53	; 83
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e3 e5       	ldi	r30, 0x53	; 83
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	8b 7f       	andi	r24, 0xFB	; 251
     e04:	8c 93       	st	X, r24
				Set_Bit(EXTI_SREG,Pin7);
     e06:	af e5       	ldi	r26, 0x5F	; 95
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ef e5       	ldi	r30, 0x5F	; 95
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 68       	ori	r24, 0x80	; 128
     e12:	8c 93       	st	X, r24
				/*SEt compare match unit register*/
				Output_Compare_Register_OCR0 = 0;
     e14:	ec e5       	ldi	r30, 0x5C	; 92
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	10 82       	st	Z, r1
			//	Timer_Counter_Register_TCNT0 = 0;
				//Set_Bit(Timer_Counter_Interrupt_Flag_Register_TIFR,Pin1);
				if(P->PWM_inv_type== PWM_inverting_mode)
     e1a:	e9 81       	ldd	r30, Y+1	; 0x01
     e1c:	fa 81       	ldd	r31, Y+2	; 0x02
     e1e:	81 81       	ldd	r24, Z+1	; 0x01
     e20:	88 23       	and	r24, r24
     e22:	79 f4       	brne	.+30     	; 0xe42 <Set_PWM+0xba>
			       {
					Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin5);
     e24:	a3 e5       	ldi	r26, 0x53	; 83
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e3 e5       	ldi	r30, 0x53	; 83
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 62       	ori	r24, 0x20	; 32
     e30:	8c 93       	st	X, r24
					Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin4);
     e32:	a3 e5       	ldi	r26, 0x53	; 83
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e3 e5       	ldi	r30, 0x53	; 83
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	8f 7e       	andi	r24, 0xEF	; 239
     e3e:	8c 93       	st	X, r24
     e40:	4f c0       	rjmp	.+158    	; 0xee0 <Set_PWM+0x158>
		           	}
	     	    else if(P->PWM_inv_type== PWM_nin_inverting_mode)
     e42:	e9 81       	ldd	r30, Y+1	; 0x01
     e44:	fa 81       	ldd	r31, Y+2	; 0x02
     e46:	81 81       	ldd	r24, Z+1	; 0x01
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	09 f0       	breq	.+2      	; 0xe4e <Set_PWM+0xc6>
     e4c:	49 c0       	rjmp	.+146    	; 0xee0 <Set_PWM+0x158>
						{
	     	    	Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin5);
     e4e:	a3 e5       	ldi	r26, 0x53	; 83
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e3 e5       	ldi	r30, 0x53	; 83
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 62       	ori	r24, 0x20	; 32
     e5a:	8c 93       	st	X, r24
	     	    	Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin4);
     e5c:	a3 e5       	ldi	r26, 0x53	; 83
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e3 e5       	ldi	r30, 0x53	; 83
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	80 61       	ori	r24, 0x10	; 16
     e68:	8c 93       	st	X, r24
     e6a:	3a c0       	rjmp	.+116    	; 0xee0 <Set_PWM+0x158>
						}

			}
		else if(P->PWM_type== PWM_FAST)
     e6c:	e9 81       	ldd	r30, Y+1	; 0x01
     e6e:	fa 81       	ldd	r31, Y+2	; 0x02
     e70:	80 81       	ld	r24, Z
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	a9 f5       	brne	.+106    	; 0xee0 <Set_PWM+0x158>
				{
                Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin3);
     e76:	a3 e5       	ldi	r26, 0x53	; 83
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e3 e5       	ldi	r30, 0x53	; 83
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	88 60       	ori	r24, 0x08	; 8
     e82:	8c 93       	st	X, r24
	        	Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin6);
     e84:	a3 e5       	ldi	r26, 0x53	; 83
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e3 e5       	ldi	r30, 0x53	; 83
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 64       	ori	r24, 0x40	; 64
     e90:	8c 93       	st	X, r24

	        	/*SEt compare match unit register*/
	        //	Output_Compare_Register_OCR0 = 125;
	        	//Timer_Counter_Register_TCNT0 = 0;
	        	//Set_Bit(Timer_Counter_Interrupt_Flag_Register_TIFR,Pin1);
	        	if(P->PWM_inv_type== PWM_nin_inverting_mode)
     e92:	e9 81       	ldd	r30, Y+1	; 0x01
     e94:	fa 81       	ldd	r31, Y+2	; 0x02
     e96:	81 81       	ldd	r24, Z+1	; 0x01
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	79 f4       	brne	.+30     	; 0xeba <Set_PWM+0x132>
	               {
	        		Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin5);
     e9c:	a3 e5       	ldi	r26, 0x53	; 83
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e3 e5       	ldi	r30, 0x53	; 83
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 62       	ori	r24, 0x20	; 32
     ea8:	8c 93       	st	X, r24
	        		Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin4);
     eaa:	a3 e5       	ldi	r26, 0x53	; 83
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e3 e5       	ldi	r30, 0x53	; 83
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7e       	andi	r24, 0xEF	; 239
     eb6:	8c 93       	st	X, r24
     eb8:	13 c0       	rjmp	.+38     	; 0xee0 <Set_PWM+0x158>
                   	}
 	            else if(P->PWM_inv_type== PWM_inverting_mode)
     eba:	e9 81       	ldd	r30, Y+1	; 0x01
     ebc:	fa 81       	ldd	r31, Y+2	; 0x02
     ebe:	81 81       	ldd	r24, Z+1	; 0x01
     ec0:	88 23       	and	r24, r24
     ec2:	71 f4       	brne	.+28     	; 0xee0 <Set_PWM+0x158>
	        			{
 	            	Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin5);
     ec4:	a3 e5       	ldi	r26, 0x53	; 83
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e3 e5       	ldi	r30, 0x53	; 83
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 62       	ori	r24, 0x20	; 32
     ed0:	8c 93       	st	X, r24
 	            	Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin4);
     ed2:	a3 e5       	ldi	r26, 0x53	; 83
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e3 e5       	ldi	r30, 0x53	; 83
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 61       	ori	r24, 0x10	; 16
     ede:	8c 93       	st	X, r24
	        			}
				}
	 switch(P->pre_type){
     ee0:	e9 81       	ldd	r30, Y+1	; 0x01
     ee2:	fa 81       	ldd	r31, Y+2	; 0x02
     ee4:	82 81       	ldd	r24, Z+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	3c 83       	std	Y+4, r19	; 0x04
     eec:	2b 83       	std	Y+3, r18	; 0x03
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	91 05       	cpc	r25, r1
     ef6:	61 f1       	breq	.+88     	; 0xf50 <Set_PWM+0x1c8>
     ef8:	2b 81       	ldd	r18, Y+3	; 0x03
     efa:	3c 81       	ldd	r19, Y+4	; 0x04
     efc:	22 30       	cpi	r18, 0x02	; 2
     efe:	31 05       	cpc	r19, r1
     f00:	2c f4       	brge	.+10     	; 0xf0c <Set_PWM+0x184>
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	69 f0       	breq	.+26     	; 0xf24 <Set_PWM+0x19c>
     f0a:	63 c0       	rjmp	.+198    	; 0xfd2 <Set_PWM+0x24a>
     f0c:	2b 81       	ldd	r18, Y+3	; 0x03
     f0e:	3c 81       	ldd	r19, Y+4	; 0x04
     f10:	22 30       	cpi	r18, 0x02	; 2
     f12:	31 05       	cpc	r19, r1
     f14:	99 f1       	breq	.+102    	; 0xf7c <Set_PWM+0x1f4>
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	91 05       	cpc	r25, r1
     f1e:	09 f4       	brne	.+2      	; 0xf22 <Set_PWM+0x19a>
     f20:	43 c0       	rjmp	.+134    	; 0xfa8 <Set_PWM+0x220>
     f22:	57 c0       	rjmp	.+174    	; 0xfd2 <Set_PWM+0x24a>
	 	case pre_8:    Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin0);
     f24:	a3 e5       	ldi	r26, 0x53	; 83
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e3 e5       	ldi	r30, 0x53	; 83
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8e 7f       	andi	r24, 0xFE	; 254
     f30:	8c 93       	st	X, r24
	                    Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin1);
     f32:	a3 e5       	ldi	r26, 0x53	; 83
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e3 e5       	ldi	r30, 0x53	; 83
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	82 60       	ori	r24, 0x02	; 2
     f3e:	8c 93       	st	X, r24
	                    Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin2);
     f40:	a3 e5       	ldi	r26, 0x53	; 83
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e3 e5       	ldi	r30, 0x53	; 83
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	8b 7f       	andi	r24, 0xFB	; 251
     f4c:	8c 93       	st	X, r24
     f4e:	41 c0       	rjmp	.+130    	; 0xfd2 <Set_PWM+0x24a>
	                    break;
	 	case pre_64:   Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin0);
     f50:	a3 e5       	ldi	r26, 0x53	; 83
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e3 e5       	ldi	r30, 0x53	; 83
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	81 60       	ori	r24, 0x01	; 1
     f5c:	8c 93       	st	X, r24
	 	               Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin1);
     f5e:	a3 e5       	ldi	r26, 0x53	; 83
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e3 e5       	ldi	r30, 0x53	; 83
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	82 60       	ori	r24, 0x02	; 2
     f6a:	8c 93       	st	X, r24
	 	               Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin2);
     f6c:	a3 e5       	ldi	r26, 0x53	; 83
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e3 e5       	ldi	r30, 0x53	; 83
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8b 7f       	andi	r24, 0xFB	; 251
     f78:	8c 93       	st	X, r24
     f7a:	2b c0       	rjmp	.+86     	; 0xfd2 <Set_PWM+0x24a>
	 	               break;
	 	case pre_256:  Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin0);
     f7c:	a3 e5       	ldi	r26, 0x53	; 83
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e3 e5       	ldi	r30, 0x53	; 83
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	8c 93       	st	X, r24
	 	               Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin1);
     f8a:	a3 e5       	ldi	r26, 0x53	; 83
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e3 e5       	ldi	r30, 0x53	; 83
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8d 7f       	andi	r24, 0xFD	; 253
     f96:	8c 93       	st	X, r24
	 	               Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin2);
     f98:	a3 e5       	ldi	r26, 0x53	; 83
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e3 e5       	ldi	r30, 0x53	; 83
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	84 60       	ori	r24, 0x04	; 4
     fa4:	8c 93       	st	X, r24
     fa6:	15 c0       	rjmp	.+42     	; 0xfd2 <Set_PWM+0x24a>
	 		           break;
	 	case pre_1024: Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin0);
     fa8:	a3 e5       	ldi	r26, 0x53	; 83
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e3 e5       	ldi	r30, 0x53	; 83
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	81 60       	ori	r24, 0x01	; 1
     fb4:	8c 93       	st	X, r24
	 		           Clr_Bit(Timer_Counter_Control_Register_TCCR0,Pin1);
     fb6:	a3 e5       	ldi	r26, 0x53	; 83
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e3 e5       	ldi	r30, 0x53	; 83
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8d 7f       	andi	r24, 0xFD	; 253
     fc2:	8c 93       	st	X, r24
	 		           Set_Bit(Timer_Counter_Control_Register_TCCR0,Pin2);
     fc4:	a3 e5       	ldi	r26, 0x53	; 83
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e3 e5       	ldi	r30, 0x53	; 83
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	84 60       	ori	r24, 0x04	; 4
     fd0:	8c 93       	st	X, r24
	 		           break;
	 	}
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <TIMERS_Setpwm>:
void  TIMERS_Setpwm(u8 copy_cmpare)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
	Output_Compare_Register_OCR0= copy_cmpare;
     fec:	ec e5       	ldi	r30, 0x5C	; 92
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	80 83       	st	Z, r24
}
     ff4:	0f 90       	pop	r0
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <TIMERS_SetCallBack>:
void  TIMERS_SetCallBack(void(*Copy_pf)(void))
{
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	00 d0       	rcall	.+0      	; 0x1002 <TIMERS_SetCallBack+0x6>
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	89 83       	std	Y+1, r24	; 0x01
		ptr_f =Copy_pf;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	90 93 8b 00 	sts	0x008B, r25
    1012:	80 93 8a 00 	sts	0x008A, r24

}
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <__vector_10>:
void __vector_10(void)
{
    1020:	1f 92       	push	r1
    1022:	0f 92       	push	r0
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	0f 92       	push	r0
    1028:	11 24       	eor	r1, r1
    102a:	2f 93       	push	r18
    102c:	3f 93       	push	r19
    102e:	4f 93       	push	r20
    1030:	5f 93       	push	r21
    1032:	6f 93       	push	r22
    1034:	7f 93       	push	r23
    1036:	8f 93       	push	r24
    1038:	9f 93       	push	r25
    103a:	af 93       	push	r26
    103c:	bf 93       	push	r27
    103e:	ef 93       	push	r30
    1040:	ff 93       	push	r31
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
	if(ptr_f != NULL)
    104a:	80 91 8a 00 	lds	r24, 0x008A
    104e:	90 91 8b 00 	lds	r25, 0x008B
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	29 f0       	breq	.+10     	; 0x1060 <__vector_10+0x40>
		{
	ptr_f();
    1056:	e0 91 8a 00 	lds	r30, 0x008A
    105a:	f0 91 8b 00 	lds	r31, 0x008B
    105e:	09 95       	icall
		}
}
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	ff 91       	pop	r31
    1066:	ef 91       	pop	r30
    1068:	bf 91       	pop	r27
    106a:	af 91       	pop	r26
    106c:	9f 91       	pop	r25
    106e:	8f 91       	pop	r24
    1070:	7f 91       	pop	r23
    1072:	6f 91       	pop	r22
    1074:	5f 91       	pop	r21
    1076:	4f 91       	pop	r20
    1078:	3f 91       	pop	r19
    107a:	2f 91       	pop	r18
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <__vector_11>:
void __vector_11(void)
{
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	2f 93       	push	r18
    1092:	3f 93       	push	r19
    1094:	4f 93       	push	r20
    1096:	5f 93       	push	r21
    1098:	6f 93       	push	r22
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	if(ptr_f != NULL)
    10b0:	80 91 8a 00 	lds	r24, 0x008A
    10b4:	90 91 8b 00 	lds	r25, 0x008B
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	29 f0       	breq	.+10     	; 0x10c6 <__vector_11+0x40>
		{
	ptr_f();
    10bc:	e0 91 8a 00 	lds	r30, 0x008A
    10c0:	f0 91 8b 00 	lds	r31, 0x008B
    10c4:	09 95       	icall
		}
}
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	ff 91       	pop	r31
    10cc:	ef 91       	pop	r30
    10ce:	bf 91       	pop	r27
    10d0:	af 91       	pop	r26
    10d2:	9f 91       	pop	r25
    10d4:	8f 91       	pop	r24
    10d6:	7f 91       	pop	r23
    10d8:	6f 91       	pop	r22
    10da:	5f 91       	pop	r21
    10dc:	4f 91       	pop	r20
    10de:	3f 91       	pop	r19
    10e0:	2f 91       	pop	r18
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <EXTI_EXTIErrStateInit>:
#include "INT_Interface.h"
#include <stdio.h>

void (*ptr_fn)(void) = NULL;
EXTIErrState EXTI_EXTIErrStateInit(EXTI_Info * INT)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	2a 97       	sbiw	r28, 0x0a	; 10
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	9a 83       	std	Y+2, r25	; 0x02
    1102:	89 83       	std	Y+1, r24	; 0x01
	if (INT->Type == EXTI_INT0)
    1104:	e9 81       	ldd	r30, Y+1	; 0x01
    1106:	fa 81       	ldd	r31, Y+2	; 0x02
    1108:	80 81       	ld	r24, Z
    110a:	88 23       	and	r24, r24
    110c:	09 f0       	breq	.+2      	; 0x1110 <EXTI_EXTIErrStateInit+0x24>
    110e:	8e c0       	rjmp	.+284    	; 0x122c <EXTI_EXTIErrStateInit+0x140>
	{
		/*Select the Direction as InputPD2*/
		DIO_ErrStateSetPinDirection(DIO_GroupD,Pin2,DIO_Input);
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	62 e0       	ldi	r22, 0x02	; 2
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_ErrStateSetPinDirection>
		/*Turn On the Pull Up */
		DIO_ErrStateSetPinValue(DIO_GroupD,Pin2,DIO_High);
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	62 e0       	ldi	r22, 0x02	; 2
    111e:	41 e0       	ldi	r20, 0x01	; 1
    1120:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
		switch(INT->Int_Sens)
    1124:	e9 81       	ldd	r30, Y+1	; 0x01
    1126:	fa 81       	ldd	r31, Y+2	; 0x02
    1128:	81 81       	ldd	r24, Z+1	; 0x01
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	39 87       	std	Y+9, r19	; 0x09
    1130:	28 87       	std	Y+8, r18	; 0x08
    1132:	88 85       	ldd	r24, Y+8	; 0x08
    1134:	99 85       	ldd	r25, Y+9	; 0x09
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	91 05       	cpc	r25, r1
    113a:	21 f1       	breq	.+72     	; 0x1184 <EXTI_EXTIErrStateInit+0x98>
    113c:	28 85       	ldd	r18, Y+8	; 0x08
    113e:	39 85       	ldd	r19, Y+9	; 0x09
    1140:	22 30       	cpi	r18, 0x02	; 2
    1142:	31 05       	cpc	r19, r1
    1144:	2c f4       	brge	.+10     	; 0x1150 <EXTI_EXTIErrStateInit+0x64>
    1146:	88 85       	ldd	r24, Y+8	; 0x08
    1148:	99 85       	ldd	r25, Y+9	; 0x09
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	61 f0       	breq	.+24     	; 0x1166 <EXTI_EXTIErrStateInit+0x7a>
    114e:	47 c0       	rjmp	.+142    	; 0x11de <EXTI_EXTIErrStateInit+0xf2>
    1150:	28 85       	ldd	r18, Y+8	; 0x08
    1152:	39 85       	ldd	r19, Y+9	; 0x09
    1154:	22 30       	cpi	r18, 0x02	; 2
    1156:	31 05       	cpc	r19, r1
    1158:	21 f1       	breq	.+72     	; 0x11a2 <EXTI_EXTIErrStateInit+0xb6>
    115a:	88 85       	ldd	r24, Y+8	; 0x08
    115c:	99 85       	ldd	r25, Y+9	; 0x09
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	91 05       	cpc	r25, r1
    1162:	71 f1       	breq	.+92     	; 0x11c0 <EXTI_EXTIErrStateInit+0xd4>
    1164:	3c c0       	rjmp	.+120    	; 0x11de <EXTI_EXTIErrStateInit+0xf2>
		{
		case EXTI_Low :
			Clr_Bit(EXTI_MCUCR,EXTI_ISC00);
    1166:	a5 e5       	ldi	r26, 0x55	; 85
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e5       	ldi	r30, 0x55	; 85
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	8e 7f       	andi	r24, 0xFE	; 254
    1172:	8c 93       	st	X, r24
			Clr_Bit(EXTI_MCUCR,EXTI_ISC01);
    1174:	a5 e5       	ldi	r26, 0x55	; 85
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e5 e5       	ldi	r30, 0x55	; 85
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	8d 7f       	andi	r24, 0xFD	; 253
    1180:	8c 93       	st	X, r24
    1182:	30 c0       	rjmp	.+96     	; 0x11e4 <EXTI_EXTIErrStateInit+0xf8>
			break ;
		case EXTI_AnyChange:
			Set_Bit(EXTI_MCUCR,EXTI_ISC00);
    1184:	a5 e5       	ldi	r26, 0x55	; 85
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e5 e5       	ldi	r30, 0x55	; 85
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	81 60       	ori	r24, 0x01	; 1
    1190:	8c 93       	st	X, r24
			Clr_Bit(EXTI_MCUCR,EXTI_ISC01);
    1192:	a5 e5       	ldi	r26, 0x55	; 85
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e5 e5       	ldi	r30, 0x55	; 85
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	8d 7f       	andi	r24, 0xFD	; 253
    119e:	8c 93       	st	X, r24
    11a0:	21 c0       	rjmp	.+66     	; 0x11e4 <EXTI_EXTIErrStateInit+0xf8>
			break;
		case EXTI_Falling:
			Clr_Bit(EXTI_MCUCR,EXTI_ISC00);
    11a2:	a5 e5       	ldi	r26, 0x55	; 85
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e5 e5       	ldi	r30, 0x55	; 85
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8e 7f       	andi	r24, 0xFE	; 254
    11ae:	8c 93       	st	X, r24
			Set_Bit(EXTI_MCUCR,EXTI_ISC01);
    11b0:	a5 e5       	ldi	r26, 0x55	; 85
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e5 e5       	ldi	r30, 0x55	; 85
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	82 60       	ori	r24, 0x02	; 2
    11bc:	8c 93       	st	X, r24
    11be:	12 c0       	rjmp	.+36     	; 0x11e4 <EXTI_EXTIErrStateInit+0xf8>
			break;
		case EXTI_Rising :
			Set_Bit(EXTI_MCUCR,EXTI_ISC00);
    11c0:	a5 e5       	ldi	r26, 0x55	; 85
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e5 e5       	ldi	r30, 0x55	; 85
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	81 60       	ori	r24, 0x01	; 1
    11cc:	8c 93       	st	X, r24
			Set_Bit(EXTI_MCUCR,EXTI_ISC01);
    11ce:	a5 e5       	ldi	r26, 0x55	; 85
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e5 e5       	ldi	r30, 0x55	; 85
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	8c 93       	st	X, r24
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <EXTI_EXTIErrStateInit+0xf8>
			break;
		default : return EXTI_IntSensErr ;
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	9f 83       	std	Y+7, r25	; 0x07
    11e2:	14 c1       	rjmp	.+552    	; 0x140c <EXTI_EXTIErrStateInit+0x320>
		}
		if (INT->Handler == EXTI_Polling)
    11e4:	e9 81       	ldd	r30, Y+1	; 0x01
    11e6:	fa 81       	ldd	r31, Y+2	; 0x02
    11e8:	82 81       	ldd	r24, Z+2	; 0x02
    11ea:	88 23       	and	r24, r24
    11ec:	41 f4       	brne	.+16     	; 0x11fe <EXTI_EXTIErrStateInit+0x112>
		{
			Clr_Bit(EXTI_GICR,EXTIInterrupt_INT0);
    11ee:	ab e5       	ldi	r26, 0x5B	; 91
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	eb e5       	ldi	r30, 0x5B	; 91
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 7b       	andi	r24, 0xBF	; 191
    11fa:	8c 93       	st	X, r24
    11fc:	06 c1       	rjmp	.+524    	; 0x140a <EXTI_EXTIErrStateInit+0x31e>
		}
		else if(INT->Handler == EXTI_Interrupt)
    11fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1200:	fa 81       	ldd	r31, Y+2	; 0x02
    1202:	82 81       	ldd	r24, Z+2	; 0x02
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	79 f4       	brne	.+30     	; 0x1226 <EXTI_EXTIErrStateInit+0x13a>
		{
			Set_Bit(EXTI_GICR,EXTIInterrupt_INT0);//SIE
    1208:	ab e5       	ldi	r26, 0x5B	; 91
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	eb e5       	ldi	r30, 0x5B	; 91
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 64       	ori	r24, 0x40	; 64
    1214:	8c 93       	st	X, r24
			Set_Bit(EXTI_SREG,Pin7);//GLOBAL
    1216:	af e5       	ldi	r26, 0x5F	; 95
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ef e5       	ldi	r30, 0x5F	; 95
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	80 68       	ori	r24, 0x80	; 128
    1222:	8c 93       	st	X, r24
    1224:	f2 c0       	rjmp	.+484    	; 0x140a <EXTI_EXTIErrStateInit+0x31e>
		}
		else
		{
			return EXTI_HandlerErr;
    1226:	22 e0       	ldi	r18, 0x02	; 2
    1228:	2f 83       	std	Y+7, r18	; 0x07
    122a:	f0 c0       	rjmp	.+480    	; 0x140c <EXTI_EXTIErrStateInit+0x320>
		}

	}
	else if (INT->Type == EXTI_INT1)
    122c:	e9 81       	ldd	r30, Y+1	; 0x01
    122e:	fa 81       	ldd	r31, Y+2	; 0x02
    1230:	80 81       	ld	r24, Z
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	09 f0       	breq	.+2      	; 0x1238 <EXTI_EXTIErrStateInit+0x14c>
    1236:	8e c0       	rjmp	.+284    	; 0x1354 <EXTI_EXTIErrStateInit+0x268>
	{
		/*Select the Direction as InputPD3*/
		DIO_ErrStateSetPinDirection(DIO_GroupD,Pin3,DIO_Input);
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	63 e0       	ldi	r22, 0x03	; 3
    123c:	40 e0       	ldi	r20, 0x00	; 0
    123e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_ErrStateSetPinDirection>
		/*Turn On the Pull Up */
		DIO_ErrStateSetPinValue(DIO_GroupD,Pin3,DIO_High);
    1242:	83 e0       	ldi	r24, 0x03	; 3
    1244:	63 e0       	ldi	r22, 0x03	; 3
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
		switch(INT->Int_Sens)
    124c:	e9 81       	ldd	r30, Y+1	; 0x01
    124e:	fa 81       	ldd	r31, Y+2	; 0x02
    1250:	81 81       	ldd	r24, Z+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3e 83       	std	Y+6, r19	; 0x06
    1258:	2d 83       	std	Y+5, r18	; 0x05
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	91 05       	cpc	r25, r1
    1262:	21 f1       	breq	.+72     	; 0x12ac <EXTI_EXTIErrStateInit+0x1c0>
    1264:	2d 81       	ldd	r18, Y+5	; 0x05
    1266:	3e 81       	ldd	r19, Y+6	; 0x06
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	2c f4       	brge	.+10     	; 0x1278 <EXTI_EXTIErrStateInit+0x18c>
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	61 f0       	breq	.+24     	; 0x128e <EXTI_EXTIErrStateInit+0x1a2>
    1276:	47 c0       	rjmp	.+142    	; 0x1306 <EXTI_EXTIErrStateInit+0x21a>
    1278:	2d 81       	ldd	r18, Y+5	; 0x05
    127a:	3e 81       	ldd	r19, Y+6	; 0x06
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	21 f1       	breq	.+72     	; 0x12ca <EXTI_EXTIErrStateInit+0x1de>
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	71 f1       	breq	.+92     	; 0x12e8 <EXTI_EXTIErrStateInit+0x1fc>
    128c:	3c c0       	rjmp	.+120    	; 0x1306 <EXTI_EXTIErrStateInit+0x21a>
		{
		case EXTI_Low :
			Clr_Bit(EXTI_MCUCR,EXTI_ISC10);
    128e:	a5 e5       	ldi	r26, 0x55	; 85
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e5 e5       	ldi	r30, 0x55	; 85
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8b 7f       	andi	r24, 0xFB	; 251
    129a:	8c 93       	st	X, r24
			Clr_Bit(EXTI_MCUCR,EXTI_ISC11);
    129c:	a5 e5       	ldi	r26, 0x55	; 85
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e5 e5       	ldi	r30, 0x55	; 85
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	87 7f       	andi	r24, 0xF7	; 247
    12a8:	8c 93       	st	X, r24
    12aa:	30 c0       	rjmp	.+96     	; 0x130c <EXTI_EXTIErrStateInit+0x220>
			break ;
		case EXTI_AnyChange:
			Set_Bit(EXTI_MCUCR,EXTI_ISC10);
    12ac:	a5 e5       	ldi	r26, 0x55	; 85
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e5 e5       	ldi	r30, 0x55	; 85
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	84 60       	ori	r24, 0x04	; 4
    12b8:	8c 93       	st	X, r24
			Clr_Bit(EXTI_MCUCR,EXTI_ISC11);
    12ba:	a5 e5       	ldi	r26, 0x55	; 85
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e5 e5       	ldi	r30, 0x55	; 85
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	87 7f       	andi	r24, 0xF7	; 247
    12c6:	8c 93       	st	X, r24
    12c8:	21 c0       	rjmp	.+66     	; 0x130c <EXTI_EXTIErrStateInit+0x220>
			break;
		case EXTI_Falling:
			Clr_Bit(EXTI_MCUCR,EXTI_ISC10);
    12ca:	a5 e5       	ldi	r26, 0x55	; 85
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e5 e5       	ldi	r30, 0x55	; 85
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	8b 7f       	andi	r24, 0xFB	; 251
    12d6:	8c 93       	st	X, r24
			Set_Bit(EXTI_MCUCR,EXTI_ISC11);
    12d8:	a5 e5       	ldi	r26, 0x55	; 85
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e5 e5       	ldi	r30, 0x55	; 85
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	88 60       	ori	r24, 0x08	; 8
    12e4:	8c 93       	st	X, r24
    12e6:	12 c0       	rjmp	.+36     	; 0x130c <EXTI_EXTIErrStateInit+0x220>
			break;
		case EXTI_Rising :
			Set_Bit(EXTI_MCUCR,EXTI_ISC10);
    12e8:	a5 e5       	ldi	r26, 0x55	; 85
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e5 e5       	ldi	r30, 0x55	; 85
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	84 60       	ori	r24, 0x04	; 4
    12f4:	8c 93       	st	X, r24
			Set_Bit(EXTI_MCUCR,EXTI_ISC11);
    12f6:	a5 e5       	ldi	r26, 0x55	; 85
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e5 e5       	ldi	r30, 0x55	; 85
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	88 60       	ori	r24, 0x08	; 8
    1302:	8c 93       	st	X, r24
    1304:	03 c0       	rjmp	.+6      	; 0x130c <EXTI_EXTIErrStateInit+0x220>
			break;
		default : return EXTI_IntSensErr ;
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	9f 83       	std	Y+7, r25	; 0x07
    130a:	80 c0       	rjmp	.+256    	; 0x140c <EXTI_EXTIErrStateInit+0x320>
		}
		if (INT->Handler == EXTI_Polling)
    130c:	e9 81       	ldd	r30, Y+1	; 0x01
    130e:	fa 81       	ldd	r31, Y+2	; 0x02
    1310:	82 81       	ldd	r24, Z+2	; 0x02
    1312:	88 23       	and	r24, r24
    1314:	41 f4       	brne	.+16     	; 0x1326 <EXTI_EXTIErrStateInit+0x23a>
		{
			Clr_Bit(EXTI_GICR,EXTIInterrupt_INT1);
    1316:	ab e5       	ldi	r26, 0x5B	; 91
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	eb e5       	ldi	r30, 0x5B	; 91
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8f 77       	andi	r24, 0x7F	; 127
    1322:	8c 93       	st	X, r24
    1324:	72 c0       	rjmp	.+228    	; 0x140a <EXTI_EXTIErrStateInit+0x31e>
		}
		else if(INT->Handler == EXTI_Interrupt)
    1326:	e9 81       	ldd	r30, Y+1	; 0x01
    1328:	fa 81       	ldd	r31, Y+2	; 0x02
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	79 f4       	brne	.+30     	; 0x134e <EXTI_EXTIErrStateInit+0x262>
		{
			Set_Bit(EXTI_GICR,EXTIInterrupt_INT1);
    1330:	ab e5       	ldi	r26, 0x5B	; 91
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	eb e5       	ldi	r30, 0x5B	; 91
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	80 68       	ori	r24, 0x80	; 128
    133c:	8c 93       	st	X, r24
			Set_Bit(EXTI_SREG,Pin7);
    133e:	af e5       	ldi	r26, 0x5F	; 95
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	ef e5       	ldi	r30, 0x5F	; 95
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	80 68       	ori	r24, 0x80	; 128
    134a:	8c 93       	st	X, r24
    134c:	5e c0       	rjmp	.+188    	; 0x140a <EXTI_EXTIErrStateInit+0x31e>
		}
		else
		{
			return EXTI_HandlerErr;
    134e:	22 e0       	ldi	r18, 0x02	; 2
    1350:	2f 83       	std	Y+7, r18	; 0x07
    1352:	5c c0       	rjmp	.+184    	; 0x140c <EXTI_EXTIErrStateInit+0x320>
		}
	}
	else if (INT->Type == EXTI_INT2)
    1354:	e9 81       	ldd	r30, Y+1	; 0x01
    1356:	fa 81       	ldd	r31, Y+2	; 0x02
    1358:	80 81       	ld	r24, Z
    135a:	82 30       	cpi	r24, 0x02	; 2
    135c:	09 f0       	breq	.+2      	; 0x1360 <EXTI_EXTIErrStateInit+0x274>
    135e:	53 c0       	rjmp	.+166    	; 0x1406 <EXTI_EXTIErrStateInit+0x31a>
	{
		/*Select the Direction as Input PB2*/

		DIO_ErrStateSetPinDirection(DIO_GroupB,Pin2,DIO_Input);
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	62 e0       	ldi	r22, 0x02	; 2
    1364:	40 e0       	ldi	r20, 0x00	; 0
    1366:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_ErrStateSetPinDirection>
		/*Turn On the Pull Up */
		DIO_ErrStateSetPinValue(DIO_GroupB,Pin2,DIO_High);
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	62 e0       	ldi	r22, 0x02	; 2
    136e:	41 e0       	ldi	r20, 0x01	; 1
    1370:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>

		switch(INT->Int_Sens)
    1374:	e9 81       	ldd	r30, Y+1	; 0x01
    1376:	fa 81       	ldd	r31, Y+2	; 0x02
    1378:	81 81       	ldd	r24, Z+1	; 0x01
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3c 83       	std	Y+4, r19	; 0x04
    1380:	2b 83       	std	Y+3, r18	; 0x03
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	91 05       	cpc	r25, r1
    138a:	31 f0       	breq	.+12     	; 0x1398 <EXTI_EXTIErrStateInit+0x2ac>
    138c:	2b 81       	ldd	r18, Y+3	; 0x03
    138e:	3c 81       	ldd	r19, Y+4	; 0x04
    1390:	23 30       	cpi	r18, 0x03	; 3
    1392:	31 05       	cpc	r19, r1
    1394:	49 f0       	breq	.+18     	; 0x13a8 <EXTI_EXTIErrStateInit+0x2bc>
    1396:	10 c0       	rjmp	.+32     	; 0x13b8 <EXTI_EXTIErrStateInit+0x2cc>
		{
		case EXTI_Falling:
				Clr_Bit(EXTI_MCUCSR ,EXTI_ISC2 );
    1398:	a4 e5       	ldi	r26, 0x54	; 84
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e4 e5       	ldi	r30, 0x54	; 84
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	8f 7b       	andi	r24, 0xBF	; 191
    13a4:	8c 93       	st	X, r24
    13a6:	0b c0       	rjmp	.+22     	; 0x13be <EXTI_EXTIErrStateInit+0x2d2>
				break ;
		case EXTI_Rising :
				Set_Bit(EXTI_MCUCSR ,EXTI_ISC2 );
    13a8:	a4 e5       	ldi	r26, 0x54	; 84
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e4 e5       	ldi	r30, 0x54	; 84
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	80 64       	ori	r24, 0x40	; 64
    13b4:	8c 93       	st	X, r24
    13b6:	03 c0       	rjmp	.+6      	; 0x13be <EXTI_EXTIErrStateInit+0x2d2>
				break ;
		default : return EXTI_IntSensErr ;
    13b8:	31 e0       	ldi	r19, 0x01	; 1
    13ba:	3f 83       	std	Y+7, r19	; 0x07
    13bc:	27 c0       	rjmp	.+78     	; 0x140c <EXTI_EXTIErrStateInit+0x320>
		}
		if (INT->Handler == EXTI_Polling)
    13be:	e9 81       	ldd	r30, Y+1	; 0x01
    13c0:	fa 81       	ldd	r31, Y+2	; 0x02
    13c2:	82 81       	ldd	r24, Z+2	; 0x02
    13c4:	88 23       	and	r24, r24
    13c6:	41 f4       	brne	.+16     	; 0x13d8 <EXTI_EXTIErrStateInit+0x2ec>
		{
			Clr_Bit(EXTI_GICR,EXTIInterrupt_INT2);
    13c8:	ab e5       	ldi	r26, 0x5B	; 91
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	eb e5       	ldi	r30, 0x5B	; 91
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8f 7d       	andi	r24, 0xDF	; 223
    13d4:	8c 93       	st	X, r24
    13d6:	19 c0       	rjmp	.+50     	; 0x140a <EXTI_EXTIErrStateInit+0x31e>
		}
		else if(INT->Handler == EXTI_Interrupt)
    13d8:	e9 81       	ldd	r30, Y+1	; 0x01
    13da:	fa 81       	ldd	r31, Y+2	; 0x02
    13dc:	82 81       	ldd	r24, Z+2	; 0x02
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	79 f4       	brne	.+30     	; 0x1400 <EXTI_EXTIErrStateInit+0x314>
		{
			Set_Bit(EXTI_GICR,EXTIInterrupt_INT2);
    13e2:	ab e5       	ldi	r26, 0x5B	; 91
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	eb e5       	ldi	r30, 0x5B	; 91
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	80 62       	ori	r24, 0x20	; 32
    13ee:	8c 93       	st	X, r24
			Set_Bit(EXTI_SREG,Pin7);
    13f0:	af e5       	ldi	r26, 0x5F	; 95
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ef e5       	ldi	r30, 0x5F	; 95
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 68       	ori	r24, 0x80	; 128
    13fc:	8c 93       	st	X, r24
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <EXTI_EXTIErrStateInit+0x31e>
		}
		else
		{
			return EXTI_HandlerErr;
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	8f 83       	std	Y+7, r24	; 0x07
    1404:	03 c0       	rjmp	.+6      	; 0x140c <EXTI_EXTIErrStateInit+0x320>
		}
	}
	else
	{
		return EXTI_TypeErr ;
    1406:	1f 82       	std	Y+7, r1	; 0x07
    1408:	01 c0       	rjmp	.+2      	; 0x140c <EXTI_EXTIErrStateInit+0x320>
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <EXTI_EXTIErrStateInit+0x324>
	}


}
    140c:	9f 81       	ldd	r25, Y+7	; 0x07
    140e:	9a 87       	std	Y+10, r25	; 0x0a
    1410:	8a 85       	ldd	r24, Y+10	; 0x0a
    1412:	2a 96       	adiw	r28, 0x0a	; 10
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <EXTI_FlagStatePollingHandler>:


FlagState EXTI_FlagStatePollingHandler(EXTI_Info * INT)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <EXTI_FlagStatePollingHandler+0x6>
    142a:	0f 92       	push	r0
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
	if (INT->Type == EXTI_INT0)
    1434:	e9 81       	ldd	r30, Y+1	; 0x01
    1436:	fa 81       	ldd	r31, Y+2	; 0x02
    1438:	80 81       	ld	r24, Z
    143a:	88 23       	and	r24, r24
    143c:	79 f4       	brne	.+30     	; 0x145c <EXTI_FlagStatePollingHandler+0x38>
	{
		while(Get_Bit(EXTI_GIFR,EXTI_INTF0)==0);
    143e:	ea e5       	ldi	r30, 0x5A	; 90
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	82 95       	swap	r24
    1446:	86 95       	lsr	r24
    1448:	86 95       	lsr	r24
    144a:	83 70       	andi	r24, 0x03	; 3
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	81 70       	andi	r24, 0x01	; 1
    1452:	90 70       	andi	r25, 0x00	; 0
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	99 f3       	breq	.-26     	; 0x143e <EXTI_FlagStatePollingHandler+0x1a>
		return Flag_On ;
    1458:	1b 82       	std	Y+3, r1	; 0x03
    145a:	21 c0       	rjmp	.+66     	; 0x149e <EXTI_FlagStatePollingHandler+0x7a>
	}
	else if (INT->Type == EXTI_INT1)
    145c:	e9 81       	ldd	r30, Y+1	; 0x01
    145e:	fa 81       	ldd	r31, Y+2	; 0x02
    1460:	80 81       	ld	r24, Z
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	39 f4       	brne	.+14     	; 0x1474 <EXTI_FlagStatePollingHandler+0x50>
	{
		while(Get_Bit(EXTI_GIFR,EXTI_INTF1)==0);
    1466:	ea e5       	ldi	r30, 0x5A	; 90
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	88 23       	and	r24, r24
    146e:	dc f7       	brge	.-10     	; 0x1466 <EXTI_FlagStatePollingHandler+0x42>
			return Flag_On ;
    1470:	1b 82       	std	Y+3, r1	; 0x03
    1472:	15 c0       	rjmp	.+42     	; 0x149e <EXTI_FlagStatePollingHandler+0x7a>
	}
	else if (INT->Type == EXTI_INT2)
    1474:	e9 81       	ldd	r30, Y+1	; 0x01
    1476:	fa 81       	ldd	r31, Y+2	; 0x02
    1478:	80 81       	ld	r24, Z
    147a:	82 30       	cpi	r24, 0x02	; 2
    147c:	71 f4       	brne	.+28     	; 0x149a <EXTI_FlagStatePollingHandler+0x76>
	{
		while(Get_Bit(EXTI_GIFR,EXTI_INTF2)==0);
    147e:	ea e5       	ldi	r30, 0x5A	; 90
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	82 95       	swap	r24
    1486:	86 95       	lsr	r24
    1488:	87 70       	andi	r24, 0x07	; 7
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	81 70       	andi	r24, 0x01	; 1
    1490:	90 70       	andi	r25, 0x00	; 0
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	a1 f3       	breq	.-24     	; 0x147e <EXTI_FlagStatePollingHandler+0x5a>
			return Flag_On ;
    1496:	1b 82       	std	Y+3, r1	; 0x03
    1498:	02 c0       	rjmp	.+4      	; 0x149e <EXTI_FlagStatePollingHandler+0x7a>
	}
	else
	{
		return Flag_Err ;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	8b 83       	std	Y+3, r24	; 0x03
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <__vector_1>:
void __vector_1(void)
{
    14ac:	1f 92       	push	r1
    14ae:	0f 92       	push	r0
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	0f 92       	push	r0
    14b4:	11 24       	eor	r1, r1
    14b6:	2f 93       	push	r18
    14b8:	3f 93       	push	r19
    14ba:	4f 93       	push	r20
    14bc:	5f 93       	push	r21
    14be:	6f 93       	push	r22
    14c0:	7f 93       	push	r23
    14c2:	8f 93       	push	r24
    14c4:	9f 93       	push	r25
    14c6:	af 93       	push	r26
    14c8:	bf 93       	push	r27
    14ca:	ef 93       	push	r30
    14cc:	ff 93       	push	r31
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
	if(ptr_fn!=NULL)
    14d6:	80 91 8c 00 	lds	r24, 0x008C
    14da:	90 91 8d 00 	lds	r25, 0x008D
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	29 f0       	breq	.+10     	; 0x14ec <__vector_1+0x40>
    ptr_fn();
    14e2:	e0 91 8c 00 	lds	r30, 0x008C
    14e6:	f0 91 8d 00 	lds	r31, 0x008D
    14ea:	09 95       	icall
}
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	ff 91       	pop	r31
    14f2:	ef 91       	pop	r30
    14f4:	bf 91       	pop	r27
    14f6:	af 91       	pop	r26
    14f8:	9f 91       	pop	r25
    14fa:	8f 91       	pop	r24
    14fc:	7f 91       	pop	r23
    14fe:	6f 91       	pop	r22
    1500:	5f 91       	pop	r21
    1502:	4f 91       	pop	r20
    1504:	3f 91       	pop	r19
    1506:	2f 91       	pop	r18
    1508:	0f 90       	pop	r0
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	0f 90       	pop	r0
    150e:	1f 90       	pop	r1
    1510:	18 95       	reti

00001512 <setcallback>:
void setcallback(void(*ptr)(void))
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <setcallback+0x6>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
	ptr_fn = ptr;
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	90 93 8d 00 	sts	0x008D, r25
    1528:	80 93 8c 00 	sts	0x008C, r24
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <DIO_ErrStateSetPinDirection>:
#include "DIO_Interface.h"
#include "../../Comman/Bit_Math.h"
#include "../../Comman/definition.h"

ErrState  DIO_ErrStateSetPinDirection(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_DirectionState Copy_DirectionState)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	28 97       	sbiw	r28, 0x08	; 8
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	6a 83       	std	Y+2, r22	; 0x02
    154e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	88 30       	cpi	r24, 0x08	; 8
    1554:	08 f0       	brcs	.+2      	; 0x1558 <DIO_ErrStateSetPinDirection+0x22>
    1556:	f6 c0       	rjmp	.+492    	; 0x1744 <DIO_ErrStateSetPinDirection+0x20e>
	{
		/*Input-> write Zero DDR (CLR) */
		if (Copy_DirectionState == DIO_Input )
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	88 23       	and	r24, r24
    155c:	09 f0       	breq	.+2      	; 0x1560 <DIO_ErrStateSetPinDirection+0x2a>
    155e:	77 c0       	rjmp	.+238    	; 0x164e <DIO_ErrStateSetPinDirection+0x118>
		{
			switch(Copy_GroupNumber){
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	38 87       	std	Y+8, r19	; 0x08
    1568:	2f 83       	std	Y+7, r18	; 0x07
    156a:	8f 81       	ldd	r24, Y+7	; 0x07
    156c:	98 85       	ldd	r25, Y+8	; 0x08
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	91 05       	cpc	r25, r1
    1572:	59 f1       	breq	.+86     	; 0x15ca <DIO_ErrStateSetPinDirection+0x94>
    1574:	2f 81       	ldd	r18, Y+7	; 0x07
    1576:	38 85       	ldd	r19, Y+8	; 0x08
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	2c f4       	brge	.+10     	; 0x1588 <DIO_ErrStateSetPinDirection+0x52>
    157e:	8f 81       	ldd	r24, Y+7	; 0x07
    1580:	98 85       	ldd	r25, Y+8	; 0x08
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	69 f0       	breq	.+26     	; 0x15a0 <DIO_ErrStateSetPinDirection+0x6a>
    1586:	60 c0       	rjmp	.+192    	; 0x1648 <DIO_ErrStateSetPinDirection+0x112>
    1588:	2f 81       	ldd	r18, Y+7	; 0x07
    158a:	38 85       	ldd	r19, Y+8	; 0x08
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	89 f1       	breq	.+98     	; 0x15f4 <DIO_ErrStateSetPinDirection+0xbe>
    1592:	8f 81       	ldd	r24, Y+7	; 0x07
    1594:	98 85       	ldd	r25, Y+8	; 0x08
    1596:	83 30       	cpi	r24, 0x03	; 3
    1598:	91 05       	cpc	r25, r1
    159a:	09 f4       	brne	.+2      	; 0x159e <DIO_ErrStateSetPinDirection+0x68>
    159c:	40 c0       	rjmp	.+128    	; 0x161e <DIO_ErrStateSetPinDirection+0xe8>
    159e:	54 c0       	rjmp	.+168    	; 0x1648 <DIO_ErrStateSetPinDirection+0x112>
			/*Group A*/
			case DIO_GroupA : Clr_Bit(DDRA_ITI , Copy_PinNumber ) ;break ;
    15a0:	aa e3       	ldi	r26, 0x3A	; 58
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	ea e3       	ldi	r30, 0x3A	; 58
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_ErrStateSetPinDirection+0x88>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_ErrStateSetPinDirection+0x84>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	bb c0       	rjmp	.+374    	; 0x1740 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group B*/
			case DIO_GroupB: Clr_Bit(DDRB_ITI , Copy_PinNumber ) ;break ;
    15ca:	a7 e3       	ldi	r26, 0x37	; 55
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e7 e3       	ldi	r30, 0x37	; 55
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_ErrStateSetPinDirection+0xb2>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_ErrStateSetPinDirection+0xae>
    15ec:	80 95       	com	r24
    15ee:	84 23       	and	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	a6 c0       	rjmp	.+332    	; 0x1740 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group C*/
			case DIO_GroupC : Clr_Bit(DDRC_ITI , Copy_PinNumber ) ;break ;
    15f4:	a4 e3       	ldi	r26, 0x34	; 52
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e4 e3       	ldi	r30, 0x34	; 52
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_ErrStateSetPinDirection+0xdc>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_ErrStateSetPinDirection+0xd8>
    1616:	80 95       	com	r24
    1618:	84 23       	and	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	91 c0       	rjmp	.+290    	; 0x1740 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group D*/
			case DIO_GroupD : Clr_Bit(DDRD_ITI , Copy_PinNumber ) ;break ;
    161e:	a1 e3       	ldi	r26, 0x31	; 49
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e1 e3       	ldi	r30, 0x31	; 49
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_ErrStateSetPinDirection+0x106>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_ErrStateSetPinDirection+0x102>
    1640:	80 95       	com	r24
    1642:	84 23       	and	r24, r20
    1644:	8c 93       	st	X, r24
    1646:	7c c0       	rjmp	.+248    	; 0x1740 <DIO_ErrStateSetPinDirection+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    1648:	91 e0       	ldi	r25, 0x01	; 1
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	7d c0       	rjmp	.+250    	; 0x1748 <DIO_ErrStateSetPinDirection+0x212>
			}
		}

		/*Output -> write DDR = one */
		else if (Copy_DirectionState == DIO_Output )
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	09 f0       	breq	.+2      	; 0x1656 <DIO_ErrStateSetPinDirection+0x120>
    1654:	72 c0       	rjmp	.+228    	; 0x173a <DIO_ErrStateSetPinDirection+0x204>
		{
			switch(Copy_GroupNumber){
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	3d 83       	std	Y+5, r19	; 0x05
    165e:	2c 83       	std	Y+4, r18	; 0x04
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	9d 81       	ldd	r25, Y+5	; 0x05
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 05       	cpc	r25, r1
    1668:	49 f1       	breq	.+82     	; 0x16bc <DIO_ErrStateSetPinDirection+0x186>
    166a:	2c 81       	ldd	r18, Y+4	; 0x04
    166c:	3d 81       	ldd	r19, Y+5	; 0x05
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	2c f4       	brge	.+10     	; 0x167e <DIO_ErrStateSetPinDirection+0x148>
    1674:	8c 81       	ldd	r24, Y+4	; 0x04
    1676:	9d 81       	ldd	r25, Y+5	; 0x05
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	61 f0       	breq	.+24     	; 0x1694 <DIO_ErrStateSetPinDirection+0x15e>
    167c:	5b c0       	rjmp	.+182    	; 0x1734 <DIO_ErrStateSetPinDirection+0x1fe>
    167e:	2c 81       	ldd	r18, Y+4	; 0x04
    1680:	3d 81       	ldd	r19, Y+5	; 0x05
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	71 f1       	breq	.+92     	; 0x16e4 <DIO_ErrStateSetPinDirection+0x1ae>
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	9d 81       	ldd	r25, Y+5	; 0x05
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	91 05       	cpc	r25, r1
    1690:	e9 f1       	breq	.+122    	; 0x170c <DIO_ErrStateSetPinDirection+0x1d6>
    1692:	50 c0       	rjmp	.+160    	; 0x1734 <DIO_ErrStateSetPinDirection+0x1fe>
			/*Group A*/
			case DIO_GroupA : Set_Bit(DDRA_ITI,Copy_PinNumber);break;
    1694:	aa e3       	ldi	r26, 0x3A	; 58
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ea e3       	ldi	r30, 0x3A	; 58
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_ErrStateSetPinDirection+0x17c>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_ErrStateSetPinDirection+0x178>
    16b6:	84 2b       	or	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	42 c0       	rjmp	.+132    	; 0x1740 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group B*/
			case DIO_GroupB : Set_Bit(DDRB_ITI,Copy_PinNumber);break;
    16bc:	a7 e3       	ldi	r26, 0x37	; 55
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e7 e3       	ldi	r30, 0x37	; 55
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_ErrStateSetPinDirection+0x1a4>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_ErrStateSetPinDirection+0x1a0>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	2e c0       	rjmp	.+92     	; 0x1740 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group C*/
			case DIO_GroupC : Set_Bit(DDRC_ITI,Copy_PinNumber);break;
    16e4:	a4 e3       	ldi	r26, 0x34	; 52
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e4 e3       	ldi	r30, 0x34	; 52
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_ErrStateSetPinDirection+0x1cc>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_ErrStateSetPinDirection+0x1c8>
    1706:	84 2b       	or	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	1a c0       	rjmp	.+52     	; 0x1740 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group D*/
			case DIO_GroupD : Set_Bit(DDRD_ITI,Copy_PinNumber);break;
    170c:	a1 e3       	ldi	r26, 0x31	; 49
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e1 e3       	ldi	r30, 0x31	; 49
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_ErrStateSetPinDirection+0x1f4>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_ErrStateSetPinDirection+0x1f0>
    172e:	84 2b       	or	r24, r20
    1730:	8c 93       	st	X, r24
    1732:	06 c0       	rjmp	.+12     	; 0x1740 <DIO_ErrStateSetPinDirection+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	07 c0       	rjmp	.+14     	; 0x1748 <DIO_ErrStateSetPinDirection+0x212>
			}
		}

		else
		{
			return DirectionError ;
    173a:	23 e0       	ldi	r18, 0x03	; 3
    173c:	2e 83       	std	Y+6, r18	; 0x06
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <DIO_ErrStateSetPinDirection+0x212>
		}

		return NoError ;
    1740:	1e 82       	std	Y+6, r1	; 0x06
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_ErrStateSetPinDirection+0x212>
	}
	else
	{
		return PinNumberError ;
    1744:	32 e0       	ldi	r19, 0x02	; 2
    1746:	3e 83       	std	Y+6, r19	; 0x06
    1748:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
    174a:	28 96       	adiw	r28, 0x08	; 8
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <DIO_ErrStateSetPinValue>:

ErrState  DIO_ErrStateSetPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_ValueState Copy_ValueState)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	28 97       	sbiw	r28, 0x08	; 8
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	6a 83       	std	Y+2, r22	; 0x02
    1774:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	88 30       	cpi	r24, 0x08	; 8
    177a:	08 f0       	brcs	.+2      	; 0x177e <DIO_ErrStateSetPinValue+0x22>
    177c:	f6 c0       	rjmp	.+492    	; 0x196a <DIO_ErrStateSetPinValue+0x20e>
	{
		/*Low-> write Zero Port (CLR) */
		if (Copy_ValueState == DIO_Low )
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	88 23       	and	r24, r24
    1782:	09 f0       	breq	.+2      	; 0x1786 <DIO_ErrStateSetPinValue+0x2a>
    1784:	77 c0       	rjmp	.+238    	; 0x1874 <DIO_ErrStateSetPinValue+0x118>
		{
			switch(Copy_GroupNumber){
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	38 87       	std	Y+8, r19	; 0x08
    178e:	2f 83       	std	Y+7, r18	; 0x07
    1790:	8f 81       	ldd	r24, Y+7	; 0x07
    1792:	98 85       	ldd	r25, Y+8	; 0x08
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	91 05       	cpc	r25, r1
    1798:	59 f1       	breq	.+86     	; 0x17f0 <DIO_ErrStateSetPinValue+0x94>
    179a:	2f 81       	ldd	r18, Y+7	; 0x07
    179c:	38 85       	ldd	r19, Y+8	; 0x08
    179e:	22 30       	cpi	r18, 0x02	; 2
    17a0:	31 05       	cpc	r19, r1
    17a2:	2c f4       	brge	.+10     	; 0x17ae <DIO_ErrStateSetPinValue+0x52>
    17a4:	8f 81       	ldd	r24, Y+7	; 0x07
    17a6:	98 85       	ldd	r25, Y+8	; 0x08
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	69 f0       	breq	.+26     	; 0x17c6 <DIO_ErrStateSetPinValue+0x6a>
    17ac:	60 c0       	rjmp	.+192    	; 0x186e <DIO_ErrStateSetPinValue+0x112>
    17ae:	2f 81       	ldd	r18, Y+7	; 0x07
    17b0:	38 85       	ldd	r19, Y+8	; 0x08
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	89 f1       	breq	.+98     	; 0x181a <DIO_ErrStateSetPinValue+0xbe>
    17b8:	8f 81       	ldd	r24, Y+7	; 0x07
    17ba:	98 85       	ldd	r25, Y+8	; 0x08
    17bc:	83 30       	cpi	r24, 0x03	; 3
    17be:	91 05       	cpc	r25, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <DIO_ErrStateSetPinValue+0x68>
    17c2:	40 c0       	rjmp	.+128    	; 0x1844 <DIO_ErrStateSetPinValue+0xe8>
    17c4:	54 c0       	rjmp	.+168    	; 0x186e <DIO_ErrStateSetPinValue+0x112>
			/*Group A*/
			case DIO_GroupA : Clr_Bit(PORTA_ITI , Copy_PinNumber ) ;break ;
    17c6:	ab e3       	ldi	r26, 0x3B	; 59
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	eb e3       	ldi	r30, 0x3B	; 59
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <DIO_ErrStateSetPinValue+0x88>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <DIO_ErrStateSetPinValue+0x84>
    17e8:	80 95       	com	r24
    17ea:	84 23       	and	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	bb c0       	rjmp	.+374    	; 0x1966 <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB: Clr_Bit(PORTB_ITI , Copy_PinNumber ) ;break ;
    17f0:	a8 e3       	ldi	r26, 0x38	; 56
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e8 e3       	ldi	r30, 0x38	; 56
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DIO_ErrStateSetPinValue+0xb2>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <DIO_ErrStateSetPinValue+0xae>
    1812:	80 95       	com	r24
    1814:	84 23       	and	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	a6 c0       	rjmp	.+332    	; 0x1966 <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : Clr_Bit(PORTC_ITI , Copy_PinNumber ) ;break ;
    181a:	a5 e3       	ldi	r26, 0x35	; 53
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e5 e3       	ldi	r30, 0x35	; 53
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	48 2f       	mov	r20, r24
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 2e       	mov	r0, r18
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <DIO_ErrStateSetPinValue+0xdc>
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	0a 94       	dec	r0
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <DIO_ErrStateSetPinValue+0xd8>
    183c:	80 95       	com	r24
    183e:	84 23       	and	r24, r20
    1840:	8c 93       	st	X, r24
    1842:	91 c0       	rjmp	.+290    	; 0x1966 <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : Clr_Bit(PORTD_ITI , Copy_PinNumber ) ;break ;
    1844:	a2 e3       	ldi	r26, 0x32	; 50
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e2 e3       	ldi	r30, 0x32	; 50
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 2e       	mov	r0, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <DIO_ErrStateSetPinValue+0x106>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <DIO_ErrStateSetPinValue+0x102>
    1866:	80 95       	com	r24
    1868:	84 23       	and	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	7c c0       	rjmp	.+248    	; 0x1966 <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    186e:	91 e0       	ldi	r25, 0x01	; 1
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	7d c0       	rjmp	.+250    	; 0x196e <DIO_ErrStateSetPinValue+0x212>
			}
		}

		/*High -> write port = one */
		else if (Copy_ValueState == DIO_High )
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	09 f0       	breq	.+2      	; 0x187c <DIO_ErrStateSetPinValue+0x120>
    187a:	72 c0       	rjmp	.+228    	; 0x1960 <DIO_ErrStateSetPinValue+0x204>
		{
			switch(Copy_GroupNumber){
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	3d 83       	std	Y+5, r19	; 0x05
    1884:	2c 83       	std	Y+4, r18	; 0x04
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	9d 81       	ldd	r25, Y+5	; 0x05
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	91 05       	cpc	r25, r1
    188e:	49 f1       	breq	.+82     	; 0x18e2 <DIO_ErrStateSetPinValue+0x186>
    1890:	2c 81       	ldd	r18, Y+4	; 0x04
    1892:	3d 81       	ldd	r19, Y+5	; 0x05
    1894:	22 30       	cpi	r18, 0x02	; 2
    1896:	31 05       	cpc	r19, r1
    1898:	2c f4       	brge	.+10     	; 0x18a4 <DIO_ErrStateSetPinValue+0x148>
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	9d 81       	ldd	r25, Y+5	; 0x05
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	61 f0       	breq	.+24     	; 0x18ba <DIO_ErrStateSetPinValue+0x15e>
    18a2:	5b c0       	rjmp	.+182    	; 0x195a <DIO_ErrStateSetPinValue+0x1fe>
    18a4:	2c 81       	ldd	r18, Y+4	; 0x04
    18a6:	3d 81       	ldd	r19, Y+5	; 0x05
    18a8:	22 30       	cpi	r18, 0x02	; 2
    18aa:	31 05       	cpc	r19, r1
    18ac:	71 f1       	breq	.+92     	; 0x190a <DIO_ErrStateSetPinValue+0x1ae>
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	9d 81       	ldd	r25, Y+5	; 0x05
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	91 05       	cpc	r25, r1
    18b6:	e9 f1       	breq	.+122    	; 0x1932 <DIO_ErrStateSetPinValue+0x1d6>
    18b8:	50 c0       	rjmp	.+160    	; 0x195a <DIO_ErrStateSetPinValue+0x1fe>
			/*Group A*/
			case DIO_GroupA : Set_Bit(PORTA_ITI,Copy_PinNumber);break;
    18ba:	ab e3       	ldi	r26, 0x3B	; 59
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	eb e3       	ldi	r30, 0x3B	; 59
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	02 2e       	mov	r0, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <DIO_ErrStateSetPinValue+0x17c>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <DIO_ErrStateSetPinValue+0x178>
    18dc:	84 2b       	or	r24, r20
    18de:	8c 93       	st	X, r24
    18e0:	42 c0       	rjmp	.+132    	; 0x1966 <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB : Set_Bit(PORTB_ITI,Copy_PinNumber);break;
    18e2:	a8 e3       	ldi	r26, 0x38	; 56
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e8 e3       	ldi	r30, 0x38	; 56
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <DIO_ErrStateSetPinValue+0x1a4>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <DIO_ErrStateSetPinValue+0x1a0>
    1904:	84 2b       	or	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	2e c0       	rjmp	.+92     	; 0x1966 <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : Set_Bit(PORTC_ITI,Copy_PinNumber);break;
    190a:	a5 e3       	ldi	r26, 0x35	; 53
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e5 e3       	ldi	r30, 0x35	; 53
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <DIO_ErrStateSetPinValue+0x1cc>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <DIO_ErrStateSetPinValue+0x1c8>
    192c:	84 2b       	or	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	1a c0       	rjmp	.+52     	; 0x1966 <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : Set_Bit(PORTD_ITI,Copy_PinNumber);break;
    1932:	a2 e3       	ldi	r26, 0x32	; 50
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e2 e3       	ldi	r30, 0x32	; 50
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <DIO_ErrStateSetPinValue+0x1f4>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <DIO_ErrStateSetPinValue+0x1f0>
    1954:	84 2b       	or	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	06 c0       	rjmp	.+12     	; 0x1966 <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    195a:	91 e0       	ldi	r25, 0x01	; 1
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	07 c0       	rjmp	.+14     	; 0x196e <DIO_ErrStateSetPinValue+0x212>
			}
		}

		else
		{
			return DirectionError ;
    1960:	23 e0       	ldi	r18, 0x03	; 3
    1962:	2e 83       	std	Y+6, r18	; 0x06
    1964:	04 c0       	rjmp	.+8      	; 0x196e <DIO_ErrStateSetPinValue+0x212>
		}

		return NoError ;
    1966:	1e 82       	std	Y+6, r1	; 0x06
    1968:	02 c0       	rjmp	.+4      	; 0x196e <DIO_ErrStateSetPinValue+0x212>
	}
	else
	{
		return PinNumberError ;
    196a:	32 e0       	ldi	r19, 0x02	; 2
    196c:	3e 83       	std	Y+6, r19	; 0x06
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
	}

}
    1970:	28 96       	adiw	r28, 0x08	; 8
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <DIO_ErrStateReadPinValue>:

ErrState  DIO_ErrStateReadPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber ,u8 *Result)/*Mostafa Anwer*/
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	27 97       	sbiw	r28, 0x07	; 7
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	6a 83       	std	Y+2, r22	; 0x02
    199a:	5c 83       	std	Y+4, r21	; 0x04
    199c:	4b 83       	std	Y+3, r20	; 0x03
	/*check on pin range from 0 to 7 */
	if (Copy_PinNumber>= Pin0 && Copy_PinNumber <=Pin7)
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	88 30       	cpi	r24, 0x08	; 8
    19a2:	08 f0       	brcs	.+2      	; 0x19a6 <DIO_ErrStateReadPinValue+0x24>
    19a4:	76 c0       	rjmp	.+236    	; 0x1a92 <DIO_ErrStateReadPinValue+0x110>
	{
		switch(Copy_GroupNumber)
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	3f 83       	std	Y+7, r19	; 0x07
    19ae:	2e 83       	std	Y+6, r18	; 0x06
    19b0:	4e 81       	ldd	r20, Y+6	; 0x06
    19b2:	5f 81       	ldd	r21, Y+7	; 0x07
    19b4:	41 30       	cpi	r20, 0x01	; 1
    19b6:	51 05       	cpc	r21, r1
    19b8:	59 f1       	breq	.+86     	; 0x1a10 <DIO_ErrStateReadPinValue+0x8e>
    19ba:	8e 81       	ldd	r24, Y+6	; 0x06
    19bc:	9f 81       	ldd	r25, Y+7	; 0x07
    19be:	82 30       	cpi	r24, 0x02	; 2
    19c0:	91 05       	cpc	r25, r1
    19c2:	34 f4       	brge	.+12     	; 0x19d0 <DIO_ErrStateReadPinValue+0x4e>
    19c4:	2e 81       	ldd	r18, Y+6	; 0x06
    19c6:	3f 81       	ldd	r19, Y+7	; 0x07
    19c8:	21 15       	cp	r18, r1
    19ca:	31 05       	cpc	r19, r1
    19cc:	69 f0       	breq	.+26     	; 0x19e8 <DIO_ErrStateReadPinValue+0x66>
    19ce:	5c c0       	rjmp	.+184    	; 0x1a88 <DIO_ErrStateReadPinValue+0x106>
    19d0:	4e 81       	ldd	r20, Y+6	; 0x06
    19d2:	5f 81       	ldd	r21, Y+7	; 0x07
    19d4:	42 30       	cpi	r20, 0x02	; 2
    19d6:	51 05       	cpc	r21, r1
    19d8:	79 f1       	breq	.+94     	; 0x1a38 <DIO_ErrStateReadPinValue+0xb6>
    19da:	8e 81       	ldd	r24, Y+6	; 0x06
    19dc:	9f 81       	ldd	r25, Y+7	; 0x07
    19de:	83 30       	cpi	r24, 0x03	; 3
    19e0:	91 05       	cpc	r25, r1
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <DIO_ErrStateReadPinValue+0x64>
    19e4:	3d c0       	rjmp	.+122    	; 0x1a60 <DIO_ErrStateReadPinValue+0xde>
    19e6:	50 c0       	rjmp	.+160    	; 0x1a88 <DIO_ErrStateReadPinValue+0x106>
		{
		case DIO_GroupA: *Result=Get_Bit(PINA_ITI,Copy_PinNumber); break ;
    19e8:	e9 e3       	ldi	r30, 0x39	; 57
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	a9 01       	movw	r20, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <DIO_ErrStateReadPinValue+0x7e>
    19fc:	55 95       	asr	r21
    19fe:	47 95       	ror	r20
    1a00:	8a 95       	dec	r24
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <DIO_ErrStateReadPinValue+0x7a>
    1a04:	ca 01       	movw	r24, r20
    1a06:	81 70       	andi	r24, 0x01	; 1
    1a08:	eb 81       	ldd	r30, Y+3	; 0x03
    1a0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a0c:	80 83       	st	Z, r24
    1a0e:	3f c0       	rjmp	.+126    	; 0x1a8e <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupB: *Result=Get_Bit(PINB_ITI,Copy_PinNumber); break ;
    1a10:	e6 e3       	ldi	r30, 0x36	; 54
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a9 01       	movw	r20, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <DIO_ErrStateReadPinValue+0xa6>
    1a24:	55 95       	asr	r21
    1a26:	47 95       	ror	r20
    1a28:	8a 95       	dec	r24
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <DIO_ErrStateReadPinValue+0xa2>
    1a2c:	ca 01       	movw	r24, r20
    1a2e:	81 70       	andi	r24, 0x01	; 1
    1a30:	eb 81       	ldd	r30, Y+3	; 0x03
    1a32:	fc 81       	ldd	r31, Y+4	; 0x04
    1a34:	80 83       	st	Z, r24
    1a36:	2b c0       	rjmp	.+86     	; 0x1a8e <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupC: *Result=Get_Bit(PINC_ITI,Copy_PinNumber); break ;
    1a38:	e3 e3       	ldi	r30, 0x33	; 51
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a9 01       	movw	r20, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <DIO_ErrStateReadPinValue+0xce>
    1a4c:	55 95       	asr	r21
    1a4e:	47 95       	ror	r20
    1a50:	8a 95       	dec	r24
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <DIO_ErrStateReadPinValue+0xca>
    1a54:	ca 01       	movw	r24, r20
    1a56:	81 70       	andi	r24, 0x01	; 1
    1a58:	eb 81       	ldd	r30, Y+3	; 0x03
    1a5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a5c:	80 83       	st	Z, r24
    1a5e:	17 c0       	rjmp	.+46     	; 0x1a8e <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupD: *Result=Get_Bit(PIND_ITI,Copy_PinNumber); break ;
    1a60:	e0 e3       	ldi	r30, 0x30	; 48
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	88 2f       	mov	r24, r24
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a9 01       	movw	r20, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <DIO_ErrStateReadPinValue+0xf6>
    1a74:	55 95       	asr	r21
    1a76:	47 95       	ror	r20
    1a78:	8a 95       	dec	r24
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <DIO_ErrStateReadPinValue+0xf2>
    1a7c:	ca 01       	movw	r24, r20
    1a7e:	81 70       	andi	r24, 0x01	; 1
    1a80:	eb 81       	ldd	r30, Y+3	; 0x03
    1a82:	fc 81       	ldd	r31, Y+4	; 0x04
    1a84:	80 83       	st	Z, r24
    1a86:	03 c0       	rjmp	.+6      	; 0x1a8e <DIO_ErrStateReadPinValue+0x10c>
		default:
			return GroupError ;
    1a88:	51 e0       	ldi	r21, 0x01	; 1
    1a8a:	5d 83       	std	Y+5, r21	; 0x05
    1a8c:	04 c0       	rjmp	.+8      	; 0x1a96 <DIO_ErrStateReadPinValue+0x114>
		}
		return NoError ;
    1a8e:	1d 82       	std	Y+5, r1	; 0x05
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <DIO_ErrStateReadPinValue+0x114>
	}
	else
	{
		return PinNumberError ;
    1a92:	82 e0       	ldi	r24, 0x02	; 2
    1a94:	8d 83       	std	Y+5, r24	; 0x05
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    1a98:	27 96       	adiw	r28, 0x07	; 7
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <DIO_ErrStateSetGroupDirection>:



//
ErrState  DIO_ErrStateSetGroupDirection(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_DirectionState)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <DIO_ErrStateSetGroupDirection+0x6>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <DIO_ErrStateSetGroupDirection+0x8>
    1ab2:	0f 92       	push	r0
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_DirectionState <= 0xff && Copy_DirectionState>=0x00)
	{
		switch(Copy_GroupNumber)
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	3d 83       	std	Y+5, r19	; 0x05
    1ac4:	2c 83       	std	Y+4, r18	; 0x04
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	91 05       	cpc	r25, r1
    1ace:	d1 f0       	breq	.+52     	; 0x1b04 <DIO_ErrStateSetGroupDirection+0x5a>
    1ad0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad4:	22 30       	cpi	r18, 0x02	; 2
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <DIO_ErrStateSetGroupDirection+0x3a>
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	61 f0       	breq	.+24     	; 0x1afa <DIO_ErrStateSetGroupDirection+0x50>
    1ae2:	1f c0       	rjmp	.+62     	; 0x1b22 <DIO_ErrStateSetGroupDirection+0x78>
    1ae4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	81 f0       	breq	.+32     	; 0x1b0e <DIO_ErrStateSetGroupDirection+0x64>
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	9d 81       	ldd	r25, Y+5	; 0x05
    1af2:	83 30       	cpi	r24, 0x03	; 3
    1af4:	91 05       	cpc	r25, r1
    1af6:	81 f0       	breq	.+32     	; 0x1b18 <DIO_ErrStateSetGroupDirection+0x6e>
    1af8:	14 c0       	rjmp	.+40     	; 0x1b22 <DIO_ErrStateSetGroupDirection+0x78>
		{
		case DIO_GroupA: DDRA_ITI =  Copy_DirectionState ;break ;
    1afa:	ea e3       	ldi	r30, 0x3A	; 58
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	80 83       	st	Z, r24
    1b02:	12 c0       	rjmp	.+36     	; 0x1b28 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupB: DDRB_ITI =  Copy_DirectionState ;break ;
    1b04:	e7 e3       	ldi	r30, 0x37	; 55
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	80 83       	st	Z, r24
    1b0c:	0d c0       	rjmp	.+26     	; 0x1b28 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupC: DDRC_ITI =  Copy_DirectionState ;break ;
    1b0e:	e4 e3       	ldi	r30, 0x34	; 52
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	80 83       	st	Z, r24
    1b16:	08 c0       	rjmp	.+16     	; 0x1b28 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupD: DDRD_ITI =  Copy_DirectionState ;break ;
    1b18:	e1 e3       	ldi	r30, 0x31	; 49
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	80 83       	st	Z, r24
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <DIO_ErrStateSetGroupDirection+0x7e>
		default :
			return GroupError ;
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	9b 83       	std	Y+3, r25	; 0x03
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <DIO_ErrStateSetGroupDirection+0x80>
		}
		return NoError ;
    1b28:	1b 82       	std	Y+3, r1	; 0x03
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DirectionRangError;
	}
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <DIO_ErrStateSetGroupValue>:
ErrState  DIO_ErrStateSetGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_ValueState)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <DIO_ErrStateSetGroupValue+0x6>
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <DIO_ErrStateSetGroupValue+0x8>
    1b44:	0f 92       	push	r0
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_ValueState <= 0xff && Copy_ValueState>=0x00)
	{
		switch(Copy_GroupNumber)
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	3d 83       	std	Y+5, r19	; 0x05
    1b56:	2c 83       	std	Y+4, r18	; 0x04
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5c:	81 30       	cpi	r24, 0x01	; 1
    1b5e:	91 05       	cpc	r25, r1
    1b60:	d1 f0       	breq	.+52     	; 0x1b96 <DIO_ErrStateSetGroupValue+0x5a>
    1b62:	2c 81       	ldd	r18, Y+4	; 0x04
    1b64:	3d 81       	ldd	r19, Y+5	; 0x05
    1b66:	22 30       	cpi	r18, 0x02	; 2
    1b68:	31 05       	cpc	r19, r1
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <DIO_ErrStateSetGroupValue+0x3a>
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	61 f0       	breq	.+24     	; 0x1b8c <DIO_ErrStateSetGroupValue+0x50>
    1b74:	1f c0       	rjmp	.+62     	; 0x1bb4 <DIO_ErrStateSetGroupValue+0x78>
    1b76:	2c 81       	ldd	r18, Y+4	; 0x04
    1b78:	3d 81       	ldd	r19, Y+5	; 0x05
    1b7a:	22 30       	cpi	r18, 0x02	; 2
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	81 f0       	breq	.+32     	; 0x1ba0 <DIO_ErrStateSetGroupValue+0x64>
    1b80:	8c 81       	ldd	r24, Y+4	; 0x04
    1b82:	9d 81       	ldd	r25, Y+5	; 0x05
    1b84:	83 30       	cpi	r24, 0x03	; 3
    1b86:	91 05       	cpc	r25, r1
    1b88:	81 f0       	breq	.+32     	; 0x1baa <DIO_ErrStateSetGroupValue+0x6e>
    1b8a:	14 c0       	rjmp	.+40     	; 0x1bb4 <DIO_ErrStateSetGroupValue+0x78>
		{
		case DIO_GroupA: PORTA_ITI =  Copy_ValueState ;break ;
    1b8c:	eb e3       	ldi	r30, 0x3B	; 59
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	80 83       	st	Z, r24
    1b94:	12 c0       	rjmp	.+36     	; 0x1bba <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupB: PORTB_ITI =  Copy_ValueState ;break ;
    1b96:	e8 e3       	ldi	r30, 0x38	; 56
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	80 83       	st	Z, r24
    1b9e:	0d c0       	rjmp	.+26     	; 0x1bba <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupC: PORTC_ITI =  Copy_ValueState ;break ;
    1ba0:	e5 e3       	ldi	r30, 0x35	; 53
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	80 83       	st	Z, r24
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupD: PORTD_ITI =  Copy_ValueState ;break ;
    1baa:	e2 e3       	ldi	r30, 0x32	; 50
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	80 83       	st	Z, r24
    1bb2:	03 c0       	rjmp	.+6      	; 0x1bba <DIO_ErrStateSetGroupValue+0x7e>
		default :
			return GroupError ;
    1bb4:	91 e0       	ldi	r25, 0x01	; 1
    1bb6:	9b 83       	std	Y+3, r25	; 0x03
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <DIO_ErrStateSetGroupValue+0x80>
		}
		return NoError ;
    1bba:	1b 82       	std	Y+3, r1	; 0x03
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return ValueRangError;
	}

}
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <DIO_ErrStateReadGroupValue>:
ErrState  DIO_ErrStateReadGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 *Result)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <DIO_ErrStateReadGroupValue+0x6>
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <DIO_ErrStateReadGroupValue+0x8>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <DIO_ErrStateReadGroupValue+0xa>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	7b 83       	std	Y+3, r23	; 0x03
    1be0:	6a 83       	std	Y+2, r22	; 0x02
	if(Result!=Null)
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	9b 81       	ldd	r25, Y+3	; 0x03
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	09 f4       	brne	.+2      	; 0x1bec <DIO_ErrStateReadGroupValue+0x1e>
    1bea:	40 c0       	rjmp	.+128    	; 0x1c6c <DIO_ErrStateReadGroupValue+0x9e>
	{
		switch(Copy_GroupNumber)
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	3e 83       	std	Y+6, r19	; 0x06
    1bf4:	2d 83       	std	Y+5, r18	; 0x05
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	e1 f0       	breq	.+56     	; 0x1c38 <DIO_ErrStateReadGroupValue+0x6a>
    1c00:	2d 81       	ldd	r18, Y+5	; 0x05
    1c02:	3e 81       	ldd	r19, Y+6	; 0x06
    1c04:	22 30       	cpi	r18, 0x02	; 2
    1c06:	31 05       	cpc	r19, r1
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <DIO_ErrStateReadGroupValue+0x46>
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	61 f0       	breq	.+24     	; 0x1c2a <DIO_ErrStateReadGroupValue+0x5c>
    1c12:	27 c0       	rjmp	.+78     	; 0x1c62 <DIO_ErrStateReadGroupValue+0x94>
    1c14:	2d 81       	ldd	r18, Y+5	; 0x05
    1c16:	3e 81       	ldd	r19, Y+6	; 0x06
    1c18:	22 30       	cpi	r18, 0x02	; 2
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	a1 f0       	breq	.+40     	; 0x1c46 <DIO_ErrStateReadGroupValue+0x78>
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	83 30       	cpi	r24, 0x03	; 3
    1c24:	91 05       	cpc	r25, r1
    1c26:	b1 f0       	breq	.+44     	; 0x1c54 <DIO_ErrStateReadGroupValue+0x86>
    1c28:	1c c0       	rjmp	.+56     	; 0x1c62 <DIO_ErrStateReadGroupValue+0x94>
		{
		case DIO_GroupA: *Result = PINA_ITI ; break ;
    1c2a:	e9 e3       	ldi	r30, 0x39	; 57
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	ea 81       	ldd	r30, Y+2	; 0x02
    1c32:	fb 81       	ldd	r31, Y+3	; 0x03
    1c34:	80 83       	st	Z, r24
    1c36:	18 c0       	rjmp	.+48     	; 0x1c68 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupB: *Result = PINB_ITI ; break ;
    1c38:	e6 e3       	ldi	r30, 0x36	; 54
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c40:	fb 81       	ldd	r31, Y+3	; 0x03
    1c42:	80 83       	st	Z, r24
    1c44:	11 c0       	rjmp	.+34     	; 0x1c68 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupC: *Result = PINC_ITI ; break ;
    1c46:	e3 e3       	ldi	r30, 0x33	; 51
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1c50:	80 83       	st	Z, r24
    1c52:	0a c0       	rjmp	.+20     	; 0x1c68 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupD: *Result = PIND_ITI ; break ;
    1c54:	e0 e3       	ldi	r30, 0x30	; 48
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c5e:	80 83       	st	Z, r24
    1c60:	03 c0       	rjmp	.+6      	; 0x1c68 <DIO_ErrStateReadGroupValue+0x9a>
		default :
			return GroupError ;
    1c62:	91 e0       	ldi	r25, 0x01	; 1
    1c64:	9c 83       	std	Y+4, r25	; 0x04
    1c66:	04 c0       	rjmp	.+8      	; 0x1c70 <DIO_ErrStateReadGroupValue+0xa2>
		}
		return NoError ;
    1c68:	1c 82       	std	Y+4, r1	; 0x04
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <DIO_ErrStateReadGroupValue+0xa2>
	}
	else
	{
		return AddressError;
    1c6c:	25 e0       	ldi	r18, 0x05	; 5
    1c6e:	2c 83       	std	Y+4, r18	; 0x04
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    1c72:	26 96       	adiw	r28, 0x06	; 6
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <adc_init>:
#include "../../Comman/definition.h"
#include "../../Comman/STD_types.h"
#include "ADC_reg.h"
#include "ADC_interface.h"
void adc_init()
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADMUX,6);
    1c8c:	a7 e2       	ldi	r26, 0x27	; 39
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e7 e2       	ldi	r30, 0x27	; 39
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	80 64       	ori	r24, 0x40	; 64
    1c98:	8c 93       	st	X, r24
	Clr_Bit(ADMUX,7);
    1c9a:	a7 e2       	ldi	r26, 0x27	; 39
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e7 e2       	ldi	r30, 0x27	; 39
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8f 77       	andi	r24, 0x7F	; 127
    1ca6:	8c 93       	st	X, r24
	Set_Bit(ADMUX,5);
    1ca8:	a7 e2       	ldi	r26, 0x27	; 39
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e7 e2       	ldi	r30, 0x27	; 39
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	80 62       	ori	r24, 0x20	; 32
    1cb4:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,7);
    1cb6:	a6 e2       	ldi	r26, 0x26	; 38
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e6 e2       	ldi	r30, 0x26	; 38
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	80 68       	ori	r24, 0x80	; 128
    1cc2:	8c 93       	st	X, r24
}
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <adc_readingchannel>:
u8 adc_readingchannel(u8 copy_channel)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <adc_readingchannel+0x6>
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	89 83       	std	Y+1, r24	; 0x01

}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <SW_SwitchErrStateGetState>:

#include "../../Comman/definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"

SwitchErrState  SW_SwitchErrStateGetState(Switch_Info * Switch ,SwitchState * Result)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <SW_SwitchErrStateGetState+0x6>
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <SW_SwitchErrStateGetState+0x8>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <SW_SwitchErrStateGetState+0xa>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	9b 83       	std	Y+3, r25	; 0x03
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
    1cf2:	7d 83       	std	Y+5, r23	; 0x05
    1cf4:	6c 83       	std	Y+4, r22	; 0x04
	 * if pullup:
	 * DDR=0 (INPUT)
	 * SWITCH PIN= 1 (HIGH)
	 * so it will only work when the SWITCH PIN gets 0 instead of 1 (pressed)
	 */
	if (Switch->ConnectionType == InternalPullUp )
    1cf6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cfa:	82 81       	ldd	r24, Z+2	; 0x02
    1cfc:	88 23       	and	r24, r24
    1cfe:	31 f5       	brne	.+76     	; 0x1d4c <SW_SwitchErrStateGetState+0x6c>
	    {

	    	//DDR=0
	    	DIO_ErrStateSetPinDirection(Switch->SW_Group ,Switch->SW_Pin, DIO_Input);
    1d00:	ea 81       	ldd	r30, Y+2	; 0x02
    1d02:	fb 81       	ldd	r31, Y+3	; 0x03
    1d04:	80 81       	ld	r24, Z
    1d06:	ea 81       	ldd	r30, Y+2	; 0x02
    1d08:	fb 81       	ldd	r31, Y+3	; 0x03
    1d0a:	91 81       	ldd	r25, Z+1	; 0x01
    1d0c:	69 2f       	mov	r22, r25
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_ErrStateSetPinDirection>
	    	//SWITCH PIN= 1 (HIGH)
	    	DIO_ErrStateSetPinValue(Switch->SW_Group ,Switch->SW_Pin, DIO_High);
    1d14:	ea 81       	ldd	r30, Y+2	; 0x02
    1d16:	fb 81       	ldd	r31, Y+3	; 0x03
    1d18:	80 81       	ld	r24, Z
    1d1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	69 2f       	mov	r22, r25
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
	    	DIO_ErrStateReadPinValue(Switch->SW_Group ,Switch->SW_Pin,&Result1);
    1d28:	ea 81       	ldd	r30, Y+2	; 0x02
    1d2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d2c:	80 81       	ld	r24, Z
    1d2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d30:	fb 81       	ldd	r31, Y+3	; 0x03
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	69 2f       	mov	r22, r25
    1d36:	9e 01       	movw	r18, r28
    1d38:	2f 5f       	subi	r18, 0xFF	; 255
    1d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3c:	a9 01       	movw	r20, r18
    1d3e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <DIO_ErrStateReadPinValue>
	    	*Result = Result1;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	ec 81       	ldd	r30, Y+4	; 0x04
    1d46:	fd 81       	ldd	r31, Y+5	; 0x05
    1d48:	80 83       	st	Z, r24
    1d4a:	3c c0       	rjmp	.+120    	; 0x1dc4 <SW_SwitchErrStateGetState+0xe4>

	    }
	else if (Switch->ConnectionType == ExternalPullUp)
    1d4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d50:	82 81       	ldd	r24, Z+2	; 0x02
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	91 f4       	brne	.+36     	; 0x1d7a <SW_SwitchErrStateGetState+0x9a>
	    {
	    	DIO_ErrStateReadPinValue(Switch->SW_Group ,Switch->SW_Pin,&Result1);
    1d56:	ea 81       	ldd	r30, Y+2	; 0x02
    1d58:	fb 81       	ldd	r31, Y+3	; 0x03
    1d5a:	80 81       	ld	r24, Z
    1d5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d60:	91 81       	ldd	r25, Z+1	; 0x01
    1d62:	69 2f       	mov	r22, r25
    1d64:	9e 01       	movw	r18, r28
    1d66:	2f 5f       	subi	r18, 0xFF	; 255
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	a9 01       	movw	r20, r18
    1d6c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <DIO_ErrStateReadPinValue>
	    	*Result = Result1;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	ec 81       	ldd	r30, Y+4	; 0x04
    1d74:	fd 81       	ldd	r31, Y+5	; 0x05
    1d76:	80 83       	st	Z, r24
    1d78:	25 c0       	rjmp	.+74     	; 0x1dc4 <SW_SwitchErrStateGetState+0xe4>

	    }
	else if (Switch->ConnectionType == ExternalPullDown )
    1d7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	82 30       	cpi	r24, 0x02	; 2
    1d82:	e1 f4       	brne	.+56     	; 0x1dbc <SW_SwitchErrStateGetState+0xdc>
		{
			//DDR=0
		//	DIO_ErrStateSetPinDirection(Switch->SW_Group ,Switch->SW_Pin, DIO_Input);
			//SWITCH PIN= 0 (LOW)
		//	DIO_ErrStateSetPinValue(Switch->SW_Group ,Switch->SW_Pin, DIO_Low);
			DIO_ErrStateReadPinValue(Switch->SW_Group ,Switch->SW_Pin,&Result1);
    1d84:	ea 81       	ldd	r30, Y+2	; 0x02
    1d86:	fb 81       	ldd	r31, Y+3	; 0x03
    1d88:	80 81       	ld	r24, Z
    1d8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d8e:	91 81       	ldd	r25, Z+1	; 0x01
    1d90:	69 2f       	mov	r22, r25
    1d92:	9e 01       	movw	r18, r28
    1d94:	2f 5f       	subi	r18, 0xFF	; 255
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	a9 01       	movw	r20, r18
    1d9a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <DIO_ErrStateReadPinValue>
			if( Result1==1)
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	21 f4       	brne	.+8      	; 0x1dac <SW_SwitchErrStateGetState+0xcc>
				*Result=0;
    1da4:	ec 81       	ldd	r30, Y+4	; 0x04
    1da6:	fd 81       	ldd	r31, Y+5	; 0x05
    1da8:	10 82       	st	Z, r1
    1daa:	0c c0       	rjmp	.+24     	; 0x1dc4 <SW_SwitchErrStateGetState+0xe4>
			else if(Result1==0)
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	88 23       	and	r24, r24
    1db0:	49 f4       	brne	.+18     	; 0x1dc4 <SW_SwitchErrStateGetState+0xe4>
				*Result=1;
    1db2:	ec 81       	ldd	r30, Y+4	; 0x04
    1db4:	fd 81       	ldd	r31, Y+5	; 0x05
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	80 83       	st	Z, r24
    1dba:	04 c0       	rjmp	.+8      	; 0x1dc4 <SW_SwitchErrStateGetState+0xe4>

		}
	else
	    {
	    	return ConnectionTypeError;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	8e 83       	std	Y+6, r24	; 0x06
	    }
}
    1dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc2:	00 c0       	rjmp	.+0      	; 0x1dc4 <SW_SwitchErrStateGetState+0xe4>
    1dc4:	26 96       	adiw	r28, 0x06	; 6
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <Led_LedErrStateTurnOn>:

#include "../../Comman/definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led)
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <Led_LedErrStateTurnOn+0x6>
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <Led_LedErrStateTurnOn+0x8>
    1dde:	0f 92       	push	r0
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
	 DIO_ErrStateSetPinDirection(Led->Led_Group, Led->Led_Pin, DIO_Output);
    1de8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dea:	fa 81       	ldd	r31, Y+2	; 0x02
    1dec:	80 81       	ld	r24, Z
    1dee:	e9 81       	ldd	r30, Y+1	; 0x01
    1df0:	fa 81       	ldd	r31, Y+2	; 0x02
    1df2:	91 81       	ldd	r25, Z+1	; 0x01
    1df4:	69 2f       	mov	r22, r25
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    1df8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_ErrStateSetPinDirection>
			switch(Led->ConnectionType)
    1dfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	3c 83       	std	Y+4, r19	; 0x04
    1e08:	2b 83       	std	Y+3, r18	; 0x03
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	31 f0       	breq	.+12     	; 0x1e1e <Led_LedErrStateTurnOn+0x48>
    1e12:	2b 81       	ldd	r18, Y+3	; 0x03
    1e14:	3c 81       	ldd	r19, Y+4	; 0x04
    1e16:	21 30       	cpi	r18, 0x01	; 1
    1e18:	31 05       	cpc	r19, r1
    1e1a:	61 f0       	breq	.+24     	; 0x1e34 <Led_LedErrStateTurnOn+0x5e>
    1e1c:	16 c0       	rjmp	.+44     	; 0x1e4a <Led_LedErrStateTurnOn+0x74>
			{
			/* if Led_ConnectionType is SOURCE the (HIGH) pin will be connected to the led  */
			case 0: DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High); break;
    1e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e20:	fa 81       	ldd	r31, Y+2	; 0x02
    1e22:	80 81       	ld	r24, Z
    1e24:	e9 81       	ldd	r30, Y+1	; 0x01
    1e26:	fa 81       	ldd	r31, Y+2	; 0x02
    1e28:	91 81       	ldd	r25, Z+1	; 0x01
    1e2a:	69 2f       	mov	r22, r25
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <Led_LedErrStateTurnOn+0x7c>
			/* if Led_ConnectionType is SINK the (LOW) pin will be connected to the led  */
			case 1: DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low); break;
    1e34:	e9 81       	ldd	r30, Y+1	; 0x01
    1e36:	fa 81       	ldd	r31, Y+2	; 0x02
    1e38:	80 81       	ld	r24, Z
    1e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	69 2f       	mov	r22, r25
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
    1e48:	04 c0       	rjmp	.+8      	; 0x1e52 <Led_LedErrStateTurnOn+0x7c>
			default:
						return ConectionError;
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
			}
}
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	00 c0       	rjmp	.+0      	; 0x1e52 <Led_LedErrStateTurnOn+0x7c>
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <Led_LedErrStateTurnOff>:
LedErrState	Led_LedErrStateTurnOff(Led_info *Led)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <Led_LedErrStateTurnOff+0x6>
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <Led_LedErrStateTurnOff+0x8>
    1e6a:	0f 92       	push	r0
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
	//I am not sure how to implement this in efficient way
	 DIO_ErrStateSetPinDirection(Led->Led_Group, Led->Led_Pin, DIO_Output);
    1e74:	e9 81       	ldd	r30, Y+1	; 0x01
    1e76:	fa 81       	ldd	r31, Y+2	; 0x02
    1e78:	80 81       	ld	r24, Z
    1e7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
    1e80:	69 2f       	mov	r22, r25
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_ErrStateSetPinDirection>
				switch(Led->ConnectionType)
    1e88:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	3c 83       	std	Y+4, r19	; 0x04
    1e94:	2b 83       	std	Y+3, r18	; 0x03
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	31 f0       	breq	.+12     	; 0x1eaa <Led_LedErrStateTurnOff+0x48>
    1e9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea2:	21 30       	cpi	r18, 0x01	; 1
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	61 f0       	breq	.+24     	; 0x1ec0 <Led_LedErrStateTurnOff+0x5e>
    1ea8:	16 c0       	rjmp	.+44     	; 0x1ed6 <Led_LedErrStateTurnOff+0x74>
				{
				/* if Led_ConnectionType is SOURCE the (HIGH) pin will be connected to the led  */
				case 0: DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low); break;
    1eaa:	e9 81       	ldd	r30, Y+1	; 0x01
    1eac:	fa 81       	ldd	r31, Y+2	; 0x02
    1eae:	80 81       	ld	r24, Z
    1eb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb4:	91 81       	ldd	r25, Z+1	; 0x01
    1eb6:	69 2f       	mov	r22, r25
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <Led_LedErrStateTurnOff+0x7c>
				/* if Led_ConnectionType is SINK the (LOW) pin will be connected to the led  */
				case 1: DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High); break;
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	80 81       	ld	r24, Z
    1ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	69 2f       	mov	r22, r25
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <Led_LedErrStateTurnOff+0x7c>
				default:
							return ConectionError;
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	8d 83       	std	Y+5, r24	; 0x05

				}
}
    1eda:	8d 81       	ldd	r24, Y+5	; 0x05
    1edc:	00 c0       	rjmp	.+0      	; 0x1ede <Led_LedErrStateTurnOff+0x7c>
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <lcd_voidsendcommand>:


#include "lcd_interface.h"
#include <util/delay.h>
void lcd_voidsendcommand(u8 copy_command,lcd_info *lcd)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	6f 97       	sbiw	r28, 0x1f	; 31
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	de bf       	out	0x3e, r29	; 62
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	cd bf       	out	0x3d, r28	; 61
    1f02:	8d 8f       	std	Y+29, r24	; 0x1d
    1f04:	7f 8f       	std	Y+31, r23	; 0x1f
    1f06:	6e 8f       	std	Y+30, r22	; 0x1e
	/*rs->low*/
	DIO_ErrStateSetPinValue(lcd->rs_g, lcd->rs_p, DIO_Low);
    1f08:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f0a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f0c:	80 81       	ld	r24, Z
    1f0e:	48 2f       	mov	r20, r24
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f14:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f16:	83 81       	ldd	r24, Z+3	; 0x03
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	ca 01       	movw	r24, r20
    1f1e:	b9 01       	movw	r22, r18
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
	/*rw->low*/
	DIO_ErrStateSetPinValue(lcd->rw_g, lcd->rw_p, DIO_Low);
    1f28:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f2a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f2c:	81 81       	ldd	r24, Z+1	; 0x01
    1f2e:	48 2f       	mov	r20, r24
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f34:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f36:	84 81       	ldd	r24, Z+4	; 0x04
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	ca 01       	movw	r24, r20
    1f3e:	b9 01       	movw	r22, r18
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
	//group==command
	DIO_ErrStateSetGroupValue(lcd->data_g, copy_command);
    1f48:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f4a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f4c:	86 81       	ldd	r24, Z+6	; 0x06
    1f4e:	48 2f       	mov	r20, r24
    1f50:	50 e0       	ldi	r21, 0x00	; 0
    1f52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	ca 01       	movw	r24, r20
    1f5a:	b9 01       	movw	r22, r18
    1f5c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
	//enable
	DIO_ErrStateSetPinValue(lcd->e_g, lcd->e_p, DIO_High);
    1f60:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f62:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	48 2f       	mov	r20, r24
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f6c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f6e:	85 81       	ldd	r24, Z+5	; 0x05
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	ca 01       	movw	r24, r20
    1f76:	b9 01       	movw	r22, r18
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	50 e0       	ldi	r21, 0x00	; 0
    1f7c:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	a0 e8       	ldi	r26, 0x80	; 128
    1f86:	bf e3       	ldi	r27, 0x3F	; 63
    1f88:	89 8f       	std	Y+25, r24	; 0x19
    1f8a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f8c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f90:	69 8d       	ldd	r22, Y+25	; 0x19
    1f92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	4a ef       	ldi	r20, 0xFA	; 250
    1f9e:	54 e4       	ldi	r21, 0x44	; 68
    1fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	8d 8b       	std	Y+21, r24	; 0x15
    1faa:	9e 8b       	std	Y+22, r25	; 0x16
    1fac:	af 8b       	std	Y+23, r26	; 0x17
    1fae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e8       	ldi	r20, 0x80	; 128
    1fbe:	5f e3       	ldi	r21, 0x3F	; 63
    1fc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc4:	88 23       	and	r24, r24
    1fc6:	2c f4       	brge	.+10     	; 0x1fd2 <lcd_voidsendcommand+0xe4>
		__ticks = 1;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9c 8b       	std	Y+20, r25	; 0x14
    1fce:	8b 8b       	std	Y+19, r24	; 0x13
    1fd0:	3f c0       	rjmp	.+126    	; 0x2050 <lcd_voidsendcommand+0x162>
	else if (__tmp > 65535)
    1fd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	3f ef       	ldi	r19, 0xFF	; 255
    1fde:	4f e7       	ldi	r20, 0x7F	; 127
    1fe0:	57 e4       	ldi	r21, 0x47	; 71
    1fe2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe6:	18 16       	cp	r1, r24
    1fe8:	4c f5       	brge	.+82     	; 0x203c <lcd_voidsendcommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fea:	69 8d       	ldd	r22, Y+25	; 0x19
    1fec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e2       	ldi	r20, 0x20	; 32
    1ff8:	51 e4       	ldi	r21, 0x41	; 65
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	9c 8b       	std	Y+20, r25	; 0x14
    2010:	8b 8b       	std	Y+19, r24	; 0x13
    2012:	0f c0       	rjmp	.+30     	; 0x2032 <lcd_voidsendcommand+0x144>
    2014:	88 ec       	ldi	r24, 0xC8	; 200
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9a 8b       	std	Y+18, r25	; 0x12
    201a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    201c:	89 89       	ldd	r24, Y+17	; 0x11
    201e:	9a 89       	ldd	r25, Y+18	; 0x12
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <lcd_voidsendcommand+0x132>
    2024:	9a 8b       	std	Y+18, r25	; 0x12
    2026:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2028:	8b 89       	ldd	r24, Y+19	; 0x13
    202a:	9c 89       	ldd	r25, Y+20	; 0x14
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	9c 8b       	std	Y+20, r25	; 0x14
    2030:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2032:	8b 89       	ldd	r24, Y+19	; 0x13
    2034:	9c 89       	ldd	r25, Y+20	; 0x14
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	69 f7       	brne	.-38     	; 0x2014 <lcd_voidsendcommand+0x126>
    203a:	14 c0       	rjmp	.+40     	; 0x2064 <lcd_voidsendcommand+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203c:	6d 89       	ldd	r22, Y+21	; 0x15
    203e:	7e 89       	ldd	r23, Y+22	; 0x16
    2040:	8f 89       	ldd	r24, Y+23	; 0x17
    2042:	98 8d       	ldd	r25, Y+24	; 0x18
    2044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	9c 8b       	std	Y+20, r25	; 0x14
    204e:	8b 8b       	std	Y+19, r24	; 0x13
    2050:	8b 89       	ldd	r24, Y+19	; 0x13
    2052:	9c 89       	ldd	r25, Y+20	; 0x14
    2054:	98 8b       	std	Y+16, r25	; 0x10
    2056:	8f 87       	std	Y+15, r24	; 0x0f
    2058:	8f 85       	ldd	r24, Y+15	; 0x0f
    205a:	98 89       	ldd	r25, Y+16	; 0x10
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <lcd_voidsendcommand+0x16e>
    2060:	98 8b       	std	Y+16, r25	; 0x10
    2062:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue(lcd->e_g, lcd->e_p, DIO_Low);
    2064:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2066:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	48 2f       	mov	r20, r24
    206c:	50 e0       	ldi	r21, 0x00	; 0
    206e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2070:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2072:	85 81       	ldd	r24, Z+5	; 0x05
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	ca 01       	movw	r24, r20
    207a:	b9 01       	movw	r22, r18
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	a0 e8       	ldi	r26, 0x80	; 128
    208a:	bf e3       	ldi	r27, 0x3F	; 63
    208c:	8b 87       	std	Y+11, r24	; 0x0b
    208e:	9c 87       	std	Y+12, r25	; 0x0c
    2090:	ad 87       	std	Y+13, r26	; 0x0d
    2092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2094:	6b 85       	ldd	r22, Y+11	; 0x0b
    2096:	7c 85       	ldd	r23, Y+12	; 0x0c
    2098:	8d 85       	ldd	r24, Y+13	; 0x0d
    209a:	9e 85       	ldd	r25, Y+14	; 0x0e
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	4a ef       	ldi	r20, 0xFA	; 250
    20a2:	54 e4       	ldi	r21, 0x44	; 68
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	8f 83       	std	Y+7, r24	; 0x07
    20ae:	98 87       	std	Y+8, r25	; 0x08
    20b0:	a9 87       	std	Y+9, r26	; 0x09
    20b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b4:	6f 81       	ldd	r22, Y+7	; 0x07
    20b6:	78 85       	ldd	r23, Y+8	; 0x08
    20b8:	89 85       	ldd	r24, Y+9	; 0x09
    20ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c8:	88 23       	and	r24, r24
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <lcd_voidsendcommand+0x1e8>
		__ticks = 1;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	3f c0       	rjmp	.+126    	; 0x2154 <lcd_voidsendcommand+0x266>
	else if (__tmp > 65535)
    20d6:	6f 81       	ldd	r22, Y+7	; 0x07
    20d8:	78 85       	ldd	r23, Y+8	; 0x08
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	3f ef       	ldi	r19, 0xFF	; 255
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	57 e4       	ldi	r21, 0x47	; 71
    20e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ea:	18 16       	cp	r1, r24
    20ec:	4c f5       	brge	.+82     	; 0x2140 <lcd_voidsendcommand+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9e 83       	std	Y+6, r25	; 0x06
    2114:	8d 83       	std	Y+5, r24	; 0x05
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <lcd_voidsendcommand+0x248>
    2118:	88 ec       	ldi	r24, 0xC8	; 200
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9c 83       	std	Y+4, r25	; 0x04
    211e:	8b 83       	std	Y+3, r24	; 0x03
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <lcd_voidsendcommand+0x236>
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	69 f7       	brne	.-38     	; 0x2118 <lcd_voidsendcommand+0x22a>
    213e:	14 c0       	rjmp	.+40     	; 0x2168 <lcd_voidsendcommand+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2140:	6f 81       	ldd	r22, Y+7	; 0x07
    2142:	78 85       	ldd	r23, Y+8	; 0x08
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	9a 85       	ldd	r25, Y+10	; 0x0a
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9e 83       	std	Y+6, r25	; 0x06
    2152:	8d 83       	std	Y+5, r24	; 0x05
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <lcd_voidsendcommand+0x272>
    2164:	9a 83       	std	Y+2, r25	; 0x02
    2166:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2168:	6f 96       	adiw	r28, 0x1f	; 31
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <lcd_voidgoxy>:
void lcd_voidgoxy(lcd_info *lcd, u8 Local_XPosition,u8 Local_YPosition)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	00 d0       	rcall	.+0      	; 0x2180 <lcd_voidgoxy+0x6>
    2180:	00 d0       	rcall	.+0      	; 0x2182 <lcd_voidgoxy+0x8>
    2182:	0f 92       	push	r0
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	9b 83       	std	Y+3, r25	; 0x03
    218a:	8a 83       	std	Y+2, r24	; 0x02
    218c:	6c 83       	std	Y+4, r22	; 0x04
    218e:	4d 83       	std	Y+5, r20	; 0x05
	u8 l_add=0;
    2190:	19 82       	std	Y+1, r1	; 0x01
	if(Local_XPosition == 0)
    2192:	8c 81       	ldd	r24, Y+4	; 0x04
    2194:	88 23       	and	r24, r24
    2196:	19 f4       	brne	.+6      	; 0x219e <lcd_voidgoxy+0x24>
	{
		l_add= Local_YPosition;
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	06 c0       	rjmp	.+12     	; 0x21aa <lcd_voidgoxy+0x30>
	}
	else if(Local_XPosition == 1)
    219e:	8c 81       	ldd	r24, Y+4	; 0x04
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	19 f4       	brne	.+6      	; 0x21aa <lcd_voidgoxy+0x30>
	{
		l_add= Local_YPosition+ 0x40;
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	80 5c       	subi	r24, 0xC0	; 192
    21a8:	89 83       	std	Y+1, r24	; 0x01
	}
	lcd_voidsendcommand(0x80+l_add,lcd);
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	80 58       	subi	r24, 0x80	; 128
    21ae:	2a 81       	ldd	r18, Y+2	; 0x02
    21b0:	3b 81       	ldd	r19, Y+3	; 0x03
    21b2:	b9 01       	movw	r22, r18
    21b4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <lcd_voidsendcommand>
}
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <lcd_voidsendchar>:
void lcd_voidsendchar(u8 copy_char,lcd_info *lcd)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	6f 97       	sbiw	r28, 0x1f	; 31
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	8d 8f       	std	Y+29, r24	; 0x1d
    21de:	7f 8f       	std	Y+31, r23	; 0x1f
    21e0:	6e 8f       	std	Y+30, r22	; 0x1e
    	/*rs->high*/
		DIO_ErrStateSetPinValue(lcd->rs_g, lcd->rs_p, DIO_High);
    21e2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    21e4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    21e6:	80 81       	ld	r24, Z
    21e8:	48 2f       	mov	r20, r24
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	ee 8d       	ldd	r30, Y+30	; 0x1e
    21ee:	ff 8d       	ldd	r31, Y+31	; 0x1f
    21f0:	83 81       	ldd	r24, Z+3	; 0x03
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	ca 01       	movw	r24, r20
    21f8:	b9 01       	movw	r22, r18
    21fa:	41 e0       	ldi	r20, 0x01	; 1
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
		/*rw->low*/
		DIO_ErrStateSetPinValue(lcd->rw_g, lcd->rw_p, DIO_Low);
    2202:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2204:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2206:	81 81       	ldd	r24, Z+1	; 0x01
    2208:	48 2f       	mov	r20, r24
    220a:	50 e0       	ldi	r21, 0x00	; 0
    220c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    220e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2210:	84 81       	ldd	r24, Z+4	; 0x04
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	ca 01       	movw	r24, r20
    2218:	b9 01       	movw	r22, r18
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
		//group==command
		DIO_ErrStateSetGroupValue(lcd->data_g, copy_char);
    2222:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2224:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2226:	86 81       	ldd	r24, Z+6	; 0x06
    2228:	48 2f       	mov	r20, r24
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	ca 01       	movw	r24, r20
    2234:	b9 01       	movw	r22, r18
    2236:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
		//enable
		DIO_ErrStateSetPinValue(lcd->e_g, lcd->e_p, DIO_High);
    223a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    223c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	48 2f       	mov	r20, r24
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2246:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2248:	85 81       	ldd	r24, Z+5	; 0x05
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	ca 01       	movw	r24, r20
    2250:	b9 01       	movw	r22, r18
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	50 e0       	ldi	r21, 0x00	; 0
    2256:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	a0 e8       	ldi	r26, 0x80	; 128
    2260:	bf e3       	ldi	r27, 0x3F	; 63
    2262:	89 8f       	std	Y+25, r24	; 0x19
    2264:	9a 8f       	std	Y+26, r25	; 0x1a
    2266:	ab 8f       	std	Y+27, r26	; 0x1b
    2268:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226a:	69 8d       	ldd	r22, Y+25	; 0x19
    226c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2270:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a ef       	ldi	r20, 0xFA	; 250
    2278:	54 e4       	ldi	r21, 0x44	; 68
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	8d 8b       	std	Y+21, r24	; 0x15
    2284:	9e 8b       	std	Y+22, r25	; 0x16
    2286:	af 8b       	std	Y+23, r26	; 0x17
    2288:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    228a:	6d 89       	ldd	r22, Y+21	; 0x15
    228c:	7e 89       	ldd	r23, Y+22	; 0x16
    228e:	8f 89       	ldd	r24, Y+23	; 0x17
    2290:	98 8d       	ldd	r25, Y+24	; 0x18
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e8       	ldi	r20, 0x80	; 128
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229e:	88 23       	and	r24, r24
    22a0:	2c f4       	brge	.+10     	; 0x22ac <lcd_voidsendchar+0xe4>
		__ticks = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9c 8b       	std	Y+20, r25	; 0x14
    22a8:	8b 8b       	std	Y+19, r24	; 0x13
    22aa:	3f c0       	rjmp	.+126    	; 0x232a <lcd_voidsendchar+0x162>
	else if (__tmp > 65535)
    22ac:	6d 89       	ldd	r22, Y+21	; 0x15
    22ae:	7e 89       	ldd	r23, Y+22	; 0x16
    22b0:	8f 89       	ldd	r24, Y+23	; 0x17
    22b2:	98 8d       	ldd	r25, Y+24	; 0x18
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	57 e4       	ldi	r21, 0x47	; 71
    22bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	4c f5       	brge	.+82     	; 0x2316 <lcd_voidsendchar+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c4:	69 8d       	ldd	r22, Y+25	; 0x19
    22c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e2       	ldi	r20, 0x20	; 32
    22d2:	51 e4       	ldi	r21, 0x41	; 65
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9c 8b       	std	Y+20, r25	; 0x14
    22ea:	8b 8b       	std	Y+19, r24	; 0x13
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <lcd_voidsendchar+0x144>
    22ee:	88 ec       	ldi	r24, 0xC8	; 200
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9a 8b       	std	Y+18, r25	; 0x12
    22f4:	89 8b       	std	Y+17, r24	; 0x11
    22f6:	89 89       	ldd	r24, Y+17	; 0x11
    22f8:	9a 89       	ldd	r25, Y+18	; 0x12
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <lcd_voidsendchar+0x132>
    22fe:	9a 8b       	std	Y+18, r25	; 0x12
    2300:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2302:	8b 89       	ldd	r24, Y+19	; 0x13
    2304:	9c 89       	ldd	r25, Y+20	; 0x14
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9c 8b       	std	Y+20, r25	; 0x14
    230a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	8b 89       	ldd	r24, Y+19	; 0x13
    230e:	9c 89       	ldd	r25, Y+20	; 0x14
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f7       	brne	.-38     	; 0x22ee <lcd_voidsendchar+0x126>
    2314:	14 c0       	rjmp	.+40     	; 0x233e <lcd_voidsendchar+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2316:	6d 89       	ldd	r22, Y+21	; 0x15
    2318:	7e 89       	ldd	r23, Y+22	; 0x16
    231a:	8f 89       	ldd	r24, Y+23	; 0x17
    231c:	98 8d       	ldd	r25, Y+24	; 0x18
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9c 8b       	std	Y+20, r25	; 0x14
    2328:	8b 8b       	std	Y+19, r24	; 0x13
    232a:	8b 89       	ldd	r24, Y+19	; 0x13
    232c:	9c 89       	ldd	r25, Y+20	; 0x14
    232e:	98 8b       	std	Y+16, r25	; 0x10
    2330:	8f 87       	std	Y+15, r24	; 0x0f
    2332:	8f 85       	ldd	r24, Y+15	; 0x0f
    2334:	98 89       	ldd	r25, Y+16	; 0x10
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <lcd_voidsendchar+0x16e>
    233a:	98 8b       	std	Y+16, r25	; 0x10
    233c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_ErrStateSetPinValue(lcd->e_g, lcd->e_p, DIO_Low);
    233e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2340:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	48 2f       	mov	r20, r24
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	ee 8d       	ldd	r30, Y+30	; 0x1e
    234a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    234c:	85 81       	ldd	r24, Z+5	; 0x05
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	ca 01       	movw	r24, r20
    2354:	b9 01       	movw	r22, r18
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a0 e8       	ldi	r26, 0x80	; 128
    2364:	bf e3       	ldi	r27, 0x3F	; 63
    2366:	8b 87       	std	Y+11, r24	; 0x0b
    2368:	9c 87       	std	Y+12, r25	; 0x0c
    236a:	ad 87       	std	Y+13, r26	; 0x0d
    236c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2370:	7c 85       	ldd	r23, Y+12	; 0x0c
    2372:	8d 85       	ldd	r24, Y+13	; 0x0d
    2374:	9e 85       	ldd	r25, Y+14	; 0x0e
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	4a ef       	ldi	r20, 0xFA	; 250
    237c:	54 e4       	ldi	r21, 0x44	; 68
    237e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	8f 83       	std	Y+7, r24	; 0x07
    2388:	98 87       	std	Y+8, r25	; 0x08
    238a:	a9 87       	std	Y+9, r26	; 0x09
    238c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    238e:	6f 81       	ldd	r22, Y+7	; 0x07
    2390:	78 85       	ldd	r23, Y+8	; 0x08
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	9a 85       	ldd	r25, Y+10	; 0x0a
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e8       	ldi	r20, 0x80	; 128
    239c:	5f e3       	ldi	r21, 0x3F	; 63
    239e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a2:	88 23       	and	r24, r24
    23a4:	2c f4       	brge	.+10     	; 0x23b0 <lcd_voidsendchar+0x1e8>
		__ticks = 1;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9e 83       	std	Y+6, r25	; 0x06
    23ac:	8d 83       	std	Y+5, r24	; 0x05
    23ae:	3f c0       	rjmp	.+126    	; 0x242e <lcd_voidsendchar+0x266>
	else if (__tmp > 65535)
    23b0:	6f 81       	ldd	r22, Y+7	; 0x07
    23b2:	78 85       	ldd	r23, Y+8	; 0x08
    23b4:	89 85       	ldd	r24, Y+9	; 0x09
    23b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	3f ef       	ldi	r19, 0xFF	; 255
    23bc:	4f e7       	ldi	r20, 0x7F	; 127
    23be:	57 e4       	ldi	r21, 0x47	; 71
    23c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c4:	18 16       	cp	r1, r24
    23c6:	4c f5       	brge	.+82     	; 0x241a <lcd_voidsendchar+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    23cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e2       	ldi	r20, 0x20	; 32
    23d6:	51 e4       	ldi	r21, 0x41	; 65
    23d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	bc 01       	movw	r22, r24
    23e2:	cd 01       	movw	r24, r26
    23e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	9e 83       	std	Y+6, r25	; 0x06
    23ee:	8d 83       	std	Y+5, r24	; 0x05
    23f0:	0f c0       	rjmp	.+30     	; 0x2410 <lcd_voidsendchar+0x248>
    23f2:	88 ec       	ldi	r24, 0xC8	; 200
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9c 83       	std	Y+4, r25	; 0x04
    23f8:	8b 83       	std	Y+3, r24	; 0x03
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <lcd_voidsendchar+0x236>
    2402:	9c 83       	std	Y+4, r25	; 0x04
    2404:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2410:	8d 81       	ldd	r24, Y+5	; 0x05
    2412:	9e 81       	ldd	r25, Y+6	; 0x06
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	69 f7       	brne	.-38     	; 0x23f2 <lcd_voidsendchar+0x22a>
    2418:	14 c0       	rjmp	.+40     	; 0x2442 <lcd_voidsendchar+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241a:	6f 81       	ldd	r22, Y+7	; 0x07
    241c:	78 85       	ldd	r23, Y+8	; 0x08
    241e:	89 85       	ldd	r24, Y+9	; 0x09
    2420:	9a 85       	ldd	r25, Y+10	; 0x0a
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	9e 81       	ldd	r25, Y+6	; 0x06
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	9a 81       	ldd	r25, Y+2	; 0x02
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <lcd_voidsendchar+0x272>
    243e:	9a 83       	std	Y+2, r25	; 0x02
    2440:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
}
    2442:	6f 96       	adiw	r28, 0x1f	; 31
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <lcd_voidcgram>:
void lcd_voidcgram(u8 *arr, u8 loc, lcd_info *lcd)
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	27 97       	sbiw	r28, 0x07	; 7
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	9c 83       	std	Y+4, r25	; 0x04
    246a:	8b 83       	std	Y+3, r24	; 0x03
    246c:	6d 83       	std	Y+5, r22	; 0x05
    246e:	5f 83       	std	Y+7, r21	; 0x07
    2470:	4e 83       	std	Y+6, r20	; 0x06
	 lcd_voidsendchar(loc,lcd);
    2472:	2e 81       	ldd	r18, Y+6	; 0x06
    2474:	3f 81       	ldd	r19, Y+7	; 0x07
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	b9 01       	movw	r22, r18
    247a:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <lcd_voidsendchar>
	lcd_voidsendcommand(0x40+(loc*8),lcd);
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	88 2f       	mov	r24, r24
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	08 96       	adiw	r24, 0x08	; 8
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	2e 81       	ldd	r18, Y+6	; 0x06
    2494:	3f 81       	ldd	r19, Y+7	; 0x07
    2496:	b9 01       	movw	r22, r18
    2498:	0e 94 77 0f 	call	0x1eee	; 0x1eee <lcd_voidsendcommand>
	for (int i=0; i<8; i++)
    249c:	1a 82       	std	Y+2, r1	; 0x02
    249e:	19 82       	std	Y+1, r1	; 0x01
    24a0:	12 c0       	rjmp	.+36     	; 0x24c6 <lcd_voidcgram+0x72>
		{
			lcd_voidsendchar(arr[i],lcd);
    24a2:	29 81       	ldd	r18, Y+1	; 0x01
    24a4:	3a 81       	ldd	r19, Y+2	; 0x02
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	fc 01       	movw	r30, r24
    24ac:	e2 0f       	add	r30, r18
    24ae:	f3 1f       	adc	r31, r19
    24b0:	80 81       	ld	r24, Z
    24b2:	2e 81       	ldd	r18, Y+6	; 0x06
    24b4:	3f 81       	ldd	r19, Y+7	; 0x07
    24b6:	b9 01       	movw	r22, r18
    24b8:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <lcd_voidsendchar>
}
void lcd_voidcgram(u8 *arr, u8 loc, lcd_info *lcd)
{
	 lcd_voidsendchar(loc,lcd);
	lcd_voidsendcommand(0x40+(loc*8),lcd);
	for (int i=0; i<8; i++)
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	9a 81       	ldd	r25, Y+2	; 0x02
    24c0:	01 96       	adiw	r24, 0x01	; 1
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	88 30       	cpi	r24, 0x08	; 8
    24cc:	91 05       	cpc	r25, r1
    24ce:	4c f3       	brlt	.-46     	; 0x24a2 <lcd_voidcgram+0x4e>
		{
			lcd_voidsendchar(arr[i],lcd);

		}

}
    24d0:	27 96       	adiw	r28, 0x07	; 7
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <lcd_voidsendnum>:
void lcd_voidsendnum(lcd_info* LCD , u8 Copy_u32Num)
	{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	27 97       	sbiw	r28, 0x07	; 7
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
    24fa:	6f 83       	std	Y+7, r22	; 0x07
	u8 Revers_num = 0;
    24fc:	1c 82       	std	Y+4, r1	; 0x04
	u8 displayed_num = 0;
    24fe:	1b 82       	std	Y+3, r1	; 0x03
	u8 multiplier = 1, i = 0;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	8a 83       	std	Y+2, r24	; 0x02
    2504:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u32Num == 0)
    2506:	8f 81       	ldd	r24, Y+7	; 0x07
    2508:	88 23       	and	r24, r24
    250a:	b9 f5       	brne	.+110    	; 0x257a <lcd_voidsendnum+0x98>
	{
		lcd_voidsendchar ('0',LCD);
    250c:	2d 81       	ldd	r18, Y+5	; 0x05
    250e:	3e 81       	ldd	r19, Y+6	; 0x06
    2510:	80 e3       	ldi	r24, 0x30	; 48
    2512:	b9 01       	movw	r22, r18
    2514:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <lcd_voidsendchar>
    2518:	30 c0       	rjmp	.+96     	; 0x257a <lcd_voidsendnum+0x98>
	}

	while(Copy_u32Num != 0)
	{
	Revers_num = (Revers_num * 10) + Copy_u32Num % 10;
    251a:	8c 81       	ldd	r24, Y+4	; 0x04
    251c:	88 2f       	mov	r24, r24
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	9c 01       	movw	r18, r24
    2522:	22 0f       	add	r18, r18
    2524:	33 1f       	adc	r19, r19
    2526:	c9 01       	movw	r24, r18
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	88 0f       	add	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	82 0f       	add	r24, r18
    2532:	93 1f       	adc	r25, r19
    2534:	28 2f       	mov	r18, r24
    2536:	8f 81       	ldd	r24, Y+7	; 0x07
    2538:	9a e0       	ldi	r25, 0x0A	; 10
    253a:	69 2f       	mov	r22, r25
    253c:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__udivmodqi4>
    2540:	89 2f       	mov	r24, r25
    2542:	82 0f       	add	r24, r18
    2544:	8c 83       	std	Y+4, r24	; 0x04
	if (Revers_num == 0)
    2546:	8c 81       	ldd	r24, Y+4	; 0x04
    2548:	88 23       	and	r24, r24
    254a:	71 f4       	brne	.+28     	; 0x2568 <lcd_voidsendnum+0x86>
	multiplier *= 10;
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	88 2f       	mov	r24, r24
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9c 01       	movw	r18, r24
    2554:	22 0f       	add	r18, r18
    2556:	33 1f       	adc	r19, r19
    2558:	c9 01       	movw	r24, r18
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	82 0f       	add	r24, r18
    2564:	93 1f       	adc	r25, r19
    2566:	8a 83       	std	Y+2, r24	; 0x02
	Copy_u32Num /= 10;
    2568:	8f 81       	ldd	r24, Y+7	; 0x07
    256a:	9a e0       	ldi	r25, 0x0A	; 10
    256c:	69 2f       	mov	r22, r25
    256e:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__udivmodqi4>
    2572:	8f 83       	std	Y+7, r24	; 0x07
	if (Copy_u32Num==0)
    2574:	8f 81       	ldd	r24, Y+7	; 0x07
    2576:	88 23       	and	r24, r24
    2578:	e1 f0       	breq	.+56     	; 0x25b2 <lcd_voidsendnum+0xd0>
	if (Copy_u32Num == 0)
	{
		lcd_voidsendchar ('0',LCD);
	}

	while(Copy_u32Num != 0)
    257a:	8f 81       	ldd	r24, Y+7	; 0x07
    257c:	88 23       	and	r24, r24
    257e:	69 f6       	brne	.-102    	; 0x251a <lcd_voidsendnum+0x38>
    2580:	18 c0       	rjmp	.+48     	; 0x25b2 <lcd_voidsendnum+0xd0>
		break;
	}
	}
	while (Revers_num != i)
	{
	displayed_num = Revers_num % 10;
    2582:	8c 81       	ldd	r24, Y+4	; 0x04
    2584:	9a e0       	ldi	r25, 0x0A	; 10
    2586:	69 2f       	mov	r22, r25
    2588:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__udivmodqi4>
    258c:	89 2f       	mov	r24, r25
    258e:	8b 83       	std	Y+3, r24	; 0x03
	lcd_voidsendchar (displayed_num + 48 ,LCD); //48 -> '0' Revers_num/=10;
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	80 5d       	subi	r24, 0xD0	; 208
    2594:	2d 81       	ldd	r18, Y+5	; 0x05
    2596:	3e 81       	ldd	r19, Y+6	; 0x06
    2598:	b9 01       	movw	r22, r18
    259a:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <lcd_voidsendchar>
	if (Revers_num == 0 && multiplier >= 10)
    259e:	8c 81       	ldd	r24, Y+4	; 0x04
    25a0:	88 23       	and	r24, r24
    25a2:	39 f4       	brne	.+14     	; 0x25b2 <lcd_voidsendnum+0xd0>
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	8a 30       	cpi	r24, 0x0A	; 10
    25a8:	20 f0       	brcs	.+8      	; 0x25b2 <lcd_voidsendnum+0xd0>
	{
	i = 1;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	89 83       	std	Y+1, r24	; 0x01
	Revers_num = multiplier;
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	8c 83       	std	Y+4, r24	; 0x04
	if (Copy_u32Num==0)
	{
		break;
	}
	}
	while (Revers_num != i)
    25b2:	9c 81       	ldd	r25, Y+4	; 0x04
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	98 17       	cp	r25, r24
    25b8:	21 f7       	brne	.-56     	; 0x2582 <lcd_voidsendnum+0xa0>
	{
	i = 1;
	Revers_num = multiplier;
	}
	}
}
    25ba:	27 96       	adiw	r28, 0x07	; 7
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <lcd_voidsendstring>:
void lcd_voidsendstring(u8 *add_string, lcd_info *lcd)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <lcd_voidsendstring+0x6>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <lcd_voidsendstring+0x8>
    25d4:	0f 92       	push	r0
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	9b 83       	std	Y+3, r25	; 0x03
    25dc:	8a 83       	std	Y+2, r24	; 0x02
    25de:	7d 83       	std	Y+5, r23	; 0x05
    25e0:	6c 83       	std	Y+4, r22	; 0x04
	u8 l_c=0;
    25e2:	19 82       	std	Y+1, r1	; 0x01
    25e4:	11 c0       	rjmp	.+34     	; 0x2608 <lcd_voidsendstring+0x3c>
	while(add_string[l_c]!='\0')
	{
		lcd_voidsendchar(add_string[l_c],lcd);
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	fc 01       	movw	r30, r24
    25f2:	e2 0f       	add	r30, r18
    25f4:	f3 1f       	adc	r31, r19
    25f6:	80 81       	ld	r24, Z
    25f8:	2c 81       	ldd	r18, Y+4	; 0x04
    25fa:	3d 81       	ldd	r19, Y+5	; 0x05
    25fc:	b9 01       	movw	r22, r18
    25fe:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <lcd_voidsendchar>
		l_c++;
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	8f 5f       	subi	r24, 0xFF	; 255
    2606:	89 83       	std	Y+1, r24	; 0x01
	}
}
void lcd_voidsendstring(u8 *add_string, lcd_info *lcd)
{
	u8 l_c=0;
	while(add_string[l_c]!='\0')
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	9b 81       	ldd	r25, Y+3	; 0x03
    2612:	fc 01       	movw	r30, r24
    2614:	e2 0f       	add	r30, r18
    2616:	f3 1f       	adc	r31, r19
    2618:	80 81       	ld	r24, Z
    261a:	88 23       	and	r24, r24
    261c:	21 f7       	brne	.-56     	; 0x25e6 <lcd_voidsendstring+0x1a>
	{
		lcd_voidsendchar(add_string[l_c],lcd);
		l_c++;
	}

}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <lcd_voidclear>:
void lcd_voidclear( lcd_info *lcd)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	6e 97       	sbiw	r28, 0x1e	; 30
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	9e 8f       	std	Y+30, r25	; 0x1e
    2644:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_ErrStateSetPinValue(lcd->rs_g, lcd->rs_p, DIO_Low);
    2646:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2648:	fe 8d       	ldd	r31, Y+30	; 0x1e
    264a:	80 81       	ld	r24, Z
    264c:	48 2f       	mov	r20, r24
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2652:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2654:	83 81       	ldd	r24, Z+3	; 0x03
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	ca 01       	movw	r24, r20
    265c:	b9 01       	movw	r22, r18
    265e:	40 e0       	ldi	r20, 0x00	; 0
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
		/*rw->low*/
		DIO_ErrStateSetPinValue(lcd->rw_g, lcd->rw_p, DIO_Low);
    2666:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2668:	fe 8d       	ldd	r31, Y+30	; 0x1e
    266a:	81 81       	ldd	r24, Z+1	; 0x01
    266c:	48 2f       	mov	r20, r24
    266e:	50 e0       	ldi	r21, 0x00	; 0
    2670:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2672:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2674:	84 81       	ldd	r24, Z+4	; 0x04
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	ca 01       	movw	r24, r20
    267c:	b9 01       	movw	r22, r18
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
		//group==command
		DIO_ErrStateSetGroupValue(lcd->data_g, 0x01);
    2686:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2688:	fe 8d       	ldd	r31, Y+30	; 0x1e
    268a:	86 81       	ldd	r24, Z+6	; 0x06
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	61 e0       	ldi	r22, 0x01	; 1
    2692:	70 e0       	ldi	r23, 0x00	; 0
    2694:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
		//enable
		DIO_ErrStateSetPinValue(lcd->e_g, lcd->e_p, DIO_High);
    2698:	ed 8d       	ldd	r30, Y+29	; 0x1d
    269a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	48 2f       	mov	r20, r24
    26a0:	50 e0       	ldi	r21, 0x00	; 0
    26a2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    26a4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    26a6:	85 81       	ldd	r24, Z+5	; 0x05
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	ca 01       	movw	r24, r20
    26ae:	b9 01       	movw	r22, r18
    26b0:	41 e0       	ldi	r20, 0x01	; 1
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e8       	ldi	r26, 0x80	; 128
    26be:	bf e3       	ldi	r27, 0x3F	; 63
    26c0:	89 8f       	std	Y+25, r24	; 0x19
    26c2:	9a 8f       	std	Y+26, r25	; 0x1a
    26c4:	ab 8f       	std	Y+27, r26	; 0x1b
    26c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	4a ef       	ldi	r20, 0xFA	; 250
    26d6:	54 e4       	ldi	r21, 0x44	; 68
    26d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	8d 8b       	std	Y+21, r24	; 0x15
    26e2:	9e 8b       	std	Y+22, r25	; 0x16
    26e4:	af 8b       	std	Y+23, r26	; 0x17
    26e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26e8:	6d 89       	ldd	r22, Y+21	; 0x15
    26ea:	7e 89       	ldd	r23, Y+22	; 0x16
    26ec:	8f 89       	ldd	r24, Y+23	; 0x17
    26ee:	98 8d       	ldd	r25, Y+24	; 0x18
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e8       	ldi	r20, 0x80	; 128
    26f6:	5f e3       	ldi	r21, 0x3F	; 63
    26f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26fc:	88 23       	and	r24, r24
    26fe:	2c f4       	brge	.+10     	; 0x270a <lcd_voidclear+0xdc>
		__ticks = 1;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9c 8b       	std	Y+20, r25	; 0x14
    2706:	8b 8b       	std	Y+19, r24	; 0x13
    2708:	3f c0       	rjmp	.+126    	; 0x2788 <lcd_voidclear+0x15a>
	else if (__tmp > 65535)
    270a:	6d 89       	ldd	r22, Y+21	; 0x15
    270c:	7e 89       	ldd	r23, Y+22	; 0x16
    270e:	8f 89       	ldd	r24, Y+23	; 0x17
    2710:	98 8d       	ldd	r25, Y+24	; 0x18
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	3f ef       	ldi	r19, 0xFF	; 255
    2716:	4f e7       	ldi	r20, 0x7F	; 127
    2718:	57 e4       	ldi	r21, 0x47	; 71
    271a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271e:	18 16       	cp	r1, r24
    2720:	4c f5       	brge	.+82     	; 0x2774 <lcd_voidclear+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2722:	69 8d       	ldd	r22, Y+25	; 0x19
    2724:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2726:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2728:	9c 8d       	ldd	r25, Y+28	; 0x1c
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e2       	ldi	r20, 0x20	; 32
    2730:	51 e4       	ldi	r21, 0x41	; 65
    2732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	bc 01       	movw	r22, r24
    273c:	cd 01       	movw	r24, r26
    273e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	9c 8b       	std	Y+20, r25	; 0x14
    2748:	8b 8b       	std	Y+19, r24	; 0x13
    274a:	0f c0       	rjmp	.+30     	; 0x276a <lcd_voidclear+0x13c>
    274c:	88 ec       	ldi	r24, 0xC8	; 200
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	9a 8b       	std	Y+18, r25	; 0x12
    2752:	89 8b       	std	Y+17, r24	; 0x11
    2754:	89 89       	ldd	r24, Y+17	; 0x11
    2756:	9a 89       	ldd	r25, Y+18	; 0x12
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	f1 f7       	brne	.-4      	; 0x2758 <lcd_voidclear+0x12a>
    275c:	9a 8b       	std	Y+18, r25	; 0x12
    275e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2760:	8b 89       	ldd	r24, Y+19	; 0x13
    2762:	9c 89       	ldd	r25, Y+20	; 0x14
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	9c 8b       	std	Y+20, r25	; 0x14
    2768:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276a:	8b 89       	ldd	r24, Y+19	; 0x13
    276c:	9c 89       	ldd	r25, Y+20	; 0x14
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	69 f7       	brne	.-38     	; 0x274c <lcd_voidclear+0x11e>
    2772:	14 c0       	rjmp	.+40     	; 0x279c <lcd_voidclear+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2774:	6d 89       	ldd	r22, Y+21	; 0x15
    2776:	7e 89       	ldd	r23, Y+22	; 0x16
    2778:	8f 89       	ldd	r24, Y+23	; 0x17
    277a:	98 8d       	ldd	r25, Y+24	; 0x18
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	9c 8b       	std	Y+20, r25	; 0x14
    2786:	8b 8b       	std	Y+19, r24	; 0x13
    2788:	8b 89       	ldd	r24, Y+19	; 0x13
    278a:	9c 89       	ldd	r25, Y+20	; 0x14
    278c:	98 8b       	std	Y+16, r25	; 0x10
    278e:	8f 87       	std	Y+15, r24	; 0x0f
    2790:	8f 85       	ldd	r24, Y+15	; 0x0f
    2792:	98 89       	ldd	r25, Y+16	; 0x10
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <lcd_voidclear+0x166>
    2798:	98 8b       	std	Y+16, r25	; 0x10
    279a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_ErrStateSetPinValue(lcd->e_g, lcd->e_p, DIO_Low);
    279c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    279e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	48 2f       	mov	r20, r24
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	ed 8d       	ldd	r30, Y+29	; 0x1d
    27a8:	fe 8d       	ldd	r31, Y+30	; 0x1e
    27aa:	85 81       	ldd	r24, Z+5	; 0x05
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	ca 01       	movw	r24, r20
    27b2:	b9 01       	movw	r22, r18
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	a0 e8       	ldi	r26, 0x80	; 128
    27c2:	bf e3       	ldi	r27, 0x3F	; 63
    27c4:	8b 87       	std	Y+11, r24	; 0x0b
    27c6:	9c 87       	std	Y+12, r25	; 0x0c
    27c8:	ad 87       	std	Y+13, r26	; 0x0d
    27ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4a ef       	ldi	r20, 0xFA	; 250
    27da:	54 e4       	ldi	r21, 0x44	; 68
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	8f 83       	std	Y+7, r24	; 0x07
    27e6:	98 87       	std	Y+8, r25	; 0x08
    27e8:	a9 87       	std	Y+9, r26	; 0x09
    27ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ec:	6f 81       	ldd	r22, Y+7	; 0x07
    27ee:	78 85       	ldd	r23, Y+8	; 0x08
    27f0:	89 85       	ldd	r24, Y+9	; 0x09
    27f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	2c f4       	brge	.+10     	; 0x280e <lcd_voidclear+0x1e0>
		__ticks = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9e 83       	std	Y+6, r25	; 0x06
    280a:	8d 83       	std	Y+5, r24	; 0x05
    280c:	3f c0       	rjmp	.+126    	; 0x288c <lcd_voidclear+0x25e>
	else if (__tmp > 65535)
    280e:	6f 81       	ldd	r22, Y+7	; 0x07
    2810:	78 85       	ldd	r23, Y+8	; 0x08
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	3f ef       	ldi	r19, 0xFF	; 255
    281a:	4f e7       	ldi	r20, 0x7F	; 127
    281c:	57 e4       	ldi	r21, 0x47	; 71
    281e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2822:	18 16       	cp	r1, r24
    2824:	4c f5       	brge	.+82     	; 0x2878 <lcd_voidclear+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2826:	6b 85       	ldd	r22, Y+11	; 0x0b
    2828:	7c 85       	ldd	r23, Y+12	; 0x0c
    282a:	8d 85       	ldd	r24, Y+13	; 0x0d
    282c:	9e 85       	ldd	r25, Y+14	; 0x0e
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	51 e4       	ldi	r21, 0x41	; 65
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9e 83       	std	Y+6, r25	; 0x06
    284c:	8d 83       	std	Y+5, r24	; 0x05
    284e:	0f c0       	rjmp	.+30     	; 0x286e <lcd_voidclear+0x240>
    2850:	88 ec       	ldi	r24, 0xC8	; 200
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9c 83       	std	Y+4, r25	; 0x04
    2856:	8b 83       	std	Y+3, r24	; 0x03
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	9c 81       	ldd	r25, Y+4	; 0x04
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <lcd_voidclear+0x22e>
    2860:	9c 83       	std	Y+4, r25	; 0x04
    2862:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	9e 83       	std	Y+6, r25	; 0x06
    286c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286e:	8d 81       	ldd	r24, Y+5	; 0x05
    2870:	9e 81       	ldd	r25, Y+6	; 0x06
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	69 f7       	brne	.-38     	; 0x2850 <lcd_voidclear+0x222>
    2876:	14 c0       	rjmp	.+40     	; 0x28a0 <lcd_voidclear+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2878:	6f 81       	ldd	r22, Y+7	; 0x07
    287a:	78 85       	ldd	r23, Y+8	; 0x08
    287c:	89 85       	ldd	r24, Y+9	; 0x09
    287e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	9a 83       	std	Y+2, r25	; 0x02
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <lcd_voidclear+0x26a>
    289c:	9a 83       	std	Y+2, r25	; 0x02
    289e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    28a0:	6e 96       	adiw	r28, 0x1e	; 30
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <lcd_voidinit>:
void lcd_voidinit(lcd_info *lcd)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	ea 97       	sbiw	r28, 0x3a	; 58
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	f8 94       	cli
    28c0:	de bf       	out	0x3e, r29	; 62
    28c2:	0f be       	out	0x3f, r0	; 63
    28c4:	cd bf       	out	0x3d, r28	; 61
    28c6:	9a af       	std	Y+58, r25	; 0x3a
    28c8:	89 af       	std	Y+57, r24	; 0x39
	//set direction
	DIO_ErrStateSetPinDirection(lcd->rs_g, lcd->rs_p, DIO_Output);
    28ca:	e9 ad       	ldd	r30, Y+57	; 0x39
    28cc:	fa ad       	ldd	r31, Y+58	; 0x3a
    28ce:	80 81       	ld	r24, Z
    28d0:	48 2f       	mov	r20, r24
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	e9 ad       	ldd	r30, Y+57	; 0x39
    28d6:	fa ad       	ldd	r31, Y+58	; 0x3a
    28d8:	83 81       	ldd	r24, Z+3	; 0x03
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	ca 01       	movw	r24, r20
    28e0:	b9 01       	movw	r22, r18
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	50 e0       	ldi	r21, 0x00	; 0
    28e6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->rw_g, lcd->rw_p, DIO_Output);
    28ea:	e9 ad       	ldd	r30, Y+57	; 0x39
    28ec:	fa ad       	ldd	r31, Y+58	; 0x3a
    28ee:	81 81       	ldd	r24, Z+1	; 0x01
    28f0:	48 2f       	mov	r20, r24
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	e9 ad       	ldd	r30, Y+57	; 0x39
    28f6:	fa ad       	ldd	r31, Y+58	; 0x3a
    28f8:	84 81       	ldd	r24, Z+4	; 0x04
    28fa:	28 2f       	mov	r18, r24
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	ca 01       	movw	r24, r20
    2900:	b9 01       	movw	r22, r18
    2902:	41 e0       	ldi	r20, 0x01	; 1
    2904:	50 e0       	ldi	r21, 0x00	; 0
    2906:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->e_g, lcd->e_p, DIO_Output);
    290a:	e9 ad       	ldd	r30, Y+57	; 0x39
    290c:	fa ad       	ldd	r31, Y+58	; 0x3a
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	48 2f       	mov	r20, r24
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	e9 ad       	ldd	r30, Y+57	; 0x39
    2916:	fa ad       	ldd	r31, Y+58	; 0x3a
    2918:	85 81       	ldd	r24, Z+5	; 0x05
    291a:	28 2f       	mov	r18, r24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	ca 01       	movw	r24, r20
    2920:	b9 01       	movw	r22, r18
    2922:	41 e0       	ldi	r20, 0x01	; 1
    2924:	50 e0       	ldi	r21, 0x00	; 0
    2926:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(lcd->data_g,0xFF);
    292a:	e9 ad       	ldd	r30, Y+57	; 0x39
    292c:	fa ad       	ldd	r31, Y+58	; 0x3a
    292e:	86 81       	ldd	r24, Z+6	; 0x06
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	6f ef       	ldi	r22, 0xFF	; 255
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ErrStateSetGroupDirection>
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	a0 e2       	ldi	r26, 0x20	; 32
    2942:	b2 e4       	ldi	r27, 0x42	; 66
    2944:	8d ab       	std	Y+53, r24	; 0x35
    2946:	9e ab       	std	Y+54, r25	; 0x36
    2948:	af ab       	std	Y+55, r26	; 0x37
    294a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294c:	6d a9       	ldd	r22, Y+53	; 0x35
    294e:	7e a9       	ldd	r23, Y+54	; 0x36
    2950:	8f a9       	ldd	r24, Y+55	; 0x37
    2952:	98 ad       	ldd	r25, Y+56	; 0x38
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4a ef       	ldi	r20, 0xFA	; 250
    295a:	54 e4       	ldi	r21, 0x44	; 68
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	89 ab       	std	Y+49, r24	; 0x31
    2966:	9a ab       	std	Y+50, r25	; 0x32
    2968:	ab ab       	std	Y+51, r26	; 0x33
    296a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    296c:	69 a9       	ldd	r22, Y+49	; 0x31
    296e:	7a a9       	ldd	r23, Y+50	; 0x32
    2970:	8b a9       	ldd	r24, Y+51	; 0x33
    2972:	9c a9       	ldd	r25, Y+52	; 0x34
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e8       	ldi	r20, 0x80	; 128
    297a:	5f e3       	ldi	r21, 0x3F	; 63
    297c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2980:	88 23       	and	r24, r24
    2982:	2c f4       	brge	.+10     	; 0x298e <lcd_voidinit+0xdc>
		__ticks = 1;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	98 ab       	std	Y+48, r25	; 0x30
    298a:	8f a7       	std	Y+47, r24	; 0x2f
    298c:	3f c0       	rjmp	.+126    	; 0x2a0c <lcd_voidinit+0x15a>
	else if (__tmp > 65535)
    298e:	69 a9       	ldd	r22, Y+49	; 0x31
    2990:	7a a9       	ldd	r23, Y+50	; 0x32
    2992:	8b a9       	ldd	r24, Y+51	; 0x33
    2994:	9c a9       	ldd	r25, Y+52	; 0x34
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	3f ef       	ldi	r19, 0xFF	; 255
    299a:	4f e7       	ldi	r20, 0x7F	; 127
    299c:	57 e4       	ldi	r21, 0x47	; 71
    299e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29a2:	18 16       	cp	r1, r24
    29a4:	4c f5       	brge	.+82     	; 0x29f8 <lcd_voidinit+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a6:	6d a9       	ldd	r22, Y+53	; 0x35
    29a8:	7e a9       	ldd	r23, Y+54	; 0x36
    29aa:	8f a9       	ldd	r24, Y+55	; 0x37
    29ac:	98 ad       	ldd	r25, Y+56	; 0x38
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e2       	ldi	r20, 0x20	; 32
    29b4:	51 e4       	ldi	r21, 0x41	; 65
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	98 ab       	std	Y+48, r25	; 0x30
    29cc:	8f a7       	std	Y+47, r24	; 0x2f
    29ce:	0f c0       	rjmp	.+30     	; 0x29ee <lcd_voidinit+0x13c>
    29d0:	88 ec       	ldi	r24, 0xC8	; 200
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	9e a7       	std	Y+46, r25	; 0x2e
    29d6:	8d a7       	std	Y+45, r24	; 0x2d
    29d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    29da:	9e a5       	ldd	r25, Y+46	; 0x2e
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <lcd_voidinit+0x12a>
    29e0:	9e a7       	std	Y+46, r25	; 0x2e
    29e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e6:	98 a9       	ldd	r25, Y+48	; 0x30
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	98 ab       	std	Y+48, r25	; 0x30
    29ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f0:	98 a9       	ldd	r25, Y+48	; 0x30
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	69 f7       	brne	.-38     	; 0x29d0 <lcd_voidinit+0x11e>
    29f6:	14 c0       	rjmp	.+40     	; 0x2a20 <lcd_voidinit+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f8:	69 a9       	ldd	r22, Y+49	; 0x31
    29fa:	7a a9       	ldd	r23, Y+50	; 0x32
    29fc:	8b a9       	ldd	r24, Y+51	; 0x33
    29fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	98 ab       	std	Y+48, r25	; 0x30
    2a0a:	8f a7       	std	Y+47, r24	; 0x2f
    2a0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a0e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a10:	9c a7       	std	Y+44, r25	; 0x2c
    2a12:	8b a7       	std	Y+43, r24	; 0x2b
    2a14:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a16:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <lcd_voidinit+0x166>
    2a1c:	9c a7       	std	Y+44, r25	; 0x2c
    2a1e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	//sent fun set
    lcd_voidsendcommand(LCD_Set8Bit2Line5x8,lcd);
    2a20:	29 ad       	ldd	r18, Y+57	; 0x39
    2a22:	3a ad       	ldd	r19, Y+58	; 0x3a
    2a24:	88 e3       	ldi	r24, 0x38	; 56
    2a26:	b9 01       	movw	r22, r18
    2a28:	0e 94 77 0f 	call	0x1eee	; 0x1eee <lcd_voidsendcommand>
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	a0 e8       	ldi	r26, 0x80	; 128
    2a32:	bf e3       	ldi	r27, 0x3F	; 63
    2a34:	8f a3       	std	Y+39, r24	; 0x27
    2a36:	98 a7       	std	Y+40, r25	; 0x28
    2a38:	a9 a7       	std	Y+41, r26	; 0x29
    2a3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a3e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a40:	89 a5       	ldd	r24, Y+41	; 0x29
    2a42:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	4a ef       	ldi	r20, 0xFA	; 250
    2a4a:	54 e4       	ldi	r21, 0x44	; 68
    2a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	8b a3       	std	Y+35, r24	; 0x23
    2a56:	9c a3       	std	Y+36, r25	; 0x24
    2a58:	ad a3       	std	Y+37, r26	; 0x25
    2a5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a60:	8d a1       	ldd	r24, Y+37	; 0x25
    2a62:	9e a1       	ldd	r25, Y+38	; 0x26
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e8       	ldi	r20, 0x80	; 128
    2a6a:	5f e3       	ldi	r21, 0x3F	; 63
    2a6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a70:	88 23       	and	r24, r24
    2a72:	2c f4       	brge	.+10     	; 0x2a7e <lcd_voidinit+0x1cc>
		__ticks = 1;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9a a3       	std	Y+34, r25	; 0x22
    2a7a:	89 a3       	std	Y+33, r24	; 0x21
    2a7c:	3f c0       	rjmp	.+126    	; 0x2afc <lcd_voidinit+0x24a>
	else if (__tmp > 65535)
    2a7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a80:	7c a1       	ldd	r23, Y+36	; 0x24
    2a82:	8d a1       	ldd	r24, Y+37	; 0x25
    2a84:	9e a1       	ldd	r25, Y+38	; 0x26
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	3f ef       	ldi	r19, 0xFF	; 255
    2a8a:	4f e7       	ldi	r20, 0x7F	; 127
    2a8c:	57 e4       	ldi	r21, 0x47	; 71
    2a8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a92:	18 16       	cp	r1, r24
    2a94:	4c f5       	brge	.+82     	; 0x2ae8 <lcd_voidinit+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a96:	6f a1       	ldd	r22, Y+39	; 0x27
    2a98:	78 a5       	ldd	r23, Y+40	; 0x28
    2a9a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e2       	ldi	r20, 0x20	; 32
    2aa4:	51 e4       	ldi	r21, 0x41	; 65
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9a a3       	std	Y+34, r25	; 0x22
    2abc:	89 a3       	std	Y+33, r24	; 0x21
    2abe:	0f c0       	rjmp	.+30     	; 0x2ade <lcd_voidinit+0x22c>
    2ac0:	88 ec       	ldi	r24, 0xC8	; 200
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	98 a3       	std	Y+32, r25	; 0x20
    2ac6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ac8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aca:	98 a1       	ldd	r25, Y+32	; 0x20
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <lcd_voidinit+0x21a>
    2ad0:	98 a3       	std	Y+32, r25	; 0x20
    2ad2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	9a a3       	std	Y+34, r25	; 0x22
    2adc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ade:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	69 f7       	brne	.-38     	; 0x2ac0 <lcd_voidinit+0x20e>
    2ae6:	14 c0       	rjmp	.+40     	; 0x2b10 <lcd_voidinit+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae8:	6b a1       	ldd	r22, Y+35	; 0x23
    2aea:	7c a1       	ldd	r23, Y+36	; 0x24
    2aec:	8d a1       	ldd	r24, Y+37	; 0x25
    2aee:	9e a1       	ldd	r25, Y+38	; 0x26
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9a a3       	std	Y+34, r25	; 0x22
    2afa:	89 a3       	std	Y+33, r24	; 0x21
    2afc:	89 a1       	ldd	r24, Y+33	; 0x21
    2afe:	9a a1       	ldd	r25, Y+34	; 0x22
    2b00:	9e 8f       	std	Y+30, r25	; 0x1e
    2b02:	8d 8f       	std	Y+29, r24	; 0x1d
    2b04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <lcd_voidinit+0x256>
    2b0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b0e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//display on/of
	 lcd_voidsendcommand( LCD_DisplayON,lcd);
    2b10:	29 ad       	ldd	r18, Y+57	; 0x39
    2b12:	3a ad       	ldd	r19, Y+58	; 0x3a
    2b14:	8c e0       	ldi	r24, 0x0C	; 12
    2b16:	b9 01       	movw	r22, r18
    2b18:	0e 94 77 0f 	call	0x1eee	; 0x1eee <lcd_voidsendcommand>
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	a0 e8       	ldi	r26, 0x80	; 128
    2b22:	bf e3       	ldi	r27, 0x3F	; 63
    2b24:	89 8f       	std	Y+25, r24	; 0x19
    2b26:	9a 8f       	std	Y+26, r25	; 0x1a
    2b28:	ab 8f       	std	Y+27, r26	; 0x1b
    2b2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	4a ef       	ldi	r20, 0xFA	; 250
    2b3a:	54 e4       	ldi	r21, 0x44	; 68
    2b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	8d 8b       	std	Y+21, r24	; 0x15
    2b46:	9e 8b       	std	Y+22, r25	; 0x16
    2b48:	af 8b       	std	Y+23, r26	; 0x17
    2b4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b50:	8f 89       	ldd	r24, Y+23	; 0x17
    2b52:	98 8d       	ldd	r25, Y+24	; 0x18
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e8       	ldi	r20, 0x80	; 128
    2b5a:	5f e3       	ldi	r21, 0x3F	; 63
    2b5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b60:	88 23       	and	r24, r24
    2b62:	2c f4       	brge	.+10     	; 0x2b6e <lcd_voidinit+0x2bc>
		__ticks = 1;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	9c 8b       	std	Y+20, r25	; 0x14
    2b6a:	8b 8b       	std	Y+19, r24	; 0x13
    2b6c:	3f c0       	rjmp	.+126    	; 0x2bec <lcd_voidinit+0x33a>
	else if (__tmp > 65535)
    2b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b70:	7e 89       	ldd	r23, Y+22	; 0x16
    2b72:	8f 89       	ldd	r24, Y+23	; 0x17
    2b74:	98 8d       	ldd	r25, Y+24	; 0x18
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	3f ef       	ldi	r19, 0xFF	; 255
    2b7a:	4f e7       	ldi	r20, 0x7F	; 127
    2b7c:	57 e4       	ldi	r21, 0x47	; 71
    2b7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b82:	18 16       	cp	r1, r24
    2b84:	4c f5       	brge	.+82     	; 0x2bd8 <lcd_voidinit+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b86:	69 8d       	ldd	r22, Y+25	; 0x19
    2b88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e2       	ldi	r20, 0x20	; 32
    2b94:	51 e4       	ldi	r21, 0x41	; 65
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	9c 8b       	std	Y+20, r25	; 0x14
    2bac:	8b 8b       	std	Y+19, r24	; 0x13
    2bae:	0f c0       	rjmp	.+30     	; 0x2bce <lcd_voidinit+0x31c>
    2bb0:	88 ec       	ldi	r24, 0xC8	; 200
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	9a 8b       	std	Y+18, r25	; 0x12
    2bb6:	89 8b       	std	Y+17, r24	; 0x11
    2bb8:	89 89       	ldd	r24, Y+17	; 0x11
    2bba:	9a 89       	ldd	r25, Y+18	; 0x12
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <lcd_voidinit+0x30a>
    2bc0:	9a 8b       	std	Y+18, r25	; 0x12
    2bc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	9c 8b       	std	Y+20, r25	; 0x14
    2bcc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bce:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	69 f7       	brne	.-38     	; 0x2bb0 <lcd_voidinit+0x2fe>
    2bd6:	14 c0       	rjmp	.+40     	; 0x2c00 <lcd_voidinit+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bda:	7e 89       	ldd	r23, Y+22	; 0x16
    2bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bde:	98 8d       	ldd	r25, Y+24	; 0x18
    2be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	9c 8b       	std	Y+20, r25	; 0x14
    2bea:	8b 8b       	std	Y+19, r24	; 0x13
    2bec:	8b 89       	ldd	r24, Y+19	; 0x13
    2bee:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf0:	98 8b       	std	Y+16, r25	; 0x10
    2bf2:	8f 87       	std	Y+15, r24	; 0x0f
    2bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf6:	98 89       	ldd	r25, Y+16	; 0x10
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <lcd_voidinit+0x346>
    2bfc:	98 8b       	std	Y+16, r25	; 0x10
    2bfe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	 lcd_voidsendcommand( LCD_ClearDisplay,lcd);
    2c00:	29 ad       	ldd	r18, Y+57	; 0x39
    2c02:	3a ad       	ldd	r19, Y+58	; 0x3a
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	b9 01       	movw	r22, r18
    2c08:	0e 94 77 0f 	call	0x1eee	; 0x1eee <lcd_voidsendcommand>
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	a0 e0       	ldi	r26, 0x00	; 0
    2c12:	b0 e4       	ldi	r27, 0x40	; 64
    2c14:	8b 87       	std	Y+11, r24	; 0x0b
    2c16:	9c 87       	std	Y+12, r25	; 0x0c
    2c18:	ad 87       	std	Y+13, r26	; 0x0d
    2c1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	4a ef       	ldi	r20, 0xFA	; 250
    2c2a:	54 e4       	ldi	r21, 0x44	; 68
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	8f 83       	std	Y+7, r24	; 0x07
    2c36:	98 87       	std	Y+8, r25	; 0x08
    2c38:	a9 87       	std	Y+9, r26	; 0x09
    2c3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3e:	78 85       	ldd	r23, Y+8	; 0x08
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e8       	ldi	r20, 0x80	; 128
    2c4a:	5f e3       	ldi	r21, 0x3F	; 63
    2c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c50:	88 23       	and	r24, r24
    2c52:	2c f4       	brge	.+10     	; 0x2c5e <lcd_voidinit+0x3ac>
		__ticks = 1;
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	9e 83       	std	Y+6, r25	; 0x06
    2c5a:	8d 83       	std	Y+5, r24	; 0x05
    2c5c:	3f c0       	rjmp	.+126    	; 0x2cdc <lcd_voidinit+0x42a>
	else if (__tmp > 65535)
    2c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c60:	78 85       	ldd	r23, Y+8	; 0x08
    2c62:	89 85       	ldd	r24, Y+9	; 0x09
    2c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	3f ef       	ldi	r19, 0xFF	; 255
    2c6a:	4f e7       	ldi	r20, 0x7F	; 127
    2c6c:	57 e4       	ldi	r21, 0x47	; 71
    2c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c72:	18 16       	cp	r1, r24
    2c74:	4c f5       	brge	.+82     	; 0x2cc8 <lcd_voidinit+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e2       	ldi	r20, 0x20	; 32
    2c84:	51 e4       	ldi	r21, 0x41	; 65
    2c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	bc 01       	movw	r22, r24
    2c90:	cd 01       	movw	r24, r26
    2c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
    2c9e:	0f c0       	rjmp	.+30     	; 0x2cbe <lcd_voidinit+0x40c>
    2ca0:	88 ec       	ldi	r24, 0xC8	; 200
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	9c 83       	std	Y+4, r25	; 0x04
    2ca6:	8b 83       	std	Y+3, r24	; 0x03
    2ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    2caa:	9c 81       	ldd	r25, Y+4	; 0x04
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	f1 f7       	brne	.-4      	; 0x2cac <lcd_voidinit+0x3fa>
    2cb0:	9c 83       	std	Y+4, r25	; 0x04
    2cb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	9e 83       	std	Y+6, r25	; 0x06
    2cbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	69 f7       	brne	.-38     	; 0x2ca0 <lcd_voidinit+0x3ee>
    2cc6:	14 c0       	rjmp	.+40     	; 0x2cf0 <lcd_voidinit+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cca:	78 85       	ldd	r23, Y+8	; 0x08
    2ccc:	89 85       	ldd	r24, Y+9	; 0x09
    2cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	9a 83       	std	Y+2, r25	; 0x02
    2ce2:	89 83       	std	Y+1, r24	; 0x01
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <lcd_voidinit+0x436>
    2cec:	9a 83       	std	Y+2, r25	; 0x02
    2cee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);


}
    2cf0:	ea 96       	adiw	r28, 0x3a	; 58
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	de bf       	out	0x3e, r29	; 62
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	cd bf       	out	0x3d, r28	; 61
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <KEY_pad_voidinit>:
#include"KEY_PAD_private.h"

u8 KEY_PAD_array[8] = KEY_PAD_ARRAY;

void KEY_pad_voidinit(void)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <KEY_pad_voidinit+0x6>
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8_iterator;
	for( LOC_u8_iterator=0;LOC_u8_iterator<KEY_PAD_ROWSIZE;LOC_u8_iterator++)
    2d0c:	1a 82       	std	Y+2, r1	; 0x02
    2d0e:	1b c0       	rjmp	.+54     	; 0x2d46 <KEY_pad_voidinit+0x44>
		{
			DIO_ErrStateSetPinDirection(DIO_GroupC,KEY_PAD_array[LOC_u8_iterator],DIO_Input);
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	88 2f       	mov	r24, r24
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	fc 01       	movw	r30, r24
    2d18:	e8 58       	subi	r30, 0x88	; 136
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	90 81       	ld	r25, Z
    2d1e:	82 e0       	ldi	r24, 0x02	; 2
    2d20:	69 2f       	mov	r22, r25
    2d22:	40 e0       	ldi	r20, 0x00	; 0
    2d24:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_ErrStateSetPinDirection>
			DIO_ErrStateSetPinValue (DIO_GroupC,KEY_PAD_array[LOC_u8_iterator], DIO_High);
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	88 2f       	mov	r24, r24
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	fc 01       	movw	r30, r24
    2d30:	e8 58       	subi	r30, 0x88	; 136
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	90 81       	ld	r25, Z
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	69 2f       	mov	r22, r25
    2d3a:	41 e0       	ldi	r20, 0x01	; 1
    2d3c:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
u8 KEY_PAD_array[8] = KEY_PAD_ARRAY;

void KEY_pad_voidinit(void)
{
	u8 LOC_u8_iterator;
	for( LOC_u8_iterator=0;LOC_u8_iterator<KEY_PAD_ROWSIZE;LOC_u8_iterator++)
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	8f 5f       	subi	r24, 0xFF	; 255
    2d44:	8a 83       	std	Y+2, r24	; 0x02
    2d46:	8a 81       	ldd	r24, Y+2	; 0x02
    2d48:	84 30       	cpi	r24, 0x04	; 4
    2d4a:	10 f3       	brcs	.-60     	; 0x2d10 <KEY_pad_voidinit+0xe>
		{
			DIO_ErrStateSetPinDirection(DIO_GroupC,KEY_PAD_array[LOC_u8_iterator],DIO_Input);
			DIO_ErrStateSetPinValue (DIO_GroupC,KEY_PAD_array[LOC_u8_iterator], DIO_High);
		}
		for(u8 LOC_u8_iterator=4;LOC_u8_iterator<(KEY_PAD_COLSIZE+KEY_PAD_ROWSIZE);LOC_u8_iterator++)
    2d4c:	84 e0       	ldi	r24, 0x04	; 4
    2d4e:	89 83       	std	Y+1, r24	; 0x01
    2d50:	1b c0       	rjmp	.+54     	; 0x2d88 <KEY_pad_voidinit+0x86>
		{
			DIO_ErrStateSetPinDirection(DIO_GroupC,KEY_PAD_array[LOC_u8_iterator],DIO_Output);
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	88 2f       	mov	r24, r24
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	fc 01       	movw	r30, r24
    2d5a:	e8 58       	subi	r30, 0x88	; 136
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	90 81       	ld	r25, Z
    2d60:	82 e0       	ldi	r24, 0x02	; 2
    2d62:	69 2f       	mov	r22, r25
    2d64:	41 e0       	ldi	r20, 0x01	; 1
    2d66:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_ErrStateSetPinDirection>
		    DIO_ErrStateSetPinValue (DIO_GroupC,KEY_PAD_array[LOC_u8_iterator],DIO_High);
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	fc 01       	movw	r30, r24
    2d72:	e8 58       	subi	r30, 0x88	; 136
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	90 81       	ld	r25, Z
    2d78:	82 e0       	ldi	r24, 0x02	; 2
    2d7a:	69 2f       	mov	r22, r25
    2d7c:	41 e0       	ldi	r20, 0x01	; 1
    2d7e:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
	for( LOC_u8_iterator=0;LOC_u8_iterator<KEY_PAD_ROWSIZE;LOC_u8_iterator++)
		{
			DIO_ErrStateSetPinDirection(DIO_GroupC,KEY_PAD_array[LOC_u8_iterator],DIO_Input);
			DIO_ErrStateSetPinValue (DIO_GroupC,KEY_PAD_array[LOC_u8_iterator], DIO_High);
		}
		for(u8 LOC_u8_iterator=4;LOC_u8_iterator<(KEY_PAD_COLSIZE+KEY_PAD_ROWSIZE);LOC_u8_iterator++)
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	8f 5f       	subi	r24, 0xFF	; 255
    2d86:	89 83       	std	Y+1, r24	; 0x01
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	88 30       	cpi	r24, 0x08	; 8
    2d8c:	10 f3       	brcs	.-60     	; 0x2d52 <KEY_pad_voidinit+0x50>
		{
			DIO_ErrStateSetPinDirection(DIO_GroupC,KEY_PAD_array[LOC_u8_iterator],DIO_Output);
		    DIO_ErrStateSetPinValue (DIO_GroupC,KEY_PAD_array[LOC_u8_iterator],DIO_High);
		}

}
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <Key_Pad_u8GetButtonPressed>:
void Key_Pad_u8GetButtonPressed(u8 *r) // returns the ascii code of the button pressed in the keypad values array
{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	65 97       	sbiw	r28, 0x15	; 21
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	9d 8b       	std	Y+21, r25	; 0x15
    2dae:	8c 8b       	std	Y+20, r24	; 0x14
	u8 LOC_u8coliterator=0;
    2db0:	1a 8a       	std	Y+18, r1	; 0x12
	u8 LOC_u8rowiterator=0;
    2db2:	19 8a       	std	Y+17, r1	; 0x11
	u8 LOC_u8switchpressed=0;
    2db4:	18 8a       	std	Y+16, r1	; 0x10
	u8 LOC_u8flag=0;
    2db6:	1f 86       	std	Y+15, r1	; 0x0f
	u8 Result;
	for(LOC_u8coliterator=KEY_PAD_ROWSIZE;LOC_u8coliterator<(KEY_PAD_ROWSIZE+KEY_PAD_COLSIZE)&&LOC_u8flag==0;LOC_u8coliterator++)
    2db8:	84 e0       	ldi	r24, 0x04	; 4
    2dba:	8a 8b       	std	Y+18, r24	; 0x12
    2dbc:	e8 c0       	rjmp	.+464    	; 0x2f8e <Key_Pad_u8GetButtonPressed+0x1f6>
	{
		   DIO_ErrStateSetPinValue(DIO_GroupC, KEY_PAD_array[LOC_u8coliterator] ,DIO_Low);
    2dbe:	8a 89       	ldd	r24, Y+18	; 0x12
    2dc0:	88 2f       	mov	r24, r24
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	e8 58       	subi	r30, 0x88	; 136
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	90 81       	ld	r25, Z
    2dcc:	82 e0       	ldi	r24, 0x02	; 2
    2dce:	69 2f       	mov	r22, r25
    2dd0:	40 e0       	ldi	r20, 0x00	; 0
    2dd2:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
		for(LOC_u8rowiterator=0;LOC_u8rowiterator<KEY_PAD_ROWSIZE&&LOC_u8flag==0;LOC_u8rowiterator++)
    2dd6:	19 8a       	std	Y+17, r1	; 0x11
    2dd8:	c4 c0       	rjmp	.+392    	; 0x2f62 <Key_Pad_u8GetButtonPressed+0x1ca>
		{
			 DIO_ErrStateReadPinValue(DIO_GroupC,KEY_PAD_array[LOC_u8rowiterator] , &Result);
    2dda:	89 89       	ldd	r24, Y+17	; 0x11
    2ddc:	88 2f       	mov	r24, r24
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	fc 01       	movw	r30, r24
    2de2:	e8 58       	subi	r30, 0x88	; 136
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	90 81       	ld	r25, Z
    2de8:	9e 01       	movw	r18, r28
    2dea:	2d 5e       	subi	r18, 0xED	; 237
    2dec:	3f 4f       	sbci	r19, 0xFF	; 255
    2dee:	82 e0       	ldi	r24, 0x02	; 2
    2df0:	69 2f       	mov	r22, r25
    2df2:	a9 01       	movw	r20, r18
    2df4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <DIO_ErrStateReadPinValue>
	//		LOC_u8SW_state= DIO_ErrStateReadPinValue(DIO_GroupA,KEY_PAD_array[LOC_u8rowiterator]);
		if(Result==DIO_Low)//becasuse of internal pullup
    2df8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dfa:	88 23       	and	r24, r24
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <Key_Pad_u8GetButtonPressed+0x68>
    2dfe:	ae c0       	rjmp	.+348    	; 0x2f5c <Key_Pad_u8GetButtonPressed+0x1c4>
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	a0 e7       	ldi	r26, 0x70	; 112
    2e06:	b1 e4       	ldi	r27, 0x41	; 65
    2e08:	8b 87       	std	Y+11, r24	; 0x0b
    2e0a:	9c 87       	std	Y+12, r25	; 0x0c
    2e0c:	ad 87       	std	Y+13, r26	; 0x0d
    2e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	4a ef       	ldi	r20, 0xFA	; 250
    2e1e:	54 e4       	ldi	r21, 0x44	; 68
    2e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	8f 83       	std	Y+7, r24	; 0x07
    2e2a:	98 87       	std	Y+8, r25	; 0x08
    2e2c:	a9 87       	std	Y+9, r26	; 0x09
    2e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e30:	6f 81       	ldd	r22, Y+7	; 0x07
    2e32:	78 85       	ldd	r23, Y+8	; 0x08
    2e34:	89 85       	ldd	r24, Y+9	; 0x09
    2e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	40 e8       	ldi	r20, 0x80	; 128
    2e3e:	5f e3       	ldi	r21, 0x3F	; 63
    2e40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e44:	88 23       	and	r24, r24
    2e46:	2c f4       	brge	.+10     	; 0x2e52 <Key_Pad_u8GetButtonPressed+0xba>
		__ticks = 1;
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	9e 83       	std	Y+6, r25	; 0x06
    2e4e:	8d 83       	std	Y+5, r24	; 0x05
    2e50:	3f c0       	rjmp	.+126    	; 0x2ed0 <Key_Pad_u8GetButtonPressed+0x138>
	else if (__tmp > 65535)
    2e52:	6f 81       	ldd	r22, Y+7	; 0x07
    2e54:	78 85       	ldd	r23, Y+8	; 0x08
    2e56:	89 85       	ldd	r24, Y+9	; 0x09
    2e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	3f ef       	ldi	r19, 0xFF	; 255
    2e5e:	4f e7       	ldi	r20, 0x7F	; 127
    2e60:	57 e4       	ldi	r21, 0x47	; 71
    2e62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e66:	18 16       	cp	r1, r24
    2e68:	4c f5       	brge	.+82     	; 0x2ebc <Key_Pad_u8GetButtonPressed+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e2       	ldi	r20, 0x20	; 32
    2e78:	51 e4       	ldi	r21, 0x41	; 65
    2e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	bc 01       	movw	r22, r24
    2e84:	cd 01       	movw	r24, r26
    2e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	9e 83       	std	Y+6, r25	; 0x06
    2e90:	8d 83       	std	Y+5, r24	; 0x05
    2e92:	0f c0       	rjmp	.+30     	; 0x2eb2 <Key_Pad_u8GetButtonPressed+0x11a>
    2e94:	88 ec       	ldi	r24, 0xC8	; 200
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	9c 83       	std	Y+4, r25	; 0x04
    2e9a:	8b 83       	std	Y+3, r24	; 0x03
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <Key_Pad_u8GetButtonPressed+0x108>
    2ea4:	9c 83       	std	Y+4, r25	; 0x04
    2ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	9e 83       	std	Y+6, r25	; 0x06
    2eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	69 f7       	brne	.-38     	; 0x2e94 <Key_Pad_u8GetButtonPressed+0xfc>
    2eba:	14 c0       	rjmp	.+40     	; 0x2ee4 <Key_Pad_u8GetButtonPressed+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebe:	78 85       	ldd	r23, Y+8	; 0x08
    2ec0:	89 85       	ldd	r24, Y+9	; 0x09
    2ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	9e 83       	std	Y+6, r25	; 0x06
    2ece:	8d 83       	std	Y+5, r24	; 0x05
    2ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed4:	9a 83       	std	Y+2, r25	; 0x02
    2ed6:	89 83       	std	Y+1, r24	; 0x01
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	9a 81       	ldd	r25, Y+2	; 0x02
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <Key_Pad_u8GetButtonPressed+0x144>
    2ee0:	9a 83       	std	Y+2, r25	; 0x02
    2ee2:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(15);//check for bouncing effect
			 DIO_ErrStateReadPinValue(DIO_GroupC,KEY_PAD_array[LOC_u8rowiterator], &Result);
    2ee4:	89 89       	ldd	r24, Y+17	; 0x11
    2ee6:	88 2f       	mov	r24, r24
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	fc 01       	movw	r30, r24
    2eec:	e8 58       	subi	r30, 0x88	; 136
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	90 81       	ld	r25, Z
    2ef2:	9e 01       	movw	r18, r28
    2ef4:	2d 5e       	subi	r18, 0xED	; 237
    2ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef8:	82 e0       	ldi	r24, 0x02	; 2
    2efa:	69 2f       	mov	r22, r25
    2efc:	a9 01       	movw	r20, r18
    2efe:	0e 94 c1 0c 	call	0x1982	; 0x1982 <DIO_ErrStateReadPinValue>

			if(Result==DIO_Low)
    2f02:	8b 89       	ldd	r24, Y+19	; 0x13
    2f04:	88 23       	and	r24, r24
    2f06:	51 f5       	brne	.+84     	; 0x2f5c <Key_Pad_u8GetButtonPressed+0x1c4>
			{
				LOC_u8switchpressed=KEY_PAD_values[LOC_u8rowiterator][LOC_u8coliterator-KEY_PAD_COLSIZE];//3SHAN msh bad2 mn 0
    2f08:	89 89       	ldd	r24, Y+17	; 0x11
    2f0a:	48 2f       	mov	r20, r24
    2f0c:	50 e0       	ldi	r21, 0x00	; 0
    2f0e:	8a 89       	ldd	r24, Y+18	; 0x12
    2f10:	88 2f       	mov	r24, r24
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	9c 01       	movw	r18, r24
    2f16:	24 50       	subi	r18, 0x04	; 4
    2f18:	30 40       	sbci	r19, 0x00	; 0
    2f1a:	ca 01       	movw	r24, r20
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	88 0f       	add	r24, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	82 0f       	add	r24, r18
    2f26:	93 1f       	adc	r25, r19
    2f28:	fc 01       	movw	r30, r24
    2f2a:	e8 59       	subi	r30, 0x98	; 152
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 81       	ld	r24, Z
    2f30:	88 8b       	std	Y+16, r24	; 0x10
    2f32:	0f c0       	rjmp	.+30     	; 0x2f52 <Key_Pad_u8GetButtonPressed+0x1ba>
				while(Result==DIO_Low) //this prevents to multiple effect for long  press at the same time ;
				{
					 DIO_ErrStateReadPinValue(DIO_GroupC,KEY_PAD_array[LOC_u8rowiterator], &Result);
    2f34:	89 89       	ldd	r24, Y+17	; 0x11
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	e8 58       	subi	r30, 0x88	; 136
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	90 81       	ld	r25, Z
    2f42:	9e 01       	movw	r18, r28
    2f44:	2d 5e       	subi	r18, 0xED	; 237
    2f46:	3f 4f       	sbci	r19, 0xFF	; 255
    2f48:	82 e0       	ldi	r24, 0x02	; 2
    2f4a:	69 2f       	mov	r22, r25
    2f4c:	a9 01       	movw	r20, r18
    2f4e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <DIO_ErrStateReadPinValue>
			 DIO_ErrStateReadPinValue(DIO_GroupC,KEY_PAD_array[LOC_u8rowiterator], &Result);

			if(Result==DIO_Low)
			{
				LOC_u8switchpressed=KEY_PAD_values[LOC_u8rowiterator][LOC_u8coliterator-KEY_PAD_COLSIZE];//3SHAN msh bad2 mn 0
				while(Result==DIO_Low) //this prevents to multiple effect for long  press at the same time ;
    2f52:	8b 89       	ldd	r24, Y+19	; 0x13
    2f54:	88 23       	and	r24, r24
    2f56:	71 f3       	breq	.-36     	; 0x2f34 <Key_Pad_u8GetButtonPressed+0x19c>
				{
					 DIO_ErrStateReadPinValue(DIO_GroupC,KEY_PAD_array[LOC_u8rowiterator], &Result);
				}
                LOC_u8flag=1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_u8flag=0;
	u8 Result;
	for(LOC_u8coliterator=KEY_PAD_ROWSIZE;LOC_u8coliterator<(KEY_PAD_ROWSIZE+KEY_PAD_COLSIZE)&&LOC_u8flag==0;LOC_u8coliterator++)
	{
		   DIO_ErrStateSetPinValue(DIO_GroupC, KEY_PAD_array[LOC_u8coliterator] ,DIO_Low);
		for(LOC_u8rowiterator=0;LOC_u8rowiterator<KEY_PAD_ROWSIZE&&LOC_u8flag==0;LOC_u8rowiterator++)
    2f5c:	89 89       	ldd	r24, Y+17	; 0x11
    2f5e:	8f 5f       	subi	r24, 0xFF	; 255
    2f60:	89 8b       	std	Y+17, r24	; 0x11
    2f62:	89 89       	ldd	r24, Y+17	; 0x11
    2f64:	84 30       	cpi	r24, 0x04	; 4
    2f66:	20 f4       	brcc	.+8      	; 0x2f70 <Key_Pad_u8GetButtonPressed+0x1d8>
    2f68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f6a:	88 23       	and	r24, r24
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <Key_Pad_u8GetButtonPressed+0x1d8>
    2f6e:	35 cf       	rjmp	.-406    	; 0x2dda <Key_Pad_u8GetButtonPressed+0x42>
				}
                LOC_u8flag=1;
			}
		}
		}
		DIO_ErrStateSetPinValue(DIO_GroupC,KEY_PAD_array[LOC_u8coliterator],DIO_High);
    2f70:	8a 89       	ldd	r24, Y+18	; 0x12
    2f72:	88 2f       	mov	r24, r24
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	fc 01       	movw	r30, r24
    2f78:	e8 58       	subi	r30, 0x88	; 136
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	90 81       	ld	r25, Z
    2f7e:	82 e0       	ldi	r24, 0x02	; 2
    2f80:	69 2f       	mov	r22, r25
    2f82:	41 e0       	ldi	r20, 0x01	; 1
    2f84:	0e 94 ae 0b 	call	0x175c	; 0x175c <DIO_ErrStateSetPinValue>
	u8 LOC_u8coliterator=0;
	u8 LOC_u8rowiterator=0;
	u8 LOC_u8switchpressed=0;
	u8 LOC_u8flag=0;
	u8 Result;
	for(LOC_u8coliterator=KEY_PAD_ROWSIZE;LOC_u8coliterator<(KEY_PAD_ROWSIZE+KEY_PAD_COLSIZE)&&LOC_u8flag==0;LOC_u8coliterator++)
    2f88:	8a 89       	ldd	r24, Y+18	; 0x12
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	8a 8b       	std	Y+18, r24	; 0x12
    2f8e:	8a 89       	ldd	r24, Y+18	; 0x12
    2f90:	88 30       	cpi	r24, 0x08	; 8
    2f92:	20 f4       	brcc	.+8      	; 0x2f9c <Key_Pad_u8GetButtonPressed+0x204>
    2f94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f96:	88 23       	and	r24, r24
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <Key_Pad_u8GetButtonPressed+0x204>
    2f9a:	11 cf       	rjmp	.-478    	; 0x2dbe <Key_Pad_u8GetButtonPressed+0x26>
		}
		}
		DIO_ErrStateSetPinValue(DIO_GroupC,KEY_PAD_array[LOC_u8coliterator],DIO_High);
		//at the end for each col set it at 5V
	}
*r = LOC_u8switchpressed;
    2f9c:	ec 89       	ldd	r30, Y+20	; 0x14
    2f9e:	fd 89       	ldd	r31, Y+21	; 0x15
    2fa0:	88 89       	ldd	r24, Y+16	; 0x10
    2fa2:	80 83       	st	Z, r24


}
    2fa4:	65 96       	adiw	r28, 0x15	; 21
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	08 95       	ret

00002fb6 <SevSeg_SevErrStateSetNumber>:
#include "../../Comman/definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "SevSeg_Interface.h"
#include <util/delay.h>

SevErrState SevSeg_SevErrStateSetNumber(u8 Copy_Number , SevSeg_info * SevenSegment1){
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	28 97       	sbiw	r28, 0x08	; 8
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	89 83       	std	Y+1, r24	; 0x01
    2fcc:	7b 83       	std	Y+3, r23	; 0x03
    2fce:	6a 83       	std	Y+2, r22	; 0x02
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group ,0xff);
    2fd0:	ea 81       	ldd	r30, Y+2	; 0x02
    2fd2:	fb 81       	ldd	r31, Y+3	; 0x03
    2fd4:	81 81       	ldd	r24, Z+1	; 0x01
    2fd6:	6f ef       	ldi	r22, 0xFF	; 255
    2fd8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ErrStateSetGroupDirection>
//	DIO_ErrStateSetPinDirection(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_DirectionState Copy_DirectionState);
		if (SevenSegment1->SevSeg_Type1 ==   Cathod)
    2fdc:	ea 81       	ldd	r30, Y+2	; 0x02
    2fde:	fb 81       	ldd	r31, Y+3	; 0x03
    2fe0:	80 81       	ld	r24, Z
    2fe2:	88 23       	and	r24, r24
    2fe4:	09 f0       	breq	.+2      	; 0x2fe8 <SevSeg_SevErrStateSetNumber+0x32>
    2fe6:	98 c0       	rjmp	.+304    	; 0x3118 <SevSeg_SevErrStateSetNumber+0x162>
		{

			/*Cathod -> Led On if write One*/
			switch (Copy_Number)
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	38 87       	std	Y+8, r19	; 0x08
    2ff0:	2f 83       	std	Y+7, r18	; 0x07
    2ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff4:	98 85       	ldd	r25, Y+8	; 0x08
    2ff6:	84 30       	cpi	r24, 0x04	; 4
    2ff8:	91 05       	cpc	r25, r1
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <SevSeg_SevErrStateSetNumber+0x48>
    2ffc:	5f c0       	rjmp	.+190    	; 0x30bc <SevSeg_SevErrStateSetNumber+0x106>
    2ffe:	2f 81       	ldd	r18, Y+7	; 0x07
    3000:	38 85       	ldd	r19, Y+8	; 0x08
    3002:	25 30       	cpi	r18, 0x05	; 5
    3004:	31 05       	cpc	r19, r1
    3006:	dc f4       	brge	.+54     	; 0x303e <SevSeg_SevErrStateSetNumber+0x88>
    3008:	8f 81       	ldd	r24, Y+7	; 0x07
    300a:	98 85       	ldd	r25, Y+8	; 0x08
    300c:	81 30       	cpi	r24, 0x01	; 1
    300e:	91 05       	cpc	r25, r1
    3010:	09 f4       	brne	.+2      	; 0x3014 <SevSeg_SevErrStateSetNumber+0x5e>
    3012:	3f c0       	rjmp	.+126    	; 0x3092 <SevSeg_SevErrStateSetNumber+0xdc>
    3014:	2f 81       	ldd	r18, Y+7	; 0x07
    3016:	38 85       	ldd	r19, Y+8	; 0x08
    3018:	22 30       	cpi	r18, 0x02	; 2
    301a:	31 05       	cpc	r19, r1
    301c:	2c f4       	brge	.+10     	; 0x3028 <SevSeg_SevErrStateSetNumber+0x72>
    301e:	8f 81       	ldd	r24, Y+7	; 0x07
    3020:	98 85       	ldd	r25, Y+8	; 0x08
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	79 f1       	breq	.+94     	; 0x3084 <SevSeg_SevErrStateSetNumber+0xce>
    3026:	74 c0       	rjmp	.+232    	; 0x3110 <SevSeg_SevErrStateSetNumber+0x15a>
    3028:	2f 81       	ldd	r18, Y+7	; 0x07
    302a:	38 85       	ldd	r19, Y+8	; 0x08
    302c:	22 30       	cpi	r18, 0x02	; 2
    302e:	31 05       	cpc	r19, r1
    3030:	b9 f1       	breq	.+110    	; 0x30a0 <SevSeg_SevErrStateSetNumber+0xea>
    3032:	8f 81       	ldd	r24, Y+7	; 0x07
    3034:	98 85       	ldd	r25, Y+8	; 0x08
    3036:	83 30       	cpi	r24, 0x03	; 3
    3038:	91 05       	cpc	r25, r1
    303a:	c9 f1       	breq	.+114    	; 0x30ae <SevSeg_SevErrStateSetNumber+0xf8>
    303c:	69 c0       	rjmp	.+210    	; 0x3110 <SevSeg_SevErrStateSetNumber+0x15a>
    303e:	2f 81       	ldd	r18, Y+7	; 0x07
    3040:	38 85       	ldd	r19, Y+8	; 0x08
    3042:	27 30       	cpi	r18, 0x07	; 7
    3044:	31 05       	cpc	r19, r1
    3046:	09 f4       	brne	.+2      	; 0x304a <SevSeg_SevErrStateSetNumber+0x94>
    3048:	4e c0       	rjmp	.+156    	; 0x30e6 <SevSeg_SevErrStateSetNumber+0x130>
    304a:	8f 81       	ldd	r24, Y+7	; 0x07
    304c:	98 85       	ldd	r25, Y+8	; 0x08
    304e:	88 30       	cpi	r24, 0x08	; 8
    3050:	91 05       	cpc	r25, r1
    3052:	5c f4       	brge	.+22     	; 0x306a <SevSeg_SevErrStateSetNumber+0xb4>
    3054:	2f 81       	ldd	r18, Y+7	; 0x07
    3056:	38 85       	ldd	r19, Y+8	; 0x08
    3058:	25 30       	cpi	r18, 0x05	; 5
    305a:	31 05       	cpc	r19, r1
    305c:	b1 f1       	breq	.+108    	; 0x30ca <SevSeg_SevErrStateSetNumber+0x114>
    305e:	8f 81       	ldd	r24, Y+7	; 0x07
    3060:	98 85       	ldd	r25, Y+8	; 0x08
    3062:	86 30       	cpi	r24, 0x06	; 6
    3064:	91 05       	cpc	r25, r1
    3066:	c1 f1       	breq	.+112    	; 0x30d8 <SevSeg_SevErrStateSetNumber+0x122>
    3068:	53 c0       	rjmp	.+166    	; 0x3110 <SevSeg_SevErrStateSetNumber+0x15a>
    306a:	2f 81       	ldd	r18, Y+7	; 0x07
    306c:	38 85       	ldd	r19, Y+8	; 0x08
    306e:	28 30       	cpi	r18, 0x08	; 8
    3070:	31 05       	cpc	r19, r1
    3072:	09 f4       	brne	.+2      	; 0x3076 <SevSeg_SevErrStateSetNumber+0xc0>
    3074:	3f c0       	rjmp	.+126    	; 0x30f4 <SevSeg_SevErrStateSetNumber+0x13e>
    3076:	8f 81       	ldd	r24, Y+7	; 0x07
    3078:	98 85       	ldd	r25, Y+8	; 0x08
    307a:	89 30       	cpi	r24, 0x09	; 9
    307c:	91 05       	cpc	r25, r1
    307e:	09 f4       	brne	.+2      	; 0x3082 <SevSeg_SevErrStateSetNumber+0xcc>
    3080:	40 c0       	rjmp	.+128    	; 0x3102 <SevSeg_SevErrStateSetNumber+0x14c>
    3082:	46 c0       	rjmp	.+140    	; 0x3110 <SevSeg_SevErrStateSetNumber+0x15a>
			{
					case 0:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x3F);break;
    3084:	ea 81       	ldd	r30, Y+2	; 0x02
    3086:	fb 81       	ldd	r31, Y+3	; 0x03
    3088:	81 81       	ldd	r24, Z+1	; 0x01
    308a:	6f e3       	ldi	r22, 0x3F	; 63
    308c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    3090:	41 c0       	rjmp	.+130    	; 0x3114 <SevSeg_SevErrStateSetNumber+0x15e>
					case 1:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x06);break;
    3092:	ea 81       	ldd	r30, Y+2	; 0x02
    3094:	fb 81       	ldd	r31, Y+3	; 0x03
    3096:	81 81       	ldd	r24, Z+1	; 0x01
    3098:	66 e0       	ldi	r22, 0x06	; 6
    309a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    309e:	3a c0       	rjmp	.+116    	; 0x3114 <SevSeg_SevErrStateSetNumber+0x15e>
					case 2:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x5B);break;
    30a0:	ea 81       	ldd	r30, Y+2	; 0x02
    30a2:	fb 81       	ldd	r31, Y+3	; 0x03
    30a4:	81 81       	ldd	r24, Z+1	; 0x01
    30a6:	6b e5       	ldi	r22, 0x5B	; 91
    30a8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    30ac:	33 c0       	rjmp	.+102    	; 0x3114 <SevSeg_SevErrStateSetNumber+0x15e>
					case 3:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x4F);break;
    30ae:	ea 81       	ldd	r30, Y+2	; 0x02
    30b0:	fb 81       	ldd	r31, Y+3	; 0x03
    30b2:	81 81       	ldd	r24, Z+1	; 0x01
    30b4:	6f e4       	ldi	r22, 0x4F	; 79
    30b6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    30ba:	2c c0       	rjmp	.+88     	; 0x3114 <SevSeg_SevErrStateSetNumber+0x15e>
					case 4:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x66);break;
    30bc:	ea 81       	ldd	r30, Y+2	; 0x02
    30be:	fb 81       	ldd	r31, Y+3	; 0x03
    30c0:	81 81       	ldd	r24, Z+1	; 0x01
    30c2:	66 e6       	ldi	r22, 0x66	; 102
    30c4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    30c8:	25 c0       	rjmp	.+74     	; 0x3114 <SevSeg_SevErrStateSetNumber+0x15e>
					case 5:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x6D);break;
    30ca:	ea 81       	ldd	r30, Y+2	; 0x02
    30cc:	fb 81       	ldd	r31, Y+3	; 0x03
    30ce:	81 81       	ldd	r24, Z+1	; 0x01
    30d0:	6d e6       	ldi	r22, 0x6D	; 109
    30d2:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    30d6:	1e c0       	rjmp	.+60     	; 0x3114 <SevSeg_SevErrStateSetNumber+0x15e>
					case 6:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x7D);break;
    30d8:	ea 81       	ldd	r30, Y+2	; 0x02
    30da:	fb 81       	ldd	r31, Y+3	; 0x03
    30dc:	81 81       	ldd	r24, Z+1	; 0x01
    30de:	6d e7       	ldi	r22, 0x7D	; 125
    30e0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    30e4:	17 c0       	rjmp	.+46     	; 0x3114 <SevSeg_SevErrStateSetNumber+0x15e>
					case 7:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x07);break;
    30e6:	ea 81       	ldd	r30, Y+2	; 0x02
    30e8:	fb 81       	ldd	r31, Y+3	; 0x03
    30ea:	81 81       	ldd	r24, Z+1	; 0x01
    30ec:	67 e0       	ldi	r22, 0x07	; 7
    30ee:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    30f2:	10 c0       	rjmp	.+32     	; 0x3114 <SevSeg_SevErrStateSetNumber+0x15e>
					case 8:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x7F);break;
    30f4:	ea 81       	ldd	r30, Y+2	; 0x02
    30f6:	fb 81       	ldd	r31, Y+3	; 0x03
    30f8:	81 81       	ldd	r24, Z+1	; 0x01
    30fa:	6f e7       	ldi	r22, 0x7F	; 127
    30fc:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    3100:	09 c0       	rjmp	.+18     	; 0x3114 <SevSeg_SevErrStateSetNumber+0x15e>
					case 9:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x6F);break;
    3102:	ea 81       	ldd	r30, Y+2	; 0x02
    3104:	fb 81       	ldd	r31, Y+3	; 0x03
    3106:	81 81       	ldd	r24, Z+1	; 0x01
    3108:	6f e6       	ldi	r22, 0x6F	; 111
    310a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    310e:	02 c0       	rjmp	.+4      	; 0x3114 <SevSeg_SevErrStateSetNumber+0x15e>
					default: return WrongPort;
    3110:	1e 82       	std	Y+6, r1	; 0x06
    3112:	a2 c0       	rjmp	.+324    	; 0x3258 <SevSeg_SevErrStateSetNumber+0x2a2>

			}
			return NoError;
    3114:	1e 82       	std	Y+6, r1	; 0x06
    3116:	a0 c0       	rjmp	.+320    	; 0x3258 <SevSeg_SevErrStateSetNumber+0x2a2>
		}
		else if (SevenSegment1->SevSeg_Type1 == Anode)
    3118:	ea 81       	ldd	r30, Y+2	; 0x02
    311a:	fb 81       	ldd	r31, Y+3	; 0x03
    311c:	80 81       	ld	r24, Z
    311e:	81 30       	cpi	r24, 0x01	; 1
    3120:	09 f0       	breq	.+2      	; 0x3124 <SevSeg_SevErrStateSetNumber+0x16e>
    3122:	98 c0       	rjmp	.+304    	; 0x3254 <SevSeg_SevErrStateSetNumber+0x29e>
				{

					/*Cathod -> Led On if write One*/
					switch (Copy_Number)
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	28 2f       	mov	r18, r24
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	3d 83       	std	Y+5, r19	; 0x05
    312c:	2c 83       	std	Y+4, r18	; 0x04
    312e:	8c 81       	ldd	r24, Y+4	; 0x04
    3130:	9d 81       	ldd	r25, Y+5	; 0x05
    3132:	84 30       	cpi	r24, 0x04	; 4
    3134:	91 05       	cpc	r25, r1
    3136:	09 f4       	brne	.+2      	; 0x313a <SevSeg_SevErrStateSetNumber+0x184>
    3138:	5f c0       	rjmp	.+190    	; 0x31f8 <SevSeg_SevErrStateSetNumber+0x242>
    313a:	2c 81       	ldd	r18, Y+4	; 0x04
    313c:	3d 81       	ldd	r19, Y+5	; 0x05
    313e:	25 30       	cpi	r18, 0x05	; 5
    3140:	31 05       	cpc	r19, r1
    3142:	dc f4       	brge	.+54     	; 0x317a <SevSeg_SevErrStateSetNumber+0x1c4>
    3144:	8c 81       	ldd	r24, Y+4	; 0x04
    3146:	9d 81       	ldd	r25, Y+5	; 0x05
    3148:	81 30       	cpi	r24, 0x01	; 1
    314a:	91 05       	cpc	r25, r1
    314c:	09 f4       	brne	.+2      	; 0x3150 <SevSeg_SevErrStateSetNumber+0x19a>
    314e:	3f c0       	rjmp	.+126    	; 0x31ce <SevSeg_SevErrStateSetNumber+0x218>
    3150:	2c 81       	ldd	r18, Y+4	; 0x04
    3152:	3d 81       	ldd	r19, Y+5	; 0x05
    3154:	22 30       	cpi	r18, 0x02	; 2
    3156:	31 05       	cpc	r19, r1
    3158:	2c f4       	brge	.+10     	; 0x3164 <SevSeg_SevErrStateSetNumber+0x1ae>
    315a:	8c 81       	ldd	r24, Y+4	; 0x04
    315c:	9d 81       	ldd	r25, Y+5	; 0x05
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	79 f1       	breq	.+94     	; 0x31c0 <SevSeg_SevErrStateSetNumber+0x20a>
    3162:	74 c0       	rjmp	.+232    	; 0x324c <SevSeg_SevErrStateSetNumber+0x296>
    3164:	2c 81       	ldd	r18, Y+4	; 0x04
    3166:	3d 81       	ldd	r19, Y+5	; 0x05
    3168:	22 30       	cpi	r18, 0x02	; 2
    316a:	31 05       	cpc	r19, r1
    316c:	b9 f1       	breq	.+110    	; 0x31dc <SevSeg_SevErrStateSetNumber+0x226>
    316e:	8c 81       	ldd	r24, Y+4	; 0x04
    3170:	9d 81       	ldd	r25, Y+5	; 0x05
    3172:	83 30       	cpi	r24, 0x03	; 3
    3174:	91 05       	cpc	r25, r1
    3176:	c9 f1       	breq	.+114    	; 0x31ea <SevSeg_SevErrStateSetNumber+0x234>
    3178:	69 c0       	rjmp	.+210    	; 0x324c <SevSeg_SevErrStateSetNumber+0x296>
    317a:	2c 81       	ldd	r18, Y+4	; 0x04
    317c:	3d 81       	ldd	r19, Y+5	; 0x05
    317e:	27 30       	cpi	r18, 0x07	; 7
    3180:	31 05       	cpc	r19, r1
    3182:	09 f4       	brne	.+2      	; 0x3186 <SevSeg_SevErrStateSetNumber+0x1d0>
    3184:	4e c0       	rjmp	.+156    	; 0x3222 <SevSeg_SevErrStateSetNumber+0x26c>
    3186:	8c 81       	ldd	r24, Y+4	; 0x04
    3188:	9d 81       	ldd	r25, Y+5	; 0x05
    318a:	88 30       	cpi	r24, 0x08	; 8
    318c:	91 05       	cpc	r25, r1
    318e:	5c f4       	brge	.+22     	; 0x31a6 <SevSeg_SevErrStateSetNumber+0x1f0>
    3190:	2c 81       	ldd	r18, Y+4	; 0x04
    3192:	3d 81       	ldd	r19, Y+5	; 0x05
    3194:	25 30       	cpi	r18, 0x05	; 5
    3196:	31 05       	cpc	r19, r1
    3198:	b1 f1       	breq	.+108    	; 0x3206 <SevSeg_SevErrStateSetNumber+0x250>
    319a:	8c 81       	ldd	r24, Y+4	; 0x04
    319c:	9d 81       	ldd	r25, Y+5	; 0x05
    319e:	86 30       	cpi	r24, 0x06	; 6
    31a0:	91 05       	cpc	r25, r1
    31a2:	c1 f1       	breq	.+112    	; 0x3214 <SevSeg_SevErrStateSetNumber+0x25e>
    31a4:	53 c0       	rjmp	.+166    	; 0x324c <SevSeg_SevErrStateSetNumber+0x296>
    31a6:	2c 81       	ldd	r18, Y+4	; 0x04
    31a8:	3d 81       	ldd	r19, Y+5	; 0x05
    31aa:	28 30       	cpi	r18, 0x08	; 8
    31ac:	31 05       	cpc	r19, r1
    31ae:	09 f4       	brne	.+2      	; 0x31b2 <SevSeg_SevErrStateSetNumber+0x1fc>
    31b0:	3f c0       	rjmp	.+126    	; 0x3230 <SevSeg_SevErrStateSetNumber+0x27a>
    31b2:	8c 81       	ldd	r24, Y+4	; 0x04
    31b4:	9d 81       	ldd	r25, Y+5	; 0x05
    31b6:	89 30       	cpi	r24, 0x09	; 9
    31b8:	91 05       	cpc	r25, r1
    31ba:	09 f4       	brne	.+2      	; 0x31be <SevSeg_SevErrStateSetNumber+0x208>
    31bc:	40 c0       	rjmp	.+128    	; 0x323e <SevSeg_SevErrStateSetNumber+0x288>
    31be:	46 c0       	rjmp	.+140    	; 0x324c <SevSeg_SevErrStateSetNumber+0x296>
					{
							case 0:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0xC0);break;
    31c0:	ea 81       	ldd	r30, Y+2	; 0x02
    31c2:	fb 81       	ldd	r31, Y+3	; 0x03
    31c4:	81 81       	ldd	r24, Z+1	; 0x01
    31c6:	60 ec       	ldi	r22, 0xC0	; 192
    31c8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    31cc:	41 c0       	rjmp	.+130    	; 0x3250 <SevSeg_SevErrStateSetNumber+0x29a>
							case 1:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0xF9);break;
    31ce:	ea 81       	ldd	r30, Y+2	; 0x02
    31d0:	fb 81       	ldd	r31, Y+3	; 0x03
    31d2:	81 81       	ldd	r24, Z+1	; 0x01
    31d4:	69 ef       	ldi	r22, 0xF9	; 249
    31d6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    31da:	3a c0       	rjmp	.+116    	; 0x3250 <SevSeg_SevErrStateSetNumber+0x29a>
							case 2:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0xA4);break;
    31dc:	ea 81       	ldd	r30, Y+2	; 0x02
    31de:	fb 81       	ldd	r31, Y+3	; 0x03
    31e0:	81 81       	ldd	r24, Z+1	; 0x01
    31e2:	64 ea       	ldi	r22, 0xA4	; 164
    31e4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    31e8:	33 c0       	rjmp	.+102    	; 0x3250 <SevSeg_SevErrStateSetNumber+0x29a>
							case 3:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0xB0);break;
    31ea:	ea 81       	ldd	r30, Y+2	; 0x02
    31ec:	fb 81       	ldd	r31, Y+3	; 0x03
    31ee:	81 81       	ldd	r24, Z+1	; 0x01
    31f0:	60 eb       	ldi	r22, 0xB0	; 176
    31f2:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    31f6:	2c c0       	rjmp	.+88     	; 0x3250 <SevSeg_SevErrStateSetNumber+0x29a>
							case 4:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x99);break;
    31f8:	ea 81       	ldd	r30, Y+2	; 0x02
    31fa:	fb 81       	ldd	r31, Y+3	; 0x03
    31fc:	81 81       	ldd	r24, Z+1	; 0x01
    31fe:	69 e9       	ldi	r22, 0x99	; 153
    3200:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    3204:	25 c0       	rjmp	.+74     	; 0x3250 <SevSeg_SevErrStateSetNumber+0x29a>
							case 5:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x92);break;
    3206:	ea 81       	ldd	r30, Y+2	; 0x02
    3208:	fb 81       	ldd	r31, Y+3	; 0x03
    320a:	81 81       	ldd	r24, Z+1	; 0x01
    320c:	62 e9       	ldi	r22, 0x92	; 146
    320e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    3212:	1e c0       	rjmp	.+60     	; 0x3250 <SevSeg_SevErrStateSetNumber+0x29a>
							case 6:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x82);break;
    3214:	ea 81       	ldd	r30, Y+2	; 0x02
    3216:	fb 81       	ldd	r31, Y+3	; 0x03
    3218:	81 81       	ldd	r24, Z+1	; 0x01
    321a:	62 e8       	ldi	r22, 0x82	; 130
    321c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    3220:	17 c0       	rjmp	.+46     	; 0x3250 <SevSeg_SevErrStateSetNumber+0x29a>
							case 7:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0xF8);break;
    3222:	ea 81       	ldd	r30, Y+2	; 0x02
    3224:	fb 81       	ldd	r31, Y+3	; 0x03
    3226:	81 81       	ldd	r24, Z+1	; 0x01
    3228:	68 ef       	ldi	r22, 0xF8	; 248
    322a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    322e:	10 c0       	rjmp	.+32     	; 0x3250 <SevSeg_SevErrStateSetNumber+0x29a>
							case 8:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x00);break;
    3230:	ea 81       	ldd	r30, Y+2	; 0x02
    3232:	fb 81       	ldd	r31, Y+3	; 0x03
    3234:	81 81       	ldd	r24, Z+1	; 0x01
    3236:	60 e0       	ldi	r22, 0x00	; 0
    3238:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    323c:	09 c0       	rjmp	.+18     	; 0x3250 <SevSeg_SevErrStateSetNumber+0x29a>
							case 9:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x90);break;
    323e:	ea 81       	ldd	r30, Y+2	; 0x02
    3240:	fb 81       	ldd	r31, Y+3	; 0x03
    3242:	81 81       	ldd	r24, Z+1	; 0x01
    3244:	60 e9       	ldi	r22, 0x90	; 144
    3246:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <SevSeg_SevErrStateSetNumber+0x29a>
							default: return WrongPort;
    324c:	1e 82       	std	Y+6, r1	; 0x06
    324e:	04 c0       	rjmp	.+8      	; 0x3258 <SevSeg_SevErrStateSetNumber+0x2a2>
					}

					return NoError;
    3250:	1e 82       	std	Y+6, r1	; 0x06
    3252:	02 c0       	rjmp	.+4      	; 0x3258 <SevSeg_SevErrStateSetNumber+0x2a2>
				}
		else {
			return WrongType;
    3254:	91 e0       	ldi	r25, 0x01	; 1
    3256:	9e 83       	std	Y+6, r25	; 0x06
    3258:	8e 81       	ldd	r24, Y+6	; 0x06
		     }

}
    325a:	28 96       	adiw	r28, 0x08	; 8
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	de bf       	out	0x3e, r29	; 62
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	cd bf       	out	0x3d, r28	; 61
    3266:	cf 91       	pop	r28
    3268:	df 91       	pop	r29
    326a:	08 95       	ret

0000326c <SevSeg_SevErrStateDisplayRange>:

SevErrState SevSeg_SevErrStateDisplayRange(SevSeg_info *SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	a9 97       	sbiw	r28, 0x29	; 41
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	f8 94       	cli
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	cd bf       	out	0x3d, r28	; 61
    3280:	9a a3       	std	Y+34, r25	; 0x22
    3282:	89 a3       	std	Y+33, r24	; 0x21
    3284:	6b a3       	std	Y+35, r22	; 0x23
    3286:	4c a3       	std	Y+36, r20	; 0x24
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group ,0xff);
    3288:	e9 a1       	ldd	r30, Y+33	; 0x21
    328a:	fa a1       	ldd	r31, Y+34	; 0x22
    328c:	81 81       	ldd	r24, Z+1	; 0x01
    328e:	6f ef       	ldi	r22, 0xFF	; 255
    3290:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ErrStateSetGroupDirection>
	if (SevenSegment1->SevSeg_Type1 ==   Cathod)
    3294:	e9 a1       	ldd	r30, Y+33	; 0x21
    3296:	fa a1       	ldd	r31, Y+34	; 0x22
    3298:	80 81       	ld	r24, Z
    329a:	88 23       	and	r24, r24
    329c:	09 f0       	breq	.+2      	; 0x32a0 <SevSeg_SevErrStateDisplayRange+0x34>
    329e:	1d c1       	rjmp	.+570    	; 0x34da <SevSeg_SevErrStateDisplayRange+0x26e>
			{
		for (int i =Copy_start; i<=Copy_End; i++ )
    32a0:	8b a1       	ldd	r24, Y+35	; 0x23
    32a2:	88 2f       	mov	r24, r24
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	98 a3       	std	Y+32, r25	; 0x20
    32a8:	8f 8f       	std	Y+31, r24	; 0x1f
    32aa:	0c c1       	rjmp	.+536    	; 0x34c4 <SevSeg_SevErrStateDisplayRange+0x258>
		{
				switch (i)
    32ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32ae:	98 a1       	ldd	r25, Y+32	; 0x20
    32b0:	9f a3       	std	Y+39, r25	; 0x27
    32b2:	8e a3       	std	Y+38, r24	; 0x26
    32b4:	8e a1       	ldd	r24, Y+38	; 0x26
    32b6:	9f a1       	ldd	r25, Y+39	; 0x27
    32b8:	84 30       	cpi	r24, 0x04	; 4
    32ba:	91 05       	cpc	r25, r1
    32bc:	09 f4       	brne	.+2      	; 0x32c0 <SevSeg_SevErrStateDisplayRange+0x54>
    32be:	5f c0       	rjmp	.+190    	; 0x337e <SevSeg_SevErrStateDisplayRange+0x112>
    32c0:	8e a1       	ldd	r24, Y+38	; 0x26
    32c2:	9f a1       	ldd	r25, Y+39	; 0x27
    32c4:	85 30       	cpi	r24, 0x05	; 5
    32c6:	91 05       	cpc	r25, r1
    32c8:	dc f4       	brge	.+54     	; 0x3300 <SevSeg_SevErrStateDisplayRange+0x94>
    32ca:	8e a1       	ldd	r24, Y+38	; 0x26
    32cc:	9f a1       	ldd	r25, Y+39	; 0x27
    32ce:	81 30       	cpi	r24, 0x01	; 1
    32d0:	91 05       	cpc	r25, r1
    32d2:	09 f4       	brne	.+2      	; 0x32d6 <SevSeg_SevErrStateDisplayRange+0x6a>
    32d4:	3f c0       	rjmp	.+126    	; 0x3354 <SevSeg_SevErrStateDisplayRange+0xe8>
    32d6:	8e a1       	ldd	r24, Y+38	; 0x26
    32d8:	9f a1       	ldd	r25, Y+39	; 0x27
    32da:	82 30       	cpi	r24, 0x02	; 2
    32dc:	91 05       	cpc	r25, r1
    32de:	2c f4       	brge	.+10     	; 0x32ea <SevSeg_SevErrStateDisplayRange+0x7e>
    32e0:	8e a1       	ldd	r24, Y+38	; 0x26
    32e2:	9f a1       	ldd	r25, Y+39	; 0x27
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	79 f1       	breq	.+94     	; 0x3346 <SevSeg_SevErrStateDisplayRange+0xda>
    32e8:	74 c0       	rjmp	.+232    	; 0x33d2 <SevSeg_SevErrStateDisplayRange+0x166>
    32ea:	8e a1       	ldd	r24, Y+38	; 0x26
    32ec:	9f a1       	ldd	r25, Y+39	; 0x27
    32ee:	82 30       	cpi	r24, 0x02	; 2
    32f0:	91 05       	cpc	r25, r1
    32f2:	b9 f1       	breq	.+110    	; 0x3362 <SevSeg_SevErrStateDisplayRange+0xf6>
    32f4:	8e a1       	ldd	r24, Y+38	; 0x26
    32f6:	9f a1       	ldd	r25, Y+39	; 0x27
    32f8:	83 30       	cpi	r24, 0x03	; 3
    32fa:	91 05       	cpc	r25, r1
    32fc:	c9 f1       	breq	.+114    	; 0x3370 <SevSeg_SevErrStateDisplayRange+0x104>
    32fe:	69 c0       	rjmp	.+210    	; 0x33d2 <SevSeg_SevErrStateDisplayRange+0x166>
    3300:	8e a1       	ldd	r24, Y+38	; 0x26
    3302:	9f a1       	ldd	r25, Y+39	; 0x27
    3304:	87 30       	cpi	r24, 0x07	; 7
    3306:	91 05       	cpc	r25, r1
    3308:	09 f4       	brne	.+2      	; 0x330c <SevSeg_SevErrStateDisplayRange+0xa0>
    330a:	4e c0       	rjmp	.+156    	; 0x33a8 <SevSeg_SevErrStateDisplayRange+0x13c>
    330c:	8e a1       	ldd	r24, Y+38	; 0x26
    330e:	9f a1       	ldd	r25, Y+39	; 0x27
    3310:	88 30       	cpi	r24, 0x08	; 8
    3312:	91 05       	cpc	r25, r1
    3314:	5c f4       	brge	.+22     	; 0x332c <SevSeg_SevErrStateDisplayRange+0xc0>
    3316:	8e a1       	ldd	r24, Y+38	; 0x26
    3318:	9f a1       	ldd	r25, Y+39	; 0x27
    331a:	85 30       	cpi	r24, 0x05	; 5
    331c:	91 05       	cpc	r25, r1
    331e:	b1 f1       	breq	.+108    	; 0x338c <SevSeg_SevErrStateDisplayRange+0x120>
    3320:	8e a1       	ldd	r24, Y+38	; 0x26
    3322:	9f a1       	ldd	r25, Y+39	; 0x27
    3324:	86 30       	cpi	r24, 0x06	; 6
    3326:	91 05       	cpc	r25, r1
    3328:	c1 f1       	breq	.+112    	; 0x339a <SevSeg_SevErrStateDisplayRange+0x12e>
    332a:	53 c0       	rjmp	.+166    	; 0x33d2 <SevSeg_SevErrStateDisplayRange+0x166>
    332c:	8e a1       	ldd	r24, Y+38	; 0x26
    332e:	9f a1       	ldd	r25, Y+39	; 0x27
    3330:	88 30       	cpi	r24, 0x08	; 8
    3332:	91 05       	cpc	r25, r1
    3334:	09 f4       	brne	.+2      	; 0x3338 <SevSeg_SevErrStateDisplayRange+0xcc>
    3336:	3f c0       	rjmp	.+126    	; 0x33b6 <SevSeg_SevErrStateDisplayRange+0x14a>
    3338:	8e a1       	ldd	r24, Y+38	; 0x26
    333a:	9f a1       	ldd	r25, Y+39	; 0x27
    333c:	89 30       	cpi	r24, 0x09	; 9
    333e:	91 05       	cpc	r25, r1
    3340:	09 f4       	brne	.+2      	; 0x3344 <SevSeg_SevErrStateDisplayRange+0xd8>
    3342:	40 c0       	rjmp	.+128    	; 0x33c4 <SevSeg_SevErrStateDisplayRange+0x158>
    3344:	46 c0       	rjmp	.+140    	; 0x33d2 <SevSeg_SevErrStateDisplayRange+0x166>
				{
						case 0:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x3F);break;
    3346:	e9 a1       	ldd	r30, Y+33	; 0x21
    3348:	fa a1       	ldd	r31, Y+34	; 0x22
    334a:	81 81       	ldd	r24, Z+1	; 0x01
    334c:	6f e3       	ldi	r22, 0x3F	; 63
    334e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    3352:	41 c0       	rjmp	.+130    	; 0x33d6 <SevSeg_SevErrStateDisplayRange+0x16a>
						case 1:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x06);break;
    3354:	e9 a1       	ldd	r30, Y+33	; 0x21
    3356:	fa a1       	ldd	r31, Y+34	; 0x22
    3358:	81 81       	ldd	r24, Z+1	; 0x01
    335a:	66 e0       	ldi	r22, 0x06	; 6
    335c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    3360:	3a c0       	rjmp	.+116    	; 0x33d6 <SevSeg_SevErrStateDisplayRange+0x16a>
						case 2:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x5B);break;
    3362:	e9 a1       	ldd	r30, Y+33	; 0x21
    3364:	fa a1       	ldd	r31, Y+34	; 0x22
    3366:	81 81       	ldd	r24, Z+1	; 0x01
    3368:	6b e5       	ldi	r22, 0x5B	; 91
    336a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    336e:	33 c0       	rjmp	.+102    	; 0x33d6 <SevSeg_SevErrStateDisplayRange+0x16a>
						case 3:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x4F);break;
    3370:	e9 a1       	ldd	r30, Y+33	; 0x21
    3372:	fa a1       	ldd	r31, Y+34	; 0x22
    3374:	81 81       	ldd	r24, Z+1	; 0x01
    3376:	6f e4       	ldi	r22, 0x4F	; 79
    3378:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    337c:	2c c0       	rjmp	.+88     	; 0x33d6 <SevSeg_SevErrStateDisplayRange+0x16a>
						case 4:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x66);break;
    337e:	e9 a1       	ldd	r30, Y+33	; 0x21
    3380:	fa a1       	ldd	r31, Y+34	; 0x22
    3382:	81 81       	ldd	r24, Z+1	; 0x01
    3384:	66 e6       	ldi	r22, 0x66	; 102
    3386:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    338a:	25 c0       	rjmp	.+74     	; 0x33d6 <SevSeg_SevErrStateDisplayRange+0x16a>
						case 5:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x6D);break;
    338c:	e9 a1       	ldd	r30, Y+33	; 0x21
    338e:	fa a1       	ldd	r31, Y+34	; 0x22
    3390:	81 81       	ldd	r24, Z+1	; 0x01
    3392:	6d e6       	ldi	r22, 0x6D	; 109
    3394:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    3398:	1e c0       	rjmp	.+60     	; 0x33d6 <SevSeg_SevErrStateDisplayRange+0x16a>
						case 6:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x7D);break;
    339a:	e9 a1       	ldd	r30, Y+33	; 0x21
    339c:	fa a1       	ldd	r31, Y+34	; 0x22
    339e:	81 81       	ldd	r24, Z+1	; 0x01
    33a0:	6d e7       	ldi	r22, 0x7D	; 125
    33a2:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    33a6:	17 c0       	rjmp	.+46     	; 0x33d6 <SevSeg_SevErrStateDisplayRange+0x16a>
						case 7:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x07);break;
    33a8:	e9 a1       	ldd	r30, Y+33	; 0x21
    33aa:	fa a1       	ldd	r31, Y+34	; 0x22
    33ac:	81 81       	ldd	r24, Z+1	; 0x01
    33ae:	67 e0       	ldi	r22, 0x07	; 7
    33b0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    33b4:	10 c0       	rjmp	.+32     	; 0x33d6 <SevSeg_SevErrStateDisplayRange+0x16a>
						case 8:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x7F);break;
    33b6:	e9 a1       	ldd	r30, Y+33	; 0x21
    33b8:	fa a1       	ldd	r31, Y+34	; 0x22
    33ba:	81 81       	ldd	r24, Z+1	; 0x01
    33bc:	6f e7       	ldi	r22, 0x7F	; 127
    33be:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    33c2:	09 c0       	rjmp	.+18     	; 0x33d6 <SevSeg_SevErrStateDisplayRange+0x16a>
						case 9:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x6F);break;
    33c4:	e9 a1       	ldd	r30, Y+33	; 0x21
    33c6:	fa a1       	ldd	r31, Y+34	; 0x22
    33c8:	81 81       	ldd	r24, Z+1	; 0x01
    33ca:	6f e6       	ldi	r22, 0x6F	; 111
    33cc:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <SevSeg_SevErrStateDisplayRange+0x16a>
						default: return WrongPort;
    33d2:	1d a2       	std	Y+37, r1	; 0x25
    33d4:	a7 c1       	rjmp	.+846    	; 0x3724 <SevSeg_SevErrStateDisplayRange+0x4b8>
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	aa ef       	ldi	r26, 0xFA	; 250
    33dc:	b3 e4       	ldi	r27, 0x43	; 67
    33de:	89 8f       	std	Y+25, r24	; 0x19
    33e0:	9a 8f       	std	Y+26, r25	; 0x1a
    33e2:	ab 8f       	std	Y+27, r26	; 0x1b
    33e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e6:	69 8d       	ldd	r22, Y+25	; 0x19
    33e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	4a ef       	ldi	r20, 0xFA	; 250
    33f4:	54 e4       	ldi	r21, 0x44	; 68
    33f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	8d 8b       	std	Y+21, r24	; 0x15
    3400:	9e 8b       	std	Y+22, r25	; 0x16
    3402:	af 8b       	std	Y+23, r26	; 0x17
    3404:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3406:	6d 89       	ldd	r22, Y+21	; 0x15
    3408:	7e 89       	ldd	r23, Y+22	; 0x16
    340a:	8f 89       	ldd	r24, Y+23	; 0x17
    340c:	98 8d       	ldd	r25, Y+24	; 0x18
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e8       	ldi	r20, 0x80	; 128
    3414:	5f e3       	ldi	r21, 0x3F	; 63
    3416:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    341a:	88 23       	and	r24, r24
    341c:	2c f4       	brge	.+10     	; 0x3428 <SevSeg_SevErrStateDisplayRange+0x1bc>
		__ticks = 1;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	9c 8b       	std	Y+20, r25	; 0x14
    3424:	8b 8b       	std	Y+19, r24	; 0x13
    3426:	3f c0       	rjmp	.+126    	; 0x34a6 <SevSeg_SevErrStateDisplayRange+0x23a>
	else if (__tmp > 65535)
    3428:	6d 89       	ldd	r22, Y+21	; 0x15
    342a:	7e 89       	ldd	r23, Y+22	; 0x16
    342c:	8f 89       	ldd	r24, Y+23	; 0x17
    342e:	98 8d       	ldd	r25, Y+24	; 0x18
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	3f ef       	ldi	r19, 0xFF	; 255
    3434:	4f e7       	ldi	r20, 0x7F	; 127
    3436:	57 e4       	ldi	r21, 0x47	; 71
    3438:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    343c:	18 16       	cp	r1, r24
    343e:	4c f5       	brge	.+82     	; 0x3492 <SevSeg_SevErrStateDisplayRange+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3440:	69 8d       	ldd	r22, Y+25	; 0x19
    3442:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3446:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e2       	ldi	r20, 0x20	; 32
    344e:	51 e4       	ldi	r21, 0x41	; 65
    3450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	bc 01       	movw	r22, r24
    345a:	cd 01       	movw	r24, r26
    345c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	9c 8b       	std	Y+20, r25	; 0x14
    3466:	8b 8b       	std	Y+19, r24	; 0x13
    3468:	0f c0       	rjmp	.+30     	; 0x3488 <SevSeg_SevErrStateDisplayRange+0x21c>
    346a:	88 ec       	ldi	r24, 0xC8	; 200
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	9a 8b       	std	Y+18, r25	; 0x12
    3470:	89 8b       	std	Y+17, r24	; 0x11
    3472:	89 89       	ldd	r24, Y+17	; 0x11
    3474:	9a 89       	ldd	r25, Y+18	; 0x12
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	f1 f7       	brne	.-4      	; 0x3476 <SevSeg_SevErrStateDisplayRange+0x20a>
    347a:	9a 8b       	std	Y+18, r25	; 0x12
    347c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347e:	8b 89       	ldd	r24, Y+19	; 0x13
    3480:	9c 89       	ldd	r25, Y+20	; 0x14
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	9c 8b       	std	Y+20, r25	; 0x14
    3486:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3488:	8b 89       	ldd	r24, Y+19	; 0x13
    348a:	9c 89       	ldd	r25, Y+20	; 0x14
    348c:	00 97       	sbiw	r24, 0x00	; 0
    348e:	69 f7       	brne	.-38     	; 0x346a <SevSeg_SevErrStateDisplayRange+0x1fe>
    3490:	14 c0       	rjmp	.+40     	; 0x34ba <SevSeg_SevErrStateDisplayRange+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3492:	6d 89       	ldd	r22, Y+21	; 0x15
    3494:	7e 89       	ldd	r23, Y+22	; 0x16
    3496:	8f 89       	ldd	r24, Y+23	; 0x17
    3498:	98 8d       	ldd	r25, Y+24	; 0x18
    349a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	9c 8b       	std	Y+20, r25	; 0x14
    34a4:	8b 8b       	std	Y+19, r24	; 0x13
    34a6:	8b 89       	ldd	r24, Y+19	; 0x13
    34a8:	9c 89       	ldd	r25, Y+20	; 0x14
    34aa:	98 8b       	std	Y+16, r25	; 0x10
    34ac:	8f 87       	std	Y+15, r24	; 0x0f
    34ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    34b0:	98 89       	ldd	r25, Y+16	; 0x10
    34b2:	01 97       	sbiw	r24, 0x01	; 1
    34b4:	f1 f7       	brne	.-4      	; 0x34b2 <SevSeg_SevErrStateDisplayRange+0x246>
    34b6:	98 8b       	std	Y+16, r25	; 0x10
    34b8:	8f 87       	std	Y+15, r24	; 0x0f
SevErrState SevSeg_SevErrStateDisplayRange(SevSeg_info *SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group ,0xff);
	if (SevenSegment1->SevSeg_Type1 ==   Cathod)
			{
		for (int i =Copy_start; i<=Copy_End; i++ )
    34ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34bc:	98 a1       	ldd	r25, Y+32	; 0x20
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	98 a3       	std	Y+32, r25	; 0x20
    34c2:	8f 8f       	std	Y+31, r24	; 0x1f
    34c4:	8c a1       	ldd	r24, Y+36	; 0x24
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34cc:	98 a1       	ldd	r25, Y+32	; 0x20
    34ce:	28 17       	cp	r18, r24
    34d0:	39 07       	cpc	r19, r25
    34d2:	0c f0       	brlt	.+2      	; 0x34d6 <SevSeg_SevErrStateDisplayRange+0x26a>
    34d4:	eb ce       	rjmp	.-554    	; 0x32ac <SevSeg_SevErrStateDisplayRange+0x40>

				}
				_delay_ms(500);

		}
		return NoError;
    34d6:	1d a2       	std	Y+37, r1	; 0x25
    34d8:	25 c1       	rjmp	.+586    	; 0x3724 <SevSeg_SevErrStateDisplayRange+0x4b8>
			}
			else if (SevenSegment1->SevSeg_Type1 == Anode)
    34da:	e9 a1       	ldd	r30, Y+33	; 0x21
    34dc:	fa a1       	ldd	r31, Y+34	; 0x22
    34de:	80 81       	ld	r24, Z
    34e0:	81 30       	cpi	r24, 0x01	; 1
    34e2:	09 f0       	breq	.+2      	; 0x34e6 <SevSeg_SevErrStateDisplayRange+0x27a>
    34e4:	1d c1       	rjmp	.+570    	; 0x3720 <SevSeg_SevErrStateDisplayRange+0x4b4>
					{
				for (int i =Copy_start; i<=Copy_End; i++ )
    34e6:	8b a1       	ldd	r24, Y+35	; 0x23
    34e8:	88 2f       	mov	r24, r24
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	9e 8f       	std	Y+30, r25	; 0x1e
    34ee:	8d 8f       	std	Y+29, r24	; 0x1d
    34f0:	0c c1       	rjmp	.+536    	; 0x370a <SevSeg_SevErrStateDisplayRange+0x49e>
					{
							switch (i)
    34f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34f6:	99 a7       	std	Y+41, r25	; 0x29
    34f8:	88 a7       	std	Y+40, r24	; 0x28
    34fa:	88 a5       	ldd	r24, Y+40	; 0x28
    34fc:	99 a5       	ldd	r25, Y+41	; 0x29
    34fe:	84 30       	cpi	r24, 0x04	; 4
    3500:	91 05       	cpc	r25, r1
    3502:	09 f4       	brne	.+2      	; 0x3506 <SevSeg_SevErrStateDisplayRange+0x29a>
    3504:	5f c0       	rjmp	.+190    	; 0x35c4 <SevSeg_SevErrStateDisplayRange+0x358>
    3506:	88 a5       	ldd	r24, Y+40	; 0x28
    3508:	99 a5       	ldd	r25, Y+41	; 0x29
    350a:	85 30       	cpi	r24, 0x05	; 5
    350c:	91 05       	cpc	r25, r1
    350e:	dc f4       	brge	.+54     	; 0x3546 <SevSeg_SevErrStateDisplayRange+0x2da>
    3510:	88 a5       	ldd	r24, Y+40	; 0x28
    3512:	99 a5       	ldd	r25, Y+41	; 0x29
    3514:	81 30       	cpi	r24, 0x01	; 1
    3516:	91 05       	cpc	r25, r1
    3518:	09 f4       	brne	.+2      	; 0x351c <SevSeg_SevErrStateDisplayRange+0x2b0>
    351a:	3f c0       	rjmp	.+126    	; 0x359a <SevSeg_SevErrStateDisplayRange+0x32e>
    351c:	88 a5       	ldd	r24, Y+40	; 0x28
    351e:	99 a5       	ldd	r25, Y+41	; 0x29
    3520:	82 30       	cpi	r24, 0x02	; 2
    3522:	91 05       	cpc	r25, r1
    3524:	2c f4       	brge	.+10     	; 0x3530 <SevSeg_SevErrStateDisplayRange+0x2c4>
    3526:	88 a5       	ldd	r24, Y+40	; 0x28
    3528:	99 a5       	ldd	r25, Y+41	; 0x29
    352a:	00 97       	sbiw	r24, 0x00	; 0
    352c:	79 f1       	breq	.+94     	; 0x358c <SevSeg_SevErrStateDisplayRange+0x320>
    352e:	74 c0       	rjmp	.+232    	; 0x3618 <SevSeg_SevErrStateDisplayRange+0x3ac>
    3530:	88 a5       	ldd	r24, Y+40	; 0x28
    3532:	99 a5       	ldd	r25, Y+41	; 0x29
    3534:	82 30       	cpi	r24, 0x02	; 2
    3536:	91 05       	cpc	r25, r1
    3538:	b9 f1       	breq	.+110    	; 0x35a8 <SevSeg_SevErrStateDisplayRange+0x33c>
    353a:	88 a5       	ldd	r24, Y+40	; 0x28
    353c:	99 a5       	ldd	r25, Y+41	; 0x29
    353e:	83 30       	cpi	r24, 0x03	; 3
    3540:	91 05       	cpc	r25, r1
    3542:	c9 f1       	breq	.+114    	; 0x35b6 <SevSeg_SevErrStateDisplayRange+0x34a>
    3544:	69 c0       	rjmp	.+210    	; 0x3618 <SevSeg_SevErrStateDisplayRange+0x3ac>
    3546:	88 a5       	ldd	r24, Y+40	; 0x28
    3548:	99 a5       	ldd	r25, Y+41	; 0x29
    354a:	87 30       	cpi	r24, 0x07	; 7
    354c:	91 05       	cpc	r25, r1
    354e:	09 f4       	brne	.+2      	; 0x3552 <SevSeg_SevErrStateDisplayRange+0x2e6>
    3550:	4e c0       	rjmp	.+156    	; 0x35ee <SevSeg_SevErrStateDisplayRange+0x382>
    3552:	88 a5       	ldd	r24, Y+40	; 0x28
    3554:	99 a5       	ldd	r25, Y+41	; 0x29
    3556:	88 30       	cpi	r24, 0x08	; 8
    3558:	91 05       	cpc	r25, r1
    355a:	5c f4       	brge	.+22     	; 0x3572 <SevSeg_SevErrStateDisplayRange+0x306>
    355c:	88 a5       	ldd	r24, Y+40	; 0x28
    355e:	99 a5       	ldd	r25, Y+41	; 0x29
    3560:	85 30       	cpi	r24, 0x05	; 5
    3562:	91 05       	cpc	r25, r1
    3564:	b1 f1       	breq	.+108    	; 0x35d2 <SevSeg_SevErrStateDisplayRange+0x366>
    3566:	88 a5       	ldd	r24, Y+40	; 0x28
    3568:	99 a5       	ldd	r25, Y+41	; 0x29
    356a:	86 30       	cpi	r24, 0x06	; 6
    356c:	91 05       	cpc	r25, r1
    356e:	c1 f1       	breq	.+112    	; 0x35e0 <SevSeg_SevErrStateDisplayRange+0x374>
    3570:	53 c0       	rjmp	.+166    	; 0x3618 <SevSeg_SevErrStateDisplayRange+0x3ac>
    3572:	88 a5       	ldd	r24, Y+40	; 0x28
    3574:	99 a5       	ldd	r25, Y+41	; 0x29
    3576:	88 30       	cpi	r24, 0x08	; 8
    3578:	91 05       	cpc	r25, r1
    357a:	09 f4       	brne	.+2      	; 0x357e <SevSeg_SevErrStateDisplayRange+0x312>
    357c:	3f c0       	rjmp	.+126    	; 0x35fc <SevSeg_SevErrStateDisplayRange+0x390>
    357e:	88 a5       	ldd	r24, Y+40	; 0x28
    3580:	99 a5       	ldd	r25, Y+41	; 0x29
    3582:	89 30       	cpi	r24, 0x09	; 9
    3584:	91 05       	cpc	r25, r1
    3586:	09 f4       	brne	.+2      	; 0x358a <SevSeg_SevErrStateDisplayRange+0x31e>
    3588:	40 c0       	rjmp	.+128    	; 0x360a <SevSeg_SevErrStateDisplayRange+0x39e>
    358a:	46 c0       	rjmp	.+140    	; 0x3618 <SevSeg_SevErrStateDisplayRange+0x3ac>
							{
								case 0:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0xC0);break;
    358c:	e9 a1       	ldd	r30, Y+33	; 0x21
    358e:	fa a1       	ldd	r31, Y+34	; 0x22
    3590:	81 81       	ldd	r24, Z+1	; 0x01
    3592:	60 ec       	ldi	r22, 0xC0	; 192
    3594:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    3598:	41 c0       	rjmp	.+130    	; 0x361c <SevSeg_SevErrStateDisplayRange+0x3b0>
								case 1:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0xF9);break;
    359a:	e9 a1       	ldd	r30, Y+33	; 0x21
    359c:	fa a1       	ldd	r31, Y+34	; 0x22
    359e:	81 81       	ldd	r24, Z+1	; 0x01
    35a0:	69 ef       	ldi	r22, 0xF9	; 249
    35a2:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    35a6:	3a c0       	rjmp	.+116    	; 0x361c <SevSeg_SevErrStateDisplayRange+0x3b0>
								case 2:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0xA4);break;
    35a8:	e9 a1       	ldd	r30, Y+33	; 0x21
    35aa:	fa a1       	ldd	r31, Y+34	; 0x22
    35ac:	81 81       	ldd	r24, Z+1	; 0x01
    35ae:	64 ea       	ldi	r22, 0xA4	; 164
    35b0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    35b4:	33 c0       	rjmp	.+102    	; 0x361c <SevSeg_SevErrStateDisplayRange+0x3b0>
								case 3:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0xB0);break;
    35b6:	e9 a1       	ldd	r30, Y+33	; 0x21
    35b8:	fa a1       	ldd	r31, Y+34	; 0x22
    35ba:	81 81       	ldd	r24, Z+1	; 0x01
    35bc:	60 eb       	ldi	r22, 0xB0	; 176
    35be:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    35c2:	2c c0       	rjmp	.+88     	; 0x361c <SevSeg_SevErrStateDisplayRange+0x3b0>
								case 4:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x99);break;
    35c4:	e9 a1       	ldd	r30, Y+33	; 0x21
    35c6:	fa a1       	ldd	r31, Y+34	; 0x22
    35c8:	81 81       	ldd	r24, Z+1	; 0x01
    35ca:	69 e9       	ldi	r22, 0x99	; 153
    35cc:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    35d0:	25 c0       	rjmp	.+74     	; 0x361c <SevSeg_SevErrStateDisplayRange+0x3b0>
								case 5:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x92);break;
    35d2:	e9 a1       	ldd	r30, Y+33	; 0x21
    35d4:	fa a1       	ldd	r31, Y+34	; 0x22
    35d6:	81 81       	ldd	r24, Z+1	; 0x01
    35d8:	62 e9       	ldi	r22, 0x92	; 146
    35da:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    35de:	1e c0       	rjmp	.+60     	; 0x361c <SevSeg_SevErrStateDisplayRange+0x3b0>
								case 6:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x82);break;
    35e0:	e9 a1       	ldd	r30, Y+33	; 0x21
    35e2:	fa a1       	ldd	r31, Y+34	; 0x22
    35e4:	81 81       	ldd	r24, Z+1	; 0x01
    35e6:	62 e8       	ldi	r22, 0x82	; 130
    35e8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    35ec:	17 c0       	rjmp	.+46     	; 0x361c <SevSeg_SevErrStateDisplayRange+0x3b0>
								case 7:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0xF8);break;
    35ee:	e9 a1       	ldd	r30, Y+33	; 0x21
    35f0:	fa a1       	ldd	r31, Y+34	; 0x22
    35f2:	81 81       	ldd	r24, Z+1	; 0x01
    35f4:	68 ef       	ldi	r22, 0xF8	; 248
    35f6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    35fa:	10 c0       	rjmp	.+32     	; 0x361c <SevSeg_SevErrStateDisplayRange+0x3b0>
								case 8:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x00);break;
    35fc:	e9 a1       	ldd	r30, Y+33	; 0x21
    35fe:	fa a1       	ldd	r31, Y+34	; 0x22
    3600:	81 81       	ldd	r24, Z+1	; 0x01
    3602:	60 e0       	ldi	r22, 0x00	; 0
    3604:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    3608:	09 c0       	rjmp	.+18     	; 0x361c <SevSeg_SevErrStateDisplayRange+0x3b0>
								case 9:DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group ,0x90);break;
    360a:	e9 a1       	ldd	r30, Y+33	; 0x21
    360c:	fa a1       	ldd	r31, Y+34	; 0x22
    360e:	81 81       	ldd	r24, Z+1	; 0x01
    3610:	60 e9       	ldi	r22, 0x90	; 144
    3612:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_ErrStateSetGroupValue>
    3616:	02 c0       	rjmp	.+4      	; 0x361c <SevSeg_SevErrStateDisplayRange+0x3b0>
								default: return WrongPort;
    3618:	1d a2       	std	Y+37, r1	; 0x25
    361a:	84 c0       	rjmp	.+264    	; 0x3724 <SevSeg_SevErrStateDisplayRange+0x4b8>
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	aa ef       	ldi	r26, 0xFA	; 250
    3622:	b3 e4       	ldi	r27, 0x43	; 67
    3624:	8b 87       	std	Y+11, r24	; 0x0b
    3626:	9c 87       	std	Y+12, r25	; 0x0c
    3628:	ad 87       	std	Y+13, r26	; 0x0d
    362a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    362c:	6b 85       	ldd	r22, Y+11	; 0x0b
    362e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3630:	8d 85       	ldd	r24, Y+13	; 0x0d
    3632:	9e 85       	ldd	r25, Y+14	; 0x0e
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	4a ef       	ldi	r20, 0xFA	; 250
    363a:	54 e4       	ldi	r21, 0x44	; 68
    363c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	8f 83       	std	Y+7, r24	; 0x07
    3646:	98 87       	std	Y+8, r25	; 0x08
    3648:	a9 87       	std	Y+9, r26	; 0x09
    364a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    364c:	6f 81       	ldd	r22, Y+7	; 0x07
    364e:	78 85       	ldd	r23, Y+8	; 0x08
    3650:	89 85       	ldd	r24, Y+9	; 0x09
    3652:	9a 85       	ldd	r25, Y+10	; 0x0a
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	40 e8       	ldi	r20, 0x80	; 128
    365a:	5f e3       	ldi	r21, 0x3F	; 63
    365c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3660:	88 23       	and	r24, r24
    3662:	2c f4       	brge	.+10     	; 0x366e <SevSeg_SevErrStateDisplayRange+0x402>
		__ticks = 1;
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	9e 83       	std	Y+6, r25	; 0x06
    366a:	8d 83       	std	Y+5, r24	; 0x05
    366c:	3f c0       	rjmp	.+126    	; 0x36ec <SevSeg_SevErrStateDisplayRange+0x480>
	else if (__tmp > 65535)
    366e:	6f 81       	ldd	r22, Y+7	; 0x07
    3670:	78 85       	ldd	r23, Y+8	; 0x08
    3672:	89 85       	ldd	r24, Y+9	; 0x09
    3674:	9a 85       	ldd	r25, Y+10	; 0x0a
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	3f ef       	ldi	r19, 0xFF	; 255
    367a:	4f e7       	ldi	r20, 0x7F	; 127
    367c:	57 e4       	ldi	r21, 0x47	; 71
    367e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3682:	18 16       	cp	r1, r24
    3684:	4c f5       	brge	.+82     	; 0x36d8 <SevSeg_SevErrStateDisplayRange+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3686:	6b 85       	ldd	r22, Y+11	; 0x0b
    3688:	7c 85       	ldd	r23, Y+12	; 0x0c
    368a:	8d 85       	ldd	r24, Y+13	; 0x0d
    368c:	9e 85       	ldd	r25, Y+14	; 0x0e
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	40 e2       	ldi	r20, 0x20	; 32
    3694:	51 e4       	ldi	r21, 0x41	; 65
    3696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	bc 01       	movw	r22, r24
    36a0:	cd 01       	movw	r24, r26
    36a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	9e 83       	std	Y+6, r25	; 0x06
    36ac:	8d 83       	std	Y+5, r24	; 0x05
    36ae:	0f c0       	rjmp	.+30     	; 0x36ce <SevSeg_SevErrStateDisplayRange+0x462>
    36b0:	88 ec       	ldi	r24, 0xC8	; 200
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	9c 83       	std	Y+4, r25	; 0x04
    36b6:	8b 83       	std	Y+3, r24	; 0x03
    36b8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ba:	9c 81       	ldd	r25, Y+4	; 0x04
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	f1 f7       	brne	.-4      	; 0x36bc <SevSeg_SevErrStateDisplayRange+0x450>
    36c0:	9c 83       	std	Y+4, r25	; 0x04
    36c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c4:	8d 81       	ldd	r24, Y+5	; 0x05
    36c6:	9e 81       	ldd	r25, Y+6	; 0x06
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	9e 83       	std	Y+6, r25	; 0x06
    36cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ce:	8d 81       	ldd	r24, Y+5	; 0x05
    36d0:	9e 81       	ldd	r25, Y+6	; 0x06
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	69 f7       	brne	.-38     	; 0x36b0 <SevSeg_SevErrStateDisplayRange+0x444>
    36d6:	14 c0       	rjmp	.+40     	; 0x3700 <SevSeg_SevErrStateDisplayRange+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d8:	6f 81       	ldd	r22, Y+7	; 0x07
    36da:	78 85       	ldd	r23, Y+8	; 0x08
    36dc:	89 85       	ldd	r24, Y+9	; 0x09
    36de:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	9e 83       	std	Y+6, r25	; 0x06
    36ea:	8d 83       	std	Y+5, r24	; 0x05
    36ec:	8d 81       	ldd	r24, Y+5	; 0x05
    36ee:	9e 81       	ldd	r25, Y+6	; 0x06
    36f0:	9a 83       	std	Y+2, r25	; 0x02
    36f2:	89 83       	std	Y+1, r24	; 0x01
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
    36f6:	9a 81       	ldd	r25, Y+2	; 0x02
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	f1 f7       	brne	.-4      	; 0x36f8 <SevSeg_SevErrStateDisplayRange+0x48c>
    36fc:	9a 83       	std	Y+2, r25	; 0x02
    36fe:	89 83       	std	Y+1, r24	; 0x01
		}
		return NoError;
			}
			else if (SevenSegment1->SevSeg_Type1 == Anode)
					{
				for (int i =Copy_start; i<=Copy_End; i++ )
    3700:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3702:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3704:	01 96       	adiw	r24, 0x01	; 1
    3706:	9e 8f       	std	Y+30, r25	; 0x1e
    3708:	8d 8f       	std	Y+29, r24	; 0x1d
    370a:	8c a1       	ldd	r24, Y+36	; 0x24
    370c:	28 2f       	mov	r18, r24
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3712:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3714:	28 17       	cp	r18, r24
    3716:	39 07       	cpc	r19, r25
    3718:	0c f0       	brlt	.+2      	; 0x371c <SevSeg_SevErrStateDisplayRange+0x4b0>
    371a:	eb ce       	rjmp	.-554    	; 0x34f2 <SevSeg_SevErrStateDisplayRange+0x286>
								default: return WrongPort;
						}
							_delay_ms(500);

							}
				return NoError;
    371c:	1d a2       	std	Y+37, r1	; 0x25
    371e:	02 c0       	rjmp	.+4      	; 0x3724 <SevSeg_SevErrStateDisplayRange+0x4b8>

					}
			else {
				return WrongType;
    3720:	91 e0       	ldi	r25, 0x01	; 1
    3722:	9d a3       	std	Y+37, r25	; 0x25
    3724:	8d a1       	ldd	r24, Y+37	; 0x25
			     }
}
    3726:	a9 96       	adiw	r28, 0x29	; 41
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	f8 94       	cli
    372c:	de bf       	out	0x3e, r29	; 62
    372e:	0f be       	out	0x3f, r0	; 63
    3730:	cd bf       	out	0x3d, r28	; 61
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <main>:
#include "../Comman/definition.h"
#include "../Comman/Bit_Math.h"
PWM_info pwm1={PWM_FAST,PWM_inverting_mode,pre_8};
lcd_info lcd1={DIO_GroupB,DIO_GroupB,DIO_GroupB, Pin2,Pin1,Pin0, DIO_GroupA};
int main()
{
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	00 d0       	rcall	.+0      	; 0x373e <main+0x6>
    373e:	cd b7       	in	r28, 0x3d	; 61
    3740:	de b7       	in	r29, 0x3e	; 62
	u8 speed=0;
    3742:	19 82       	std	Y+1, r1	; 0x01
	u8 r;
	lcd_voidinit(&lcd1);
    3744:	83 e8       	ldi	r24, 0x83	; 131
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	0e 94 59 14 	call	0x28b2	; 0x28b2 <lcd_voidinit>
	KEY_pad_voidinit();
    374c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <KEY_pad_voidinit>
	DIO_ErrStateSetPinDirection(DIO_GroupB,Pin3,DIO_Output);
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	63 e0       	ldi	r22, 0x03	; 3
    3754:	41 e0       	ldi	r20, 0x01	; 1
    3756:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_ErrStateSetPinDirection>
	Set_PWM(&pwm1);
    375a:	80 e8       	ldi	r24, 0x80	; 128
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0e 94 c4 06 	call	0xd88	; 0xd88 <Set_PWM>
	while(1)
	{
		Key_Pad_u8GetButtonPressed(&r);
    3762:	ce 01       	movw	r24, r28
    3764:	02 96       	adiw	r24, 0x02	; 2
    3766:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <Key_Pad_u8GetButtonPressed>
		if(r)
    376a:	8a 81       	ldd	r24, Y+2	; 0x02
    376c:	88 23       	and	r24, r24
    376e:	d1 f0       	breq	.+52     	; 0x37a4 <main+0x6c>
		{
		if (r!= '=')
    3770:	8a 81       	ldd	r24, Y+2	; 0x02
    3772:	8d 33       	cpi	r24, 0x3D	; 61
    3774:	b9 f0       	breq	.+46     	; 0x37a4 <main+0x6c>
		{
			lcd_voidsendchar(r,&lcd1);
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	23 e8       	ldi	r18, 0x83	; 131
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	b9 01       	movw	r22, r18
    377e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <lcd_voidsendchar>
			speed= (speed*10) +r;
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	88 2f       	mov	r24, r24
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	9c 01       	movw	r18, r24
    378a:	22 0f       	add	r18, r18
    378c:	33 1f       	adc	r19, r19
    378e:	c9 01       	movw	r24, r18
    3790:	88 0f       	add	r24, r24
    3792:	99 1f       	adc	r25, r25
    3794:	88 0f       	add	r24, r24
    3796:	99 1f       	adc	r25, r25
    3798:	82 0f       	add	r24, r18
    379a:	93 1f       	adc	r25, r19
    379c:	98 2f       	mov	r25, r24
    379e:	8a 81       	ldd	r24, Y+2	; 0x02
    37a0:	89 0f       	add	r24, r25
    37a2:	89 83       	std	Y+1, r24	; 0x01
				}
		}
		 if (r== '.')
    37a4:	8a 81       	ldd	r24, Y+2	; 0x02
    37a6:	8e 32       	cpi	r24, 0x2E	; 46
    37a8:	29 f4       	brne	.+10     	; 0x37b4 <main+0x7c>
		{
			speed= 0;
    37aa:	19 82       	std	Y+1, r1	; 0x01
			lcd_voidclear( &lcd1);
    37ac:	83 e8       	ldi	r24, 0x83	; 131
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_voidclear>
		}

		TIMERS_Setpwm(speed);
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TIMERS_Setpwm>
    37ba:	d3 cf       	rjmp	.-90     	; 0x3762 <main+0x2a>

000037bc <__udivmodqi4>:
    37bc:	99 1b       	sub	r25, r25
    37be:	79 e0       	ldi	r23, 0x09	; 9
    37c0:	04 c0       	rjmp	.+8      	; 0x37ca <__udivmodqi4_ep>

000037c2 <__udivmodqi4_loop>:
    37c2:	99 1f       	adc	r25, r25
    37c4:	96 17       	cp	r25, r22
    37c6:	08 f0       	brcs	.+2      	; 0x37ca <__udivmodqi4_ep>
    37c8:	96 1b       	sub	r25, r22

000037ca <__udivmodqi4_ep>:
    37ca:	88 1f       	adc	r24, r24
    37cc:	7a 95       	dec	r23
    37ce:	c9 f7       	brne	.-14     	; 0x37c2 <__udivmodqi4_loop>
    37d0:	80 95       	com	r24
    37d2:	08 95       	ret

000037d4 <__prologue_saves__>:
    37d4:	2f 92       	push	r2
    37d6:	3f 92       	push	r3
    37d8:	4f 92       	push	r4
    37da:	5f 92       	push	r5
    37dc:	6f 92       	push	r6
    37de:	7f 92       	push	r7
    37e0:	8f 92       	push	r8
    37e2:	9f 92       	push	r9
    37e4:	af 92       	push	r10
    37e6:	bf 92       	push	r11
    37e8:	cf 92       	push	r12
    37ea:	df 92       	push	r13
    37ec:	ef 92       	push	r14
    37ee:	ff 92       	push	r15
    37f0:	0f 93       	push	r16
    37f2:	1f 93       	push	r17
    37f4:	cf 93       	push	r28
    37f6:	df 93       	push	r29
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    37fc:	ca 1b       	sub	r28, r26
    37fe:	db 0b       	sbc	r29, r27
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	f8 94       	cli
    3804:	de bf       	out	0x3e, r29	; 62
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	cd bf       	out	0x3d, r28	; 61
    380a:	09 94       	ijmp

0000380c <__epilogue_restores__>:
    380c:	2a 88       	ldd	r2, Y+18	; 0x12
    380e:	39 88       	ldd	r3, Y+17	; 0x11
    3810:	48 88       	ldd	r4, Y+16	; 0x10
    3812:	5f 84       	ldd	r5, Y+15	; 0x0f
    3814:	6e 84       	ldd	r6, Y+14	; 0x0e
    3816:	7d 84       	ldd	r7, Y+13	; 0x0d
    3818:	8c 84       	ldd	r8, Y+12	; 0x0c
    381a:	9b 84       	ldd	r9, Y+11	; 0x0b
    381c:	aa 84       	ldd	r10, Y+10	; 0x0a
    381e:	b9 84       	ldd	r11, Y+9	; 0x09
    3820:	c8 84       	ldd	r12, Y+8	; 0x08
    3822:	df 80       	ldd	r13, Y+7	; 0x07
    3824:	ee 80       	ldd	r14, Y+6	; 0x06
    3826:	fd 80       	ldd	r15, Y+5	; 0x05
    3828:	0c 81       	ldd	r16, Y+4	; 0x04
    382a:	1b 81       	ldd	r17, Y+3	; 0x03
    382c:	aa 81       	ldd	r26, Y+2	; 0x02
    382e:	b9 81       	ldd	r27, Y+1	; 0x01
    3830:	ce 0f       	add	r28, r30
    3832:	d1 1d       	adc	r29, r1
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	ed 01       	movw	r28, r26
    3840:	08 95       	ret

00003842 <_exit>:
    3842:	f8 94       	cli

00003844 <__stop_program>:
    3844:	ff cf       	rjmp	.-2      	; 0x3844 <__stop_program>
